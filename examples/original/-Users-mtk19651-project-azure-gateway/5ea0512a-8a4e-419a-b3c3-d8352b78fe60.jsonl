{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":"."},"uuid":"41888aae-798c-4140-987d-069895023f36","timestamp":"2025-08-23T09:16:48.358Z"}
{"type":"summary","summary":"Refactoring Azure OpenAI Config to Package Structure","leafUuid":"7d78ed54-3921-4c4a-9659-f50313e3c452"}
{"parentUuid":"41888aae-798c-4140-987d-069895023f36","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01XzQCyRaQPjRQUs9hSpoEt6","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"I'll help you understand the Azure gateway project structure and recent changes. Let me start by examining the new Azure package files that were added."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4874,"cache_read_input_tokens":11002,"output_tokens":1}},"type":"assistant","uuid":"7535d4f7-3f9e-41a0-b79a-b74d05926df3","timestamp":"2025-08-23T09:16:54.697Z"}
{"type":"summary","summary":"Git Commit 測試修復與提交流程","leafUuid":"e1758f82-da47-4529-897e-5d4c6f890ba9"}
{"type":"summary","summary":"Upgrading golangci-lint to fix Go compatibility issue","leafUuid":"78c6068f-ca5a-4e6a-b033-bfeabe44efef"}
{"parentUuid":"7535d4f7-3f9e-41a0-b79a-b74d05926df3","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01XzQCyRaQPjRQUs9hSpoEt6","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_014ANxwbpAX2cbfDhLFSYpJF","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine the new Azure package structure and files","status":"in_progress"},{"id":"2","content":"Review the refactored Azure OpenAI spend functions","status":"pending"},{"id":"3","content":"Check how the main.go file was modified","status":"pending"},{"id":"4","content":"Understand the test coverage for the new Azure package","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":4874,"cache_read_input_tokens":11002,"output_tokens":200}},"type":"assistant","uuid":"bd55b428-d1f7-4621-887c-f84deb757f49","timestamp":"2025-08-23T09:17:01.222Z"}
{"parentUuid":"bd55b428-d1f7-4621-887c-f84deb757f49","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_014ANxwbpAX2cbfDhLFSYpJF","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"052e77d7-ec1b-4f31-a814-06a802e71bc4","timestamp":"2025-08-23T09:17:01.237Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Examine the new Azure package structure and files","status":"in_progress","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"pending","id":"2"},{"content":"Check how the main.go file was modified","status":"pending","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}]}}
{"type":"summary","summary":"Exploring Azure Gateway Codebase Structure","leafUuid":"eab9266b-f606-44ce-a305-8d0880edae66"}
{"type":"summary","summary":"Git Commit Creation Following Repository Convention","leafUuid":"f3131039-bc55-4da6-97e1-e890570c1465"}
{"parentUuid":"052e77d7-ec1b-4f31-a814-06a802e71bc4","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01KwyLuoovHtQhAGSs5hysSU","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_019QM6bCvjazXk8HC5u9FAwE","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/README.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":373,"cache_read_input_tokens":15876,"output_tokens":21}},"type":"assistant","uuid":"ffb5fadc-d6aa-4d0c-9d25-ac67fad4e5aa","timestamp":"2025-08-23T09:17:07.918Z"}
{"parentUuid":"ffb5fadc-d6aa-4d0c-9d25-ac67fad4e5aa","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01KwyLuoovHtQhAGSs5hysSU","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01HWxMGWvfQPsZYTz63R55sn","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/config.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":373,"cache_read_input_tokens":15876,"output_tokens":21}},"type":"assistant","uuid":"31518a9b-bb8f-4820-8004-823e983205f3","timestamp":"2025-08-23T09:17:09.726Z"}
{"type":"summary","summary":"\"API Error Discussion and Random Text Input\"","leafUuid":"fea7dc33-a326-4155-a297-6eb9ee8d78b0"}
{"parentUuid":"31518a9b-bb8f-4820-8004-823e983205f3","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01KwyLuoovHtQhAGSs5hysSU","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_014CxXLEftZnwAhYBD8Xyac7","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/models.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":373,"cache_read_input_tokens":15876,"output_tokens":21}},"type":"assistant","uuid":"797998d0-2169-43a8-b0de-91aabcadbeb8","timestamp":"2025-08-23T09:17:11.521Z"}
{"parentUuid":"797998d0-2169-43a8-b0de-91aabcadbeb8","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01KwyLuoovHtQhAGSs5hysSU","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01Ms8xJ9XjkLLNCjeKfARUvL","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/utils.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":373,"cache_read_input_tokens":15876,"output_tokens":233}},"type":"assistant","uuid":"34f83f54-b656-40c5-b8e7-0c72db76f834","timestamp":"2025-08-23T09:17:13.266Z"}
{"parentUuid":"34f83f54-b656-40c5-b8e7-0c72db76f834","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_019QM6bCvjazXk8HC5u9FAwE","type":"tool_result","content":"     1→# Azure Package\n     2→\n     3→This package contains Azure OpenAI service configurations and utilities for the GAISF Gateway.\n     4→\n     5→## Overview\n     6→\n     7→The `azure` package centralizes all Azure OpenAI-related configurations, including:\n     8→- Model definitions and pricing\n     9→- Regional endpoint configurations\n    10→- Endpoint builder functions\n    11→- Spend calculation functions\n    12→- Azure Cognitive Services configurations\n    13→\n    14→## Structure\n    15→\n    16→### Files\n    17→\n    18→- `azure.go` - Core constants and types (API versions, O-series models)\n    19→- `models.go` - Model configurations including pricing and regional deployments\n    20→- `config.go` - Configuration builders for dispatchers and endpoints\n    21→- `spendfn.go` - Spend calculation functions for billing\n    22→- `utils.go` - Utility functions for environment variables\n    23→\n    24→### Key Types\n    25→\n    26→#### `ModelConfig`\n    27→Contains model-specific configuration:\n    28→- Pricing rates (input/output tokens)\n    29→- Model type flags (embedding, whisper, TTS, etc.)\n    30→- Tokenizer selection\n    31→\n    32→#### `RegionConfig`\n    33→Defines regional endpoint configuration:\n    34→- Region name (e.g., \"aideopenaieastus2\")\n    35→- Traffic weight for load balancing\n    36→\n    37→#### `ModelDeployment`\n    38→Combines model configuration with regional deployments.\n    39→\n    40→#### `Config`\n    41→Main configuration struct for building Azure services:\n    42→- Transport and logging\n    43→- Authentication (Crowd API)\n    44→- Quota management\n    45→- Tokenizers\n    46→- Azure service endpoints\n    47→\n    48→## Usage\n    49→\n    50→### Building Azure OpenAI Dispatchers\n    51→\n    52→```go\n    53→import \"gitea.mediatek.inc/davinci/azure-gateway/azure\"\n    54→\n    55→// Create configuration\n    56→azureConfig := &azure.Config{\n    57→    Transport:             tr,\n    58→    Logger:                logger,\n    59→    CrowdAPI:              crowdapi,\n    60→    QuotaClient:           qc,\n    61→    SMTPServer:            smtpserver,\n    62→    CL100K:                cl100k,\n    63→    P50K:                  p50k,\n    64→    DailyResetController:  dailyResetController,\n    65→    AssistantsAPIResource: \"aideopenaiaustraliaeast\",\n    66→    AzureCognitiveHost:    \"https://aide-cognitive-multi.cognitiveservices.azure.com\",\n    67→    AzureCognitiveKey:     \"your-key\",\n    68→    SpeechAPIKey:          \"your-speech-key\",\n    69→}\n    70→\n    71→// Build dispatchers\n    72→aoaiDispatchers := azure.BuildAOAIDispatchers(azureConfig)\n    73→aoaiFallback := azure.BuildAOAIFallback(azureConfig)\n    74→assistantsAPI := azure.BuildAssistantsAPI(azureConfig)\n    75→azureCognitive, sttxy, customVoice := azure.BuildCognitiveEndpoints(azureConfig)\n    76→```\n    77→\n    78→### Adding New Models\n    79→\n    80→To add a new Azure OpenAI model:\n    81→\n    82→1. Add the model configuration to `ModelDeployments` in `models.go`:\n    83→```go\n    84→\"aide-new-model\": {\n    85→    ModelConfig: ModelConfig{\n    86→        Name:       \"aide-new-model\",\n    87→        InputRate:  100,  // Price per million input tokens\n    88→        OutputRate: 200,  // Price per million output tokens\n    89→        CapGPT4:    true,\n    90→    },\n    91→    Regions: []RegionConfig{\n    92→        {Name: \"aideopenaieastus2\", Weight: 60000},\n    93→        {Name: \"aideopenaiswedencentral\", Weight: 60000},\n    94→    },\n    95→},\n    96→```\n    97→\n    98→2. Set the environment variables for API keys:\n    99→```bash\n   100→export AZURE_OPAI_KEY_aideopenaieastus2=\"your-key\"\n   101→export AZURE_OPAI_KEY_aideopenaiswedencentral=\"your-key\"\n   102→```\n   103→\n   104→## Model Pricing\n   105→\n   106→Pricing is defined in internal units per million tokens:\n   107→- $1.00 = 100 internal units\n   108→- Example: GPT-4 Turbo has InputRate=1000 ($10/million tokens) and OutputRate=3000 ($30/million tokens)\n   109→\n   110→## Special Models\n   111→\n   112→### Whisper (Speech-to-Text)\n   113→- No token-based pricing\n   114→- Uses `WhisperSpendFn` for cost calculation\n   115→\n   116→### TTS (Text-to-Speech)\n   117→- Fixed rate pricing\n   118→- Standard: 15000000 units\n   119→- HD: 30000000 units\n   120→\n   121→### DALL-E (Image Generation)\n   122→- Per-image pricing\n   123→- DALL-E 2: 2000000 units\n   124→- DALL-E 3: 4000000 units\n   125→\n   126→### Realtime Models\n   127→- Special pricing model\n   128→- Uses `RealtimeSpendFn`\n   129→\n   130→## Regional Weights\n   131→\n   132→Weights determine traffic distribution:\n   133→- Higher weight = more traffic\n   134→- PTU (Provisioned Throughput Units) enabled for specific model/region combinations\n   135→- Currently only `aide-gpt-4.1` in `aideopenaijapaneast` has PTU enabled\n   136→\n   137→## Environment Variables\n   138→\n   139→Required environment variables:\n   140→- `AZURE_OPAI_KEY_<region>` - API key for each Azure region\n   141→- `AZURE_COGNITIVE_KEY` - Azure Cognitive Services key\n   142→- `SPEECH_API_KEY` - Speech services key (optional, defaults to AZURE_COGNITIVE_KEY)\n   143→- `ASSISTANTS_API_RESOURCE` - Assistants API resource name\n   144→\n   145→## Testing\n   146→\n   147→Run tests with:\n   148→```bash\n   149→go test ./azure -v\n   150→```\n   151→\n   152→Tests cover:\n   153→- Model configuration validation\n   154→- Regional weight validation\n   155→- PTU enablement logic\n   156→- API version constants\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"ae466377-22d7-4a2c-bbef-1a82602dcb56","timestamp":"2025-08-23T09:17:13.290Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/README.md","content":"# Azure Package\n\nThis package contains Azure OpenAI service configurations and utilities for the GAISF Gateway.\n\n## Overview\n\nThe `azure` package centralizes all Azure OpenAI-related configurations, including:\n- Model definitions and pricing\n- Regional endpoint configurations\n- Endpoint builder functions\n- Spend calculation functions\n- Azure Cognitive Services configurations\n\n## Structure\n\n### Files\n\n- `azure.go` - Core constants and types (API versions, O-series models)\n- `models.go` - Model configurations including pricing and regional deployments\n- `config.go` - Configuration builders for dispatchers and endpoints\n- `spendfn.go` - Spend calculation functions for billing\n- `utils.go` - Utility functions for environment variables\n\n### Key Types\n\n#### `ModelConfig`\nContains model-specific configuration:\n- Pricing rates (input/output tokens)\n- Model type flags (embedding, whisper, TTS, etc.)\n- Tokenizer selection\n\n#### `RegionConfig`\nDefines regional endpoint configuration:\n- Region name (e.g., \"aideopenaieastus2\")\n- Traffic weight for load balancing\n\n#### `ModelDeployment`\nCombines model configuration with regional deployments.\n\n#### `Config`\nMain configuration struct for building Azure services:\n- Transport and logging\n- Authentication (Crowd API)\n- Quota management\n- Tokenizers\n- Azure service endpoints\n\n## Usage\n\n### Building Azure OpenAI Dispatchers\n\n```go\nimport \"gitea.mediatek.inc/davinci/azure-gateway/azure\"\n\n// Create configuration\nazureConfig := &azure.Config{\n    Transport:             tr,\n    Logger:                logger,\n    CrowdAPI:              crowdapi,\n    QuotaClient:           qc,\n    SMTPServer:            smtpserver,\n    CL100K:                cl100k,\n    P50K:                  p50k,\n    DailyResetController:  dailyResetController,\n    AssistantsAPIResource: \"aideopenaiaustraliaeast\",\n    AzureCognitiveHost:    \"https://aide-cognitive-multi.cognitiveservices.azure.com\",\n    AzureCognitiveKey:     \"your-key\",\n    SpeechAPIKey:          \"your-speech-key\",\n}\n\n// Build dispatchers\naoaiDispatchers := azure.BuildAOAIDispatchers(azureConfig)\naoaiFallback := azure.BuildAOAIFallback(azureConfig)\nassistantsAPI := azure.BuildAssistantsAPI(azureConfig)\nazureCognitive, sttxy, customVoice := azure.BuildCognitiveEndpoints(azureConfig)\n```\n\n### Adding New Models\n\nTo add a new Azure OpenAI model:\n\n1. Add the model configuration to `ModelDeployments` in `models.go`:\n```go\n\"aide-new-model\": {\n    ModelConfig: ModelConfig{\n        Name:       \"aide-new-model\",\n        InputRate:  100,  // Price per million input tokens\n        OutputRate: 200,  // Price per million output tokens\n        CapGPT4:    true,\n    },\n    Regions: []RegionConfig{\n        {Name: \"aideopenaieastus2\", Weight: 60000},\n        {Name: \"aideopenaiswedencentral\", Weight: 60000},\n    },\n},\n```\n\n2. Set the environment variables for API keys:\n```bash\nexport AZURE_OPAI_KEY_aideopenaieastus2=\"your-key\"\nexport AZURE_OPAI_KEY_aideopenaiswedencentral=\"your-key\"\n```\n\n## Model Pricing\n\nPricing is defined in internal units per million tokens:\n- $1.00 = 100 internal units\n- Example: GPT-4 Turbo has InputRate=1000 ($10/million tokens) and OutputRate=3000 ($30/million tokens)\n\n## Special Models\n\n### Whisper (Speech-to-Text)\n- No token-based pricing\n- Uses `WhisperSpendFn` for cost calculation\n\n### TTS (Text-to-Speech)\n- Fixed rate pricing\n- Standard: 15000000 units\n- HD: 30000000 units\n\n### DALL-E (Image Generation)\n- Per-image pricing\n- DALL-E 2: 2000000 units\n- DALL-E 3: 4000000 units\n\n### Realtime Models\n- Special pricing model\n- Uses `RealtimeSpendFn`\n\n## Regional Weights\n\nWeights determine traffic distribution:\n- Higher weight = more traffic\n- PTU (Provisioned Throughput Units) enabled for specific model/region combinations\n- Currently only `aide-gpt-4.1` in `aideopenaijapaneast` has PTU enabled\n\n## Environment Variables\n\nRequired environment variables:\n- `AZURE_OPAI_KEY_<region>` - API key for each Azure region\n- `AZURE_COGNITIVE_KEY` - Azure Cognitive Services key\n- `SPEECH_API_KEY` - Speech services key (optional, defaults to AZURE_COGNITIVE_KEY)\n- `ASSISTANTS_API_RESOURCE` - Assistants API resource name\n\n## Testing\n\nRun tests with:\n```bash\ngo test ./azure -v\n```\n\nTests cover:\n- Model configuration validation\n- Regional weight validation\n- PTU enablement logic\n- API version constants","numLines":156,"startLine":1,"totalLines":156}}}
{"parentUuid":"ae466377-22d7-4a2c-bbef-1a82602dcb56","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01HWxMGWvfQPsZYTz63R55sn","type":"tool_result","content":"     1→package azure\n     2→\n     3→import (\n     4→\t\"context\"\n     5→\t\"fmt\"\n     6→\t\"net/http\"\n     7→\t\"os\"\n     8→\t\"strings\"\n     9→\t\"time\"\n    10→\n    11→\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n    12→\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n    13→\t\"gitea.mediatek.inc/davinci/azure-gateway/dailyreset\"\n    14→\t\"gitea.mediatek.inc/davinci/azure-gateway/dispatcher\"\n    15→\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n    16→\t\"github.com/pkoukk/tiktoken-go\"\n    17→\t\"golang.org/x/exp/slog\"\n    18→)\n    19→\n    20→// Config holds the configuration for Azure OpenAI services\n    21→type Config struct {\n    22→\tTransport              *http.Transport\n    23→\tLogger                 *slog.Logger\n    24→\tCrowdAPI               crowdadapter.Adapter\n    25→\tQuotaClient            quota.QuotaClient\n    26→\tSMTPServer             string\n    27→\tCL100K                 *tiktoken.Tiktoken\n    28→\tP50K                   *tiktoken.Tiktoken\n    29→\tDailyResetController   *dailyreset.DailyResetController\n    30→\tAssistantsAPIResource  string\n    31→\tAzureCognitiveHost     string\n    32→\tAzureCognitiveKey      string\n    33→\tSpeechAPIKey           string\n    34→}\n    35→\n    36→// BuildAOAIEndpointConfig creates an endpoint configuration for Azure OpenAI\n    37→func BuildAOAIEndpointConfig(weight int, name, model, key string) dispatcher.EndpointConfig {\n    38→\tbaseURL := fmt.Sprintf(\"https://%s.openai.azure.com\", name)\n    39→\n    40→\t// If the model contains \"dalle\", no additional deadline or ptu configuration is needed\n    41→\tif strings.Contains(strings.ToLower(model), \"dalle\") {\n    42→\t\treturn dispatcher.EndpointConfig{\n    43→\t\t\tWeight: weight,\n    44→\t\t\tURL:    baseURL,\n    45→\t\t\tHdrs:   map[string]string{\"api-key\": key},\n    46→\t\t\tLabels: []string{\"aoai\", model, name},\n    47→\t\t}\n    48→\t}\n    49→\n    50→\t// Set deadline\n    51→\tdeadline := time.Second * 60\n    52→\tif strings.HasSuffix(model, \"32k\") || strings.HasSuffix(model, \"16k\") || strings.Contains(model, \"gpt-4\") {\n    53→\t\tdeadline = time.Second * 150\n    54→\t}\n    55→\n    56→\tptu := IsPTUEnabled(model, name)\n    57→\n    58→\t// Create a common configuration\n    59→\tcfg := dispatcher.EndpointConfig{\n    60→\t\tPTU:    ptu,\n    61→\t\tWeight: weight,\n    62→\t\tURL:    baseURL,\n    63→\t\tHdrs:   map[string]string{\"api-key\": key},\n    64→\t\tLabels: []string{\"aoai\", model, name},\n    65→\t}\n    66→\n    67→\t// If ptu is true, set judgeFn to always return true\n    68→\tif ptu {\n    69→\t\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n    70→\t\t\treturn true\n    71→\t\t}\n    72→\t\tcfg.TestReqFn = func() *http.Request {\n    73→\t\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n    74→\t\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/chat/completions?api-version=2024-02-01\", baseURL, model), payload)\n    75→\t\t\tif err != nil {\n    76→\t\t\t\tpanic(err)\n    77→\t\t\t}\n    78→\t\t\treq.Header.Set(\"api-key\", key)\n    79→\t\t\treq.Header.Set(\"content-type\", \"application/json\")\n    80→\t\t\treturn req\n    81→\t\t}\n    82→\t\treturn cfg\n    83→\t}\n    84→\n    85→\t// Define default judgeFn and testReqFn for normal cases\n    86→\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n    87→\t\treturn resp.StatusCode != 429 && resp.StatusCode < 500 && ttfb < deadline\n    88→\t}\n    89→\tcfg.TestReqFn = func() *http.Request {\n    90→\t\tendpoint := \"chat/completions\"\n    91→\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n    92→\t\tif model == \"aide-davinci-003\" || model == \"aide-code-davinci-002\" {\n    93→\t\t\tendpoint = \"completions\"\n    94→\t\t\tpayload = strings.NewReader(`{\"prompt\": \"Hi\"}`)\n    95→\t\t} else if strings.Contains(model, \"embedding\") {\n    96→\t\t\tendpoint = \"embeddings\"\n    97→\t\t\tpayload = strings.NewReader(`{\"input\": [\"Hi\"]}`)\n    98→\t\t}\n    99→\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/%s?api-version=2024-02-01\", baseURL, model, endpoint), payload)\n   100→\t\tif err != nil {\n   101→\t\t\tpanic(err)\n   102→\t\t}\n   103→\t\treq.Header.Set(\"api-key\", key)\n   104→\t\treq.Header.Set(\"content-type\", \"application/json\")\n   105→\t\treturn req\n   106→\t}\n   107→\n   108→\treturn cfg\n   109→}\n   110→\n   111→// BuildAOAIDispatchers creates all Azure OpenAI dispatchers based on model configurations\n   112→func BuildAOAIDispatchers(cfg *Config) map[string]*dispatcher.Dispatcher {\n   113→\tdispatchers := make(map[string]*dispatcher.Dispatcher)\n   114→\n   115→\tfor modelName, modelDeploy := range ModelDeployments {\n   116→\t\tvar endpoints []dispatcher.EndpointConfig\n   117→\n   118→\t\t// Build endpoint configurations for each region\n   119→\t\tfor _, region := range modelDeploy.Regions {\n   120→\t\t\tkey := os.Getenv(\"AZURE_OPAI_KEY_\" + region.Name)\n   121→\t\t\tif key == \"\" {\n   122→\t\t\t\tcontinue // Skip regions without configured keys\n   123→\t\t\t}\n   124→\n   125→\t\t\tendpointCfg := BuildAOAIEndpointConfig(region.Weight, region.Name, modelDeploy.Name, key)\n   126→\t\t\t\n   127→\t\t\t// Set NoReqLog for whisper models\n   128→\t\t\tif modelDeploy.IsWhisper {\n   129→\t\t\t\tendpointCfg.NoReqLog = true\n   130→\t\t\t}\n   131→\t\t\t\n   132→\t\t\tendpoints = append(endpoints, endpointCfg)\n   133→\t\t}\n   134→\n   135→\t\tif len(endpoints) == 0 {\n   136→\t\t\tcontinue // Skip models with no configured endpoints\n   137→\t\t}\n   138→\n   139→\t\t// Create appropriate SpendFn based on model type\n   140→\t\tvar spendFn common.SpendFn\n   141→\t\tif modelDeploy.IsWhisper {\n   142→\t\t\tspendFn = WhisperSpendFn(cfg.QuotaClient)\n   143→\t\t} else if modelDeploy.IsTTS {\n   144→\t\t\tttsRate := 15000000 // Default TTS rate\n   145→\t\t\tif modelName == \"aide-tts-hd\" {\n   146→\t\t\t\tttsRate = 30000000\n   147→\t\t\t}\n   148→\t\t\tspendFn = TTSSpendFn(ttsRate, cfg.QuotaClient)\n   149→\t\t} else if modelDeploy.IsRealtime {\n   150→\t\t\tspendFn = RealtimeSpendFn()\n   151→\t\t} else if modelDeploy.IsDalle {\n   152→\t\t\tif modelName == \"dalleget\" {\n   153→\t\t\t\t// Special no-op spend function for dalleget\n   154→\t\t\t\tspendFn = common.SpendFn{\n   155→\t\t\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   156→\t\t\t\t\t\treturn 0, 1, nil\n   157→\t\t\t\t\t},\n   158→\t\t\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   159→\t\t\t\t\t\treturn 0\n   160→\t\t\t\t\t},\n   161→\t\t\t\t\tAlert: func(user string, logger *slog.Logger) {},\n   162→\t\t\t\t}\n   163→\t\t\t} else {\n   164→\t\t\t\tspendFn = DalleSpendFn(modelDeploy.DalleRate, cfg.QuotaClient, cfg.SMTPServer)\n   165→\t\t\t}\n   166→\t\t} else {\n   167→\t\t\t// Regular model\n   168→\t\t\tencoder := cfg.CL100K\n   169→\t\t\tif modelDeploy.UseP50k {\n   170→\t\t\t\tencoder = cfg.P50K\n   171→\t\t\t}\n   172→\t\t\tspendFn = AoaiSpendFn(\n   173→\t\t\t\tmodelDeploy.Name,\n   174→\t\t\t\tmodelDeploy.CapGPT4,\n   175→\t\t\t\tcfg.CrowdAPI,\n   176→\t\t\t\tcfg.QuotaClient,\n   177→\t\t\t\tcfg.SMTPServer,\n   178→\t\t\t\tencoder,\n   179→\t\t\t\tmodelDeploy.InputRate,\n   180→\t\t\t\tmodelDeploy.OutputRate,\n   181→\t\t\t)\n   182→\t\t}\n   183→\n   184→\t\tdispatchers[modelName] = dispatcher.NewDispatcher(\n   185→\t\t\tcfg.Transport,\n   186→\t\t\tcfg.Logger,\n   187→\t\t\ttrue,\n   188→\t\t\tspendFn,\n   189→\t\t\tendpoints,\n   190→\t\t\tcfg.DailyResetController,\n   191→\t\t)\n   192→\t}\n   193→\n   194→\treturn dispatchers\n   195→}\n   196→\n   197→// BuildAOAIFallback creates the fallback endpoint for Azure OpenAI\n   198→func BuildAOAIFallback(cfg *Config) *dispatcher.Endpoint {\n   199→\tkey := os.Getenv(\"AZURE_OPAI_KEY_aideopenaieastus\")\n   200→\tif key == \"\" {\n   201→\t\treturn nil\n   202→\t}\n   203→\n   204→\tendpointCfg := BuildAOAIEndpointConfig(0, \"aideopenaieastus\", \"other\", key)\n   205→\tspendFn := AoaiSpendFn(\"\", true, cfg.CrowdAPI, cfg.QuotaClient, cfg.SMTPServer, cfg.CL100K, 200, 150)\n   206→\t\n   207→\treturn dispatcher.NewEndpoint(\n   208→\t\tcontext.Background(),\n   209→\t\ttrue,\n   210→\t\tendpointCfg,\n   211→\t\tcfg.Transport,\n   212→\t\tcfg.Logger,\n   213→\t\tspendFn,\n   214→\t\tcfg.DailyResetController,\n   215→\t)\n   216→}\n   217→\n   218→// BuildAssistantsAPI creates the Assistants API endpoint\n   219→func BuildAssistantsAPI(cfg *Config) *dispatcher.Endpoint {\n   220→\tresource := cfg.AssistantsAPIResource\n   221→\tif resource == \"\" {\n   222→\t\tresource = \"aideopenaiaustraliaeast\"\n   223→\t}\n   224→\n   225→\tkey := os.Getenv(\"AZURE_OPAI_KEY_\" + strings.ReplaceAll(resource, \"-\", \"_\"))\n   226→\tif key == \"\" {\n   227→\t\treturn nil\n   228→\t}\n   229→\n   230→\treturn dispatcher.NewEndpoint(\n   231→\t\tcontext.Background(),\n   232→\t\tfalse,\n   233→\t\tdispatcher.EndpointConfig{\n   234→\t\t\tURL:    fmt.Sprintf(\"https://%s.openai.azure.com\", resource),\n   235→\t\t\tHdrs:   map[string]string{\"api-key\": key},\n   236→\t\t\tLabels: []string{\"aoai\", \"assistants\", resource},\n   237→\t\t},\n   238→\t\tcfg.Transport,\n   239→\t\tcfg.Logger,\n   240→\t\tAssistantsSpendFn(cfg.QuotaClient, cfg.SMTPServer),\n   241→\t\tcfg.DailyResetController,\n   242→\t)\n   243→}\n   244→\n   245→// BuildCognitiveEndpoints creates Azure Cognitive Services endpoints\n   246→func BuildCognitiveEndpoints(cfg *Config) (azureCognitive, sttxy, customVoice *dispatcher.Endpoint) {\n   247→\t// Azure Cognitive Services endpoint\n   248→\tazureCognitive = dispatcher.NewEndpoint(\n   249→\t\tcontext.Background(),\n   250→\t\ttrue,\n   251→\t\tdispatcher.EndpointConfig{\n   252→\t\t\tURL:      cfg.AzureCognitiveHost,\n   253→\t\t\tHdrs:     map[string]string{\"Ocp-Apim-Subscription-Key\": cfg.AzureCognitiveKey},\n   254→\t\t\tNoReqLog: true,\n   255→\t\t\tLabels:   []string{\"cogn\", \"ocr\", \"azure-cognitive-multi\"},\n   256→\t\t},\n   257→\t\tcfg.Transport,\n   258→\t\tcfg.Logger,\n   259→\t\tcommon.SpendFn{\n   260→\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   261→\t\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"read/analyze\") {\n   262→\t\t\t\t\testimate = 100000 // OCR api costs $1 for 1000 calls\n   263→\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n   264→\t\t\t\t\treturn\n   265→\t\t\t\t}\n   266→\t\t\t\tif strings.Contains(req.URL.Path, \":analyze\") {\n   267→\t\t\t\t\testimate = 1000000 // document api costs $10 per 1,000 pages\n   268→\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n   269→\t\t\t\t\treturn\n   270→\t\t\t\t}\n   271→\t\t\t\treturn 0, 1, nil\n   272→\t\t\t},\n   273→\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   274→\t\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n   275→\t\t\t\t\tcfg.QuotaClient.Spend(context.Background(), user, preestimate*-1)\n   276→\t\t\t\t\treturn preestimate * -1\n   277→\t\t\t\t}\n   278→\t\t\t\treturn 0\n   279→\t\t\t},\n   280→\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n   281→\t\t},\n   282→\t\tcfg.DailyResetController,\n   283→\t)\n   284→\n   285→\t// Speech-to-text endpoint\n   286→\tspeechKey := cfg.SpeechAPIKey\n   287→\tif speechKey == \"\" {\n   288→\t\tspeechKey = cfg.AzureCognitiveKey\n   289→\t}\n   290→\n   291→\tsttxy = dispatcher.NewEndpoint(\n   292→\t\tcontext.Background(),\n   293→\t\tfalse,\n   294→\t\tdispatcher.EndpointConfig{\n   295→\t\t\tURL:      \"https://southeastasia.stt.speech.microsoft.com\",\n   296→\t\t\tHdrs:     map[string]string{\"Ocp-Apim-Subscription-Key\": speechKey},\n   297→\t\t\tNoReqLog: true,\n   298→\t\t\tLabels:   []string{\"cogn\", \"stt\", \"southeastasia\"},\n   299→\t\t},\n   300→\t\tcfg.Transport,\n   301→\t\tcfg.Logger,\n   302→\t\tcommon.SpendFn{\n   303→\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   304→\t\t\t\treturn 0, 1, nil\n   305→\t\t\t},\n   306→\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   307→\t\t\t\treturn 0\n   308→\t\t\t},\n   309→\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n   310→\t\t},\n   311→\t\tcfg.DailyResetController,\n   312→\t)\n   313→\n   314→\t// Custom voice endpoint\n   315→\tcustomVoice = dispatcher.NewEndpoint(\n   316→\t\tcontext.Background(),\n   317→\t\tfalse,\n   318→\t\tdispatcher.EndpointConfig{\n   319→\t\t\tURL:    \"https://southeastasia.customvoice.api.speech.microsoft.com\",\n   320→\t\t\tHdrs:   map[string]string{\"Ocp-Apim-Subscription-Key\": cfg.AzureCognitiveKey},\n   321→\t\t\tLabels: []string{\"cogn\", \"tts\", \"southeastasia\"},\n   322→\t\t},\n   323→\t\tcfg.Transport,\n   324→\t\tcfg.Logger,\n   325→\t\tcommon.SpendFn{\n   326→\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   327→\t\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"batchsynthesis\") {\n   328→\t\t\t\t\testimate = 100000 // TTS api costs $1 for 1 hour\n   329→\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n   330→\t\t\t\t\treturn\n   331→\t\t\t\t}\n   332→\t\t\t\treturn 0, 1, nil\n   333→\t\t\t},\n   334→\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   335→\t\t\t\tif preestimate > 0 && resp.StatusCode >= 300 {\n   336→\t\t\t\t\tcfg.QuotaClient.Spend(context.Background(), user, preestimate*-1)\n   337→\t\t\t\t\treturn preestimate * -1\n   338→\t\t\t\t}\n   339→\t\t\t\treturn 0\n   340→\t\t\t},\n   341→\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n   342→\t\t},\n   343→\t\tcfg.DailyResetController,\n   344→\t)\n   345→\n   346→\treturn azureCognitive, sttxy, customVoice\n   347→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"7a8903d1-870e-45bc-ad93-d5139814ff6e","timestamp":"2025-08-23T09:17:13.290Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/config.go","content":"package azure\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dailyreset\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dispatcher\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n\t\"github.com/pkoukk/tiktoken-go\"\n\t\"golang.org/x/exp/slog\"\n)\n\n// Config holds the configuration for Azure OpenAI services\ntype Config struct {\n\tTransport              *http.Transport\n\tLogger                 *slog.Logger\n\tCrowdAPI               crowdadapter.Adapter\n\tQuotaClient            quota.QuotaClient\n\tSMTPServer             string\n\tCL100K                 *tiktoken.Tiktoken\n\tP50K                   *tiktoken.Tiktoken\n\tDailyResetController   *dailyreset.DailyResetController\n\tAssistantsAPIResource  string\n\tAzureCognitiveHost     string\n\tAzureCognitiveKey      string\n\tSpeechAPIKey           string\n}\n\n// BuildAOAIEndpointConfig creates an endpoint configuration for Azure OpenAI\nfunc BuildAOAIEndpointConfig(weight int, name, model, key string) dispatcher.EndpointConfig {\n\tbaseURL := fmt.Sprintf(\"https://%s.openai.azure.com\", name)\n\n\t// If the model contains \"dalle\", no additional deadline or ptu configuration is needed\n\tif strings.Contains(strings.ToLower(model), \"dalle\") {\n\t\treturn dispatcher.EndpointConfig{\n\t\t\tWeight: weight,\n\t\t\tURL:    baseURL,\n\t\t\tHdrs:   map[string]string{\"api-key\": key},\n\t\t\tLabels: []string{\"aoai\", model, name},\n\t\t}\n\t}\n\n\t// Set deadline\n\tdeadline := time.Second * 60\n\tif strings.HasSuffix(model, \"32k\") || strings.HasSuffix(model, \"16k\") || strings.Contains(model, \"gpt-4\") {\n\t\tdeadline = time.Second * 150\n\t}\n\n\tptu := IsPTUEnabled(model, name)\n\n\t// Create a common configuration\n\tcfg := dispatcher.EndpointConfig{\n\t\tPTU:    ptu,\n\t\tWeight: weight,\n\t\tURL:    baseURL,\n\t\tHdrs:   map[string]string{\"api-key\": key},\n\t\tLabels: []string{\"aoai\", model, name},\n\t}\n\n\t// If ptu is true, set judgeFn to always return true\n\tif ptu {\n\t\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n\t\t\treturn true\n\t\t}\n\t\tcfg.TestReqFn = func() *http.Request {\n\t\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n\t\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/chat/completions?api-version=2024-02-01\", baseURL, model), payload)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\treq.Header.Set(\"api-key\", key)\n\t\t\treq.Header.Set(\"content-type\", \"application/json\")\n\t\t\treturn req\n\t\t}\n\t\treturn cfg\n\t}\n\n\t// Define default judgeFn and testReqFn for normal cases\n\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n\t\treturn resp.StatusCode != 429 && resp.StatusCode < 500 && ttfb < deadline\n\t}\n\tcfg.TestReqFn = func() *http.Request {\n\t\tendpoint := \"chat/completions\"\n\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n\t\tif model == \"aide-davinci-003\" || model == \"aide-code-davinci-002\" {\n\t\t\tendpoint = \"completions\"\n\t\t\tpayload = strings.NewReader(`{\"prompt\": \"Hi\"}`)\n\t\t} else if strings.Contains(model, \"embedding\") {\n\t\t\tendpoint = \"embeddings\"\n\t\t\tpayload = strings.NewReader(`{\"input\": [\"Hi\"]}`)\n\t\t}\n\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/%s?api-version=2024-02-01\", baseURL, model, endpoint), payload)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\treq.Header.Set(\"api-key\", key)\n\t\treq.Header.Set(\"content-type\", \"application/json\")\n\t\treturn req\n\t}\n\n\treturn cfg\n}\n\n// BuildAOAIDispatchers creates all Azure OpenAI dispatchers based on model configurations\nfunc BuildAOAIDispatchers(cfg *Config) map[string]*dispatcher.Dispatcher {\n\tdispatchers := make(map[string]*dispatcher.Dispatcher)\n\n\tfor modelName, modelDeploy := range ModelDeployments {\n\t\tvar endpoints []dispatcher.EndpointConfig\n\n\t\t// Build endpoint configurations for each region\n\t\tfor _, region := range modelDeploy.Regions {\n\t\t\tkey := os.Getenv(\"AZURE_OPAI_KEY_\" + region.Name)\n\t\t\tif key == \"\" {\n\t\t\t\tcontinue // Skip regions without configured keys\n\t\t\t}\n\n\t\t\tendpointCfg := BuildAOAIEndpointConfig(region.Weight, region.Name, modelDeploy.Name, key)\n\t\t\t\n\t\t\t// Set NoReqLog for whisper models\n\t\t\tif modelDeploy.IsWhisper {\n\t\t\t\tendpointCfg.NoReqLog = true\n\t\t\t}\n\t\t\t\n\t\t\tendpoints = append(endpoints, endpointCfg)\n\t\t}\n\n\t\tif len(endpoints) == 0 {\n\t\t\tcontinue // Skip models with no configured endpoints\n\t\t}\n\n\t\t// Create appropriate SpendFn based on model type\n\t\tvar spendFn common.SpendFn\n\t\tif modelDeploy.IsWhisper {\n\t\t\tspendFn = WhisperSpendFn(cfg.QuotaClient)\n\t\t} else if modelDeploy.IsTTS {\n\t\t\tttsRate := 15000000 // Default TTS rate\n\t\t\tif modelName == \"aide-tts-hd\" {\n\t\t\t\tttsRate = 30000000\n\t\t\t}\n\t\t\tspendFn = TTSSpendFn(ttsRate, cfg.QuotaClient)\n\t\t} else if modelDeploy.IsRealtime {\n\t\t\tspendFn = RealtimeSpendFn()\n\t\t} else if modelDeploy.IsDalle {\n\t\t\tif modelName == \"dalleget\" {\n\t\t\t\t// Special no-op spend function for dalleget\n\t\t\t\tspendFn = common.SpendFn{\n\t\t\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\t\t\t\treturn 0, 1, nil\n\t\t\t\t\t},\n\t\t\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t},\n\t\t\t\t\tAlert: func(user string, logger *slog.Logger) {},\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspendFn = DalleSpendFn(modelDeploy.DalleRate, cfg.QuotaClient, cfg.SMTPServer)\n\t\t\t}\n\t\t} else {\n\t\t\t// Regular model\n\t\t\tencoder := cfg.CL100K\n\t\t\tif modelDeploy.UseP50k {\n\t\t\t\tencoder = cfg.P50K\n\t\t\t}\n\t\t\tspendFn = AoaiSpendFn(\n\t\t\t\tmodelDeploy.Name,\n\t\t\t\tmodelDeploy.CapGPT4,\n\t\t\t\tcfg.CrowdAPI,\n\t\t\t\tcfg.QuotaClient,\n\t\t\t\tcfg.SMTPServer,\n\t\t\t\tencoder,\n\t\t\t\tmodelDeploy.InputRate,\n\t\t\t\tmodelDeploy.OutputRate,\n\t\t\t)\n\t\t}\n\n\t\tdispatchers[modelName] = dispatcher.NewDispatcher(\n\t\t\tcfg.Transport,\n\t\t\tcfg.Logger,\n\t\t\ttrue,\n\t\t\tspendFn,\n\t\t\tendpoints,\n\t\t\tcfg.DailyResetController,\n\t\t)\n\t}\n\n\treturn dispatchers\n}\n\n// BuildAOAIFallback creates the fallback endpoint for Azure OpenAI\nfunc BuildAOAIFallback(cfg *Config) *dispatcher.Endpoint {\n\tkey := os.Getenv(\"AZURE_OPAI_KEY_aideopenaieastus\")\n\tif key == \"\" {\n\t\treturn nil\n\t}\n\n\tendpointCfg := BuildAOAIEndpointConfig(0, \"aideopenaieastus\", \"other\", key)\n\tspendFn := AoaiSpendFn(\"\", true, cfg.CrowdAPI, cfg.QuotaClient, cfg.SMTPServer, cfg.CL100K, 200, 150)\n\t\n\treturn dispatcher.NewEndpoint(\n\t\tcontext.Background(),\n\t\ttrue,\n\t\tendpointCfg,\n\t\tcfg.Transport,\n\t\tcfg.Logger,\n\t\tspendFn,\n\t\tcfg.DailyResetController,\n\t)\n}\n\n// BuildAssistantsAPI creates the Assistants API endpoint\nfunc BuildAssistantsAPI(cfg *Config) *dispatcher.Endpoint {\n\tresource := cfg.AssistantsAPIResource\n\tif resource == \"\" {\n\t\tresource = \"aideopenaiaustraliaeast\"\n\t}\n\n\tkey := os.Getenv(\"AZURE_OPAI_KEY_\" + strings.ReplaceAll(resource, \"-\", \"_\"))\n\tif key == \"\" {\n\t\treturn nil\n\t}\n\n\treturn dispatcher.NewEndpoint(\n\t\tcontext.Background(),\n\t\tfalse,\n\t\tdispatcher.EndpointConfig{\n\t\t\tURL:    fmt.Sprintf(\"https://%s.openai.azure.com\", resource),\n\t\t\tHdrs:   map[string]string{\"api-key\": key},\n\t\t\tLabels: []string{\"aoai\", \"assistants\", resource},\n\t\t},\n\t\tcfg.Transport,\n\t\tcfg.Logger,\n\t\tAssistantsSpendFn(cfg.QuotaClient, cfg.SMTPServer),\n\t\tcfg.DailyResetController,\n\t)\n}\n\n// BuildCognitiveEndpoints creates Azure Cognitive Services endpoints\nfunc BuildCognitiveEndpoints(cfg *Config) (azureCognitive, sttxy, customVoice *dispatcher.Endpoint) {\n\t// Azure Cognitive Services endpoint\n\tazureCognitive = dispatcher.NewEndpoint(\n\t\tcontext.Background(),\n\t\ttrue,\n\t\tdispatcher.EndpointConfig{\n\t\t\tURL:      cfg.AzureCognitiveHost,\n\t\t\tHdrs:     map[string]string{\"Ocp-Apim-Subscription-Key\": cfg.AzureCognitiveKey},\n\t\t\tNoReqLog: true,\n\t\t\tLabels:   []string{\"cogn\", \"ocr\", \"azure-cognitive-multi\"},\n\t\t},\n\t\tcfg.Transport,\n\t\tcfg.Logger,\n\t\tcommon.SpendFn{\n\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"read/analyze\") {\n\t\t\t\t\testimate = 100000 // OCR api costs $1 for 1000 calls\n\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif strings.Contains(req.URL.Path, \":analyze\") {\n\t\t\t\t\testimate = 1000000 // document api costs $10 per 1,000 pages\n\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn 0, 1, nil\n\t\t\t},\n\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\t\tcfg.QuotaClient.Spend(context.Background(), user, preestimate*-1)\n\t\t\t\t\treturn preestimate * -1\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t},\n\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n\t\t},\n\t\tcfg.DailyResetController,\n\t)\n\n\t// Speech-to-text endpoint\n\tspeechKey := cfg.SpeechAPIKey\n\tif speechKey == \"\" {\n\t\tspeechKey = cfg.AzureCognitiveKey\n\t}\n\n\tsttxy = dispatcher.NewEndpoint(\n\t\tcontext.Background(),\n\t\tfalse,\n\t\tdispatcher.EndpointConfig{\n\t\t\tURL:      \"https://southeastasia.stt.speech.microsoft.com\",\n\t\t\tHdrs:     map[string]string{\"Ocp-Apim-Subscription-Key\": speechKey},\n\t\t\tNoReqLog: true,\n\t\t\tLabels:   []string{\"cogn\", \"stt\", \"southeastasia\"},\n\t\t},\n\t\tcfg.Transport,\n\t\tcfg.Logger,\n\t\tcommon.SpendFn{\n\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\t\treturn 0, 1, nil\n\t\t\t},\n\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\t\treturn 0\n\t\t\t},\n\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n\t\t},\n\t\tcfg.DailyResetController,\n\t)\n\n\t// Custom voice endpoint\n\tcustomVoice = dispatcher.NewEndpoint(\n\t\tcontext.Background(),\n\t\tfalse,\n\t\tdispatcher.EndpointConfig{\n\t\t\tURL:    \"https://southeastasia.customvoice.api.speech.microsoft.com\",\n\t\t\tHdrs:   map[string]string{\"Ocp-Apim-Subscription-Key\": cfg.AzureCognitiveKey},\n\t\t\tLabels: []string{\"cogn\", \"tts\", \"southeastasia\"},\n\t\t},\n\t\tcfg.Transport,\n\t\tcfg.Logger,\n\t\tcommon.SpendFn{\n\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"batchsynthesis\") {\n\t\t\t\t\testimate = 100000 // TTS api costs $1 for 1 hour\n\t\t\t\t\tremain, err = cfg.QuotaClient.Spend(context.Background(), user, estimate)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn 0, 1, nil\n\t\t\t},\n\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\t\tif preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\t\tcfg.QuotaClient.Spend(context.Background(), user, preestimate*-1)\n\t\t\t\t\treturn preestimate * -1\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t},\n\t\t\tAlert: common.AlertFn(cfg.SMTPServer, cfg.QuotaClient),\n\t\t},\n\t\tcfg.DailyResetController,\n\t)\n\n\treturn azureCognitive, sttxy, customVoice\n}","numLines":347,"startLine":1,"totalLines":347}}}
{"parentUuid":"7a8903d1-870e-45bc-ad93-d5139814ff6e","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_014CxXLEftZnwAhYBD8Xyac7","type":"tool_result","content":"     1→package azure\n     2→\n     3→// ModelConfig contains pricing and configuration for Azure OpenAI models\n     4→type ModelConfig struct {\n     5→\tName           string\n     6→\tInputRate      int  // Price per million input tokens in internal units\n     7→\tOutputRate     int  // Price per million output tokens in internal units\n     8→\tCapGPT4        bool // Whether to apply GPT-4 cap\n     9→\tIsEmbedding    bool // Whether this is an embedding model\n    10→\tIsWhisper      bool // Whether this is a whisper model\n    11→\tIsTTS          bool // Whether this is a TTS model\n    12→\tIsRealtime     bool // Whether this is a realtime model\n    13→\tIsDalle        bool // Whether this is a DALL-E model\n    14→\tDalleRate      int  // Price per DALL-E image in internal units\n    15→\tUseP50k        bool // Whether to use p50k tokenizer (vs cl100k)\n    16→}\n    17→\n    18→// RegionConfig contains configuration for an Azure region endpoint\n    19→type RegionConfig struct {\n    20→\tName   string\n    21→\tWeight int\n    22→}\n    23→\n    24→// ModelDeployment contains deployment configuration for a model\n    25→type ModelDeployment struct {\n    26→\tModelConfig\n    27→\tRegions []RegionConfig\n    28→}\n    29→\n    30→// ModelDeployments contains all Azure OpenAI model deployments\n    31→var ModelDeployments = map[string]ModelDeployment{\n    32→\t// GPT-4 Turbo models\n    33→\t\"aide-gpt-4-turbo\": {\n    34→\t\tModelConfig: ModelConfig{\n    35→\t\t\tName:       \"aide-gpt-4-turbo\",\n    36→\t\t\tInputRate:  1000,\n    37→\t\t\tOutputRate: 3000, // 1500*2\n    38→\t\t\tCapGPT4:    true,\n    39→\t\t},\n    40→\t\tRegions: []RegionConfig{\n    41→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 480},\n    42→\t\t\t{Name: \"aideopenaieastus2\", Weight: 480},\n    43→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 480},\n    44→\t\t\t{Name: \"aideopenainorwayeast\", Weight: 900},\n    45→\t\t\t{Name: \"aideopenaisouthindia\", Weight: 900},\n    46→\t\t\t{Name: \"aideopenaiwestus\", Weight: 480},\n    47→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 900},\n    48→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 480},\n    49→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 480},\n    50→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 480},\n    51→\t\t\t{Name: \"aideopenaieastus\", Weight: 480},\n    52→\t\t},\n    53→\t},\n    54→\t\"aide-gpt-4-turbo-1106\": {\n    55→\t\tModelConfig: ModelConfig{\n    56→\t\t\tName:       \"aide-gpt-4-turbo-1106\",\n    57→\t\t\tInputRate:  1000,\n    58→\t\t\tOutputRate: 3000,\n    59→\t\t\tCapGPT4:    true,\n    60→\t\t},\n    61→\t\tRegions: []RegionConfig{\n    62→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 5000},\n    63→\t\t},\n    64→\t},\n    65→\t\"aide-gpt-4-turbo-vision\": {\n    66→\t\tModelConfig: ModelConfig{\n    67→\t\t\tName:       \"aide-gpt-4-turbo-vision\",\n    68→\t\t\tInputRate:  1000,\n    69→\t\t\tOutputRate: 3000,\n    70→\t\t\tCapGPT4:    true,\n    71→\t\t},\n    72→\t\tRegions: []RegionConfig{\n    73→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 10},\n    74→\t\t\t{Name: \"aideopenaiwestus\", Weight: 10},\n    75→\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 10},\n    76→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 10},\n    77→\t\t},\n    78→\t},\n    79→\n    80→\t// GPT-4o models\n    81→\t\"aide-gpt-4o-0806\": {\n    82→\t\tModelConfig: ModelConfig{\n    83→\t\t\tName:       \"aide-gpt-4o-0806\",\n    84→\t\t\tInputRate:  500,\n    85→\t\t\tOutputRate: 1500,\n    86→\t\t\tCapGPT4:    true,\n    87→\t\t},\n    88→\t\tRegions: []RegionConfig{\n    89→\t\t\t{Name: \"aideopenaieastus\", Weight: 5000},\n    90→\t\t},\n    91→\t},\n    92→\t\"aide-gpt-4o\": {\n    93→\t\tModelConfig: ModelConfig{\n    94→\t\t\tName:       \"aide-gpt-4o\",\n    95→\t\t\tInputRate:  500,\n    96→\t\t\tOutputRate: 1500,\n    97→\t\t\tCapGPT4:    true,\n    98→\t\t},\n    99→\t\tRegions: []RegionConfig{\n   100→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 60000},\n   101→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   102→\t\t\t{Name: \"aideopenaiwestus\", Weight: 60000},\n   103→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 60000},\n   104→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 60000},\n   105→\t\t\t{Name: \"aideopenaieastus\", Weight: 60000},\n   106→\t\t\t{Name: \"aideopenaiwestus3\", Weight: 60000},\n   107→\t\t},\n   108→\t},\n   109→\t\"aide-gpt-4o-mini\": {\n   110→\t\tModelConfig: ModelConfig{\n   111→\t\t\tName:       \"aide-gpt-4o-mini\",\n   112→\t\t\tInputRate:  15,\n   113→\t\t\tOutputRate: 60,\n   114→\t\t\tCapGPT4:    true,\n   115→\t\t},\n   116→\t\tRegions: []RegionConfig{\n   117→\t\t\t{Name: \"aideopenaieastus\", Weight: 60000},\n   118→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   119→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 60000},\n   120→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   121→\t\t},\n   122→\t},\n   123→\t\"aide-gpt-4o-realtime-preview\": {\n   124→\t\tModelConfig: ModelConfig{\n   125→\t\t\tName:       \"aide-gpt-4o-realtime-preview\",\n   126→\t\t\tIsRealtime: true,\n   127→\t\t},\n   128→\t\tRegions: []RegionConfig{\n   129→\t\t\t{Name: \"aideopenaieastus2\", Weight: 500},\n   130→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 500},\n   131→\t\t},\n   132→\t},\n   133→\n   134→\t// GPT-4.1 models\n   135→\t\"aide-gpt-4.1\": {\n   136→\t\tModelConfig: ModelConfig{\n   137→\t\t\tName:       \"aide-gpt-4.1\",\n   138→\t\t\tInputRate:  200,\n   139→\t\t\tOutputRate: 800,\n   140→\t\t\tCapGPT4:    true,\n   141→\t\t},\n   142→\t\tRegions: []RegionConfig{\n   143→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   144→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   145→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 600000}, // Special PTU weight\n   146→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 60000},\n   147→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 60000},\n   148→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 60000},\n   149→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 60000},\n   150→\t\t},\n   151→\t},\n   152→\t\"aide-gpt-4.1-mini\": {\n   153→\t\tModelConfig: ModelConfig{\n   154→\t\t\tName:       \"aide-gpt-4.1-mini\",\n   155→\t\t\tInputRate:  40,\n   156→\t\t\tOutputRate: 160,\n   157→\t\t\tCapGPT4:    true,\n   158→\t\t},\n   159→\t\tRegions: []RegionConfig{\n   160→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   161→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   162→\t\t},\n   163→\t},\n   164→\t\"aide-gpt-4.1-nano\": {\n   165→\t\tModelConfig: ModelConfig{\n   166→\t\t\tName:       \"aide-gpt-4.1-nano\",\n   167→\t\t\tInputRate:  10,\n   168→\t\t\tOutputRate: 40,\n   169→\t\t\tCapGPT4:    true,\n   170→\t\t},\n   171→\t\tRegions: []RegionConfig{\n   172→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   173→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   174→\t\t},\n   175→\t},\n   176→\n   177→\t// GPT-5 models\n   178→\t\"aide-gpt-5\": {\n   179→\t\tModelConfig: ModelConfig{\n   180→\t\t\tName:       \"aide-gpt-5\",\n   181→\t\t\tInputRate:  125,\n   182→\t\t\tOutputRate: 1000,\n   183→\t\t\tCapGPT4:    true,\n   184→\t\t},\n   185→\t\tRegions: []RegionConfig{\n   186→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   187→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   188→\t\t},\n   189→\t},\n   190→\t\"aide-gpt-5-mini\": {\n   191→\t\tModelConfig: ModelConfig{\n   192→\t\t\tName:       \"aide-gpt-5-mini\",\n   193→\t\t\tInputRate:  250,\n   194→\t\t\tOutputRate: 200,\n   195→\t\t\tCapGPT4:    true,\n   196→\t\t},\n   197→\t\tRegions: []RegionConfig{\n   198→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   199→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   200→\t\t},\n   201→\t},\n   202→\t\"aide-gpt-5-nano\": {\n   203→\t\tModelConfig: ModelConfig{\n   204→\t\t\tName:       \"aide-gpt-5-nano\",\n   205→\t\t\tInputRate:  5,\n   206→\t\t\tOutputRate: 40,\n   207→\t\t\tCapGPT4:    true,\n   208→\t\t},\n   209→\t\tRegions: []RegionConfig{\n   210→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   211→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   212→\t\t},\n   213→\t},\n   214→\t\"aide-gpt-5-chat\": {\n   215→\t\tModelConfig: ModelConfig{\n   216→\t\t\tName:       \"aide-gpt-5-chat\",\n   217→\t\t\tInputRate:  125,\n   218→\t\t\tOutputRate: 1000,\n   219→\t\t\tCapGPT4:    true,\n   220→\t\t},\n   221→\t\tRegions: []RegionConfig{\n   222→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   223→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   224→\t\t},\n   225→\t},\n   226→\n   227→\t// O-series models\n   228→\t\"aide-o1-mini\": {\n   229→\t\tModelConfig: ModelConfig{\n   230→\t\t\tName:       \"aide-o1-mini\",\n   231→\t\t\tInputRate:  300,\n   232→\t\t\tOutputRate: 1200,\n   233→\t\t\tCapGPT4:    true,\n   234→\t\t},\n   235→\t\tRegions: []RegionConfig{\n   236→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   237→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   238→\t\t},\n   239→\t},\n   240→\t\"aide-o1\": {\n   241→\t\tModelConfig: ModelConfig{\n   242→\t\t\tName:       \"aide-o1\",\n   243→\t\t\tInputRate:  1500,\n   244→\t\t\tOutputRate: 6000,\n   245→\t\t\tCapGPT4:    true,\n   246→\t\t},\n   247→\t\tRegions: []RegionConfig{\n   248→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   249→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   250→\t\t},\n   251→\t},\n   252→\t\"aide-o1-preview\": {\n   253→\t\tModelConfig: ModelConfig{\n   254→\t\t\tName:       \"aide-o1-preview\",\n   255→\t\t\tInputRate:  1500,\n   256→\t\t\tOutputRate: 6000,\n   257→\t\t\tCapGPT4:    true,\n   258→\t\t},\n   259→\t\tRegions: []RegionConfig{\n   260→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   261→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   262→\t\t},\n   263→\t},\n   264→\t\"aide-o3-mini\": {\n   265→\t\tModelConfig: ModelConfig{\n   266→\t\t\tName:       \"aide-o3-mini\",\n   267→\t\t\tInputRate:  110,\n   268→\t\t\tOutputRate: 440,\n   269→\t\t\tCapGPT4:    true,\n   270→\t\t},\n   271→\t\tRegions: []RegionConfig{\n   272→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   273→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   274→\t\t},\n   275→\t},\n   276→\t\"aide-o3\": {\n   277→\t\tModelConfig: ModelConfig{\n   278→\t\t\tName:       \"aide-o3\",\n   279→\t\t\tInputRate:  200,\n   280→\t\t\tOutputRate: 800,\n   281→\t\t\tCapGPT4:    true,\n   282→\t\t},\n   283→\t\tRegions: []RegionConfig{\n   284→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   285→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   286→\t\t},\n   287→\t},\n   288→\t\"aide-o3-pro\": {\n   289→\t\tModelConfig: ModelConfig{\n   290→\t\t\tName:       \"aide-o3-pro\",\n   291→\t\t\tInputRate:  2000,\n   292→\t\t\tOutputRate: 8000,\n   293→\t\t\tCapGPT4:    true,\n   294→\t\t},\n   295→\t\tRegions: []RegionConfig{\n   296→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   297→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   298→\t\t},\n   299→\t},\n   300→\t\"aide-o4-mini\": {\n   301→\t\tModelConfig: ModelConfig{\n   302→\t\t\tName:       \"aide-o4-mini\",\n   303→\t\t\tInputRate:  110,\n   304→\t\t\tOutputRate: 440,\n   305→\t\t\tCapGPT4:    true,\n   306→\t\t},\n   307→\t\tRegions: []RegionConfig{\n   308→\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n   309→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n   310→\t\t},\n   311→\t},\n   312→\n   313→\t// GPT-3.5 Turbo models\n   314→\t\"aide-gpt-35-turbo-16k-4k\": {\n   315→\t\tModelConfig: ModelConfig{\n   316→\t\t\tName:       \"aide-gpt-35-turbo-16k-4k\",\n   317→\t\t\tInputRate:  100,\n   318→\t\t\tOutputRate: 200,\n   319→\t\t\tCapGPT4:    true,\n   320→\t\t},\n   321→\t\tRegions: []RegionConfig{\n   322→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 720},\n   323→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 3720},\n   324→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 720},\n   325→\t\t\t{Name: \"aideopenaisouthindia\", Weight: 720},\n   326→\t\t\t{Name: \"aideopenaiwestus\", Weight: 720},\n   327→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 720},\n   328→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 720},\n   329→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 1800},\n   330→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 720},\n   331→\t\t},\n   332→\t},\n   333→\t\"aide-gpt-35-turbo\": {\n   334→\t\tModelConfig: ModelConfig{\n   335→\t\t\tName:       \"aide-gpt-35-turbo\",\n   336→\t\t\tInputRate:  150,\n   337→\t\t\tOutputRate: 200,\n   338→\t\t\tCapGPT4:    false,\n   339→\t\t},\n   340→\t\tRegions: []RegionConfig{\n   341→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 1440},\n   342→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 720},\n   343→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 1440},\n   344→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 900},\n   345→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 1800},\n   346→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 900},\n   347→\t\t\t{Name: \"aideopenaieastus2\", Weight: 1800},\n   348→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 1800},\n   349→\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 3000},\n   350→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3000},\n   351→\t\t\t{Name: \"aideopenaieastus\", Weight: 1800},\n   352→\t\t},\n   353→\t},\n   354→\t\"aide-gpt-35-turbo-instruct\": {\n   355→\t\tModelConfig: ModelConfig{\n   356→\t\t\tName:       \"aide-gpt-35-turbo-instruct\",\n   357→\t\t\tInputRate:  150,\n   358→\t\t\tOutputRate: 200,\n   359→\t\t\tCapGPT4:    false,\n   360→\t\t},\n   361→\t\tRegions: []RegionConfig{\n   362→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 1440},\n   363→\t\t\t{Name: \"aideopenaieastus\", Weight: 1440},\n   364→\t\t},\n   365→\t},\n   366→\t\"aide-gpt-35-turbo-16k\": {\n   367→\t\tModelConfig: ModelConfig{\n   368→\t\t\tName:       \"aide-gpt-35-turbo-16k\",\n   369→\t\t\tInputRate:  300,\n   370→\t\t\tOutputRate: 400,\n   371→\t\t\tCapGPT4:    false,\n   372→\t\t},\n   373→\t\tRegions: []RegionConfig{\n   374→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 1440},\n   375→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 3000},\n   376→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 900},\n   377→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 1800},\n   378→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 900},\n   379→\t\t\t{Name: \"aideopenaieastus2\", Weight: 3000},\n   380→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 1800},\n   381→\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 1800},\n   382→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 1800},\n   383→\t\t\t{Name: \"aideopenaieastus\", Weight: 1440},\n   384→\t\t},\n   385→\t},\n   386→\n   387→\t// Embedding models\n   388→\t\"aide-text-embedding-3-large\": {\n   389→\t\tModelConfig: ModelConfig{\n   390→\t\t\tName:        \"aide-text-embedding-3-large\",\n   391→\t\t\tInputRate:   13,\n   392→\t\t\tOutputRate:  13,\n   393→\t\t\tIsEmbedding: true,\n   394→\t\t},\n   395→\t\tRegions: []RegionConfig{\n   396→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n   397→\t\t\t{Name: \"aideopenaieastus\", Weight: 2100},\n   398→\t\t\t{Name: \"aideopenaieastus2\", Weight: 2100},\n   399→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 2100},\n   400→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 2100},\n   401→\t\t\t{Name: \"aideopenaisouthindia\", Weight: 2100},\n   402→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 2100},\n   403→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 2100},\n   404→\t\t\t{Name: \"aideopenaiwestus3\", Weight: 2100},\n   405→\t\t},\n   406→\t},\n   407→\t\"aide-text-embedding-3-small\": {\n   408→\t\tModelConfig: ModelConfig{\n   409→\t\t\tName:        \"aide-text-embedding-3-small\",\n   410→\t\t\tInputRate:   2,\n   411→\t\t\tOutputRate:  2,\n   412→\t\t\tIsEmbedding: true,\n   413→\t\t},\n   414→\t\tRegions: []RegionConfig{\n   415→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n   416→\t\t\t{Name: \"aideopenaieastus\", Weight: 2100},\n   417→\t\t\t{Name: \"aideopenaieastus2\", Weight: 2100},\n   418→\t\t},\n   419→\t},\n   420→\t\"aide-text-embedding-ada-002-v2\": {\n   421→\t\tModelConfig: ModelConfig{\n   422→\t\t\tName:        \"aide-text-embedding-ada-002-v2\",\n   423→\t\t\tInputRate:   10,\n   424→\t\t\tOutputRate:  10,\n   425→\t\t\tIsEmbedding: true,\n   426→\t\t},\n   427→\t\tRegions: []RegionConfig{\n   428→\t\t\t{Name: \"aideopenaiwesteurope\", Weight: 4200},\n   429→\t\t\t{Name: \"aideopenaieastus2\", Weight: 4200},\n   430→\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 4200},\n   431→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 2100},\n   432→\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n   433→\t\t\t{Name: \"aideopenaijapaneast\", Weight: 2100},\n   434→\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 2100},\n   435→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 2100},\n   436→\t\t\t{Name: \"aideopenaiuksouth\", Weight: 2100},\n   437→\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 2100},\n   438→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 2100},\n   439→\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n   440→\t\t\t{Name: \"aideopenaiwestus\", Weight: 2100},\n   441→\t\t\t{Name: \"aideopenainorwayeast\", Weight: 2100},\n   442→\t\t\t{Name: \"aideopenaisouthindia\", Weight: 2100},\n   443→\t\t\t{Name: \"aideopenaisouthafricanorth\", Weight: 2100},\n   444→\t\t\t{Name: \"aideopenaiwestus3\", Weight: 2100},\n   445→\t\t},\n   446→\t},\n   447→\t\"aide-text-embedding-ada-002\": {\n   448→\t\tModelConfig: ModelConfig{\n   449→\t\t\tName:        \"aide-text-embedding-ada-002\",\n   450→\t\t\tInputRate:   10,\n   451→\t\t\tOutputRate:  10,\n   452→\t\t\tIsEmbedding: true,\n   453→\t\t},\n   454→\t\tRegions: []RegionConfig{\n   455→\t\t\t{Name: \"aideopenaieastus\", Weight: 20},\n   456→\t\t},\n   457→\t},\n   458→\n   459→\t// Legacy models\n   460→\t\"aide-davinci-003\": {\n   461→\t\tModelConfig: ModelConfig{\n   462→\t\t\tName:       \"aide-davinci-003\",\n   463→\t\t\tInputRate:  2000,\n   464→\t\t\tOutputRate: 2000,\n   465→\t\t\tUseP50k:    true,\n   466→\t\t},\n   467→\t\tRegions: []RegionConfig{\n   468→\t\t\t{Name: \"aideopenaieastus\", Weight: 600},\n   469→\t\t},\n   470→\t},\n   471→\t\"aide-code-davinci-002\": {\n   472→\t\tModelConfig: ModelConfig{\n   473→\t\t\tName:       \"aide-code-davinci-002\",\n   474→\t\t\tInputRate:  1000,\n   475→\t\t\tOutputRate: 1000,\n   476→\t\t\tUseP50k:    true,\n   477→\t\t},\n   478→\t\tRegions: []RegionConfig{\n   479→\t\t\t{Name: \"aideopenaieastus\", Weight: 600},\n   480→\t\t},\n   481→\t},\n   482→\n   483→\t// Whisper model\n   484→\t\"aide-whisper\": {\n   485→\t\tModelConfig: ModelConfig{\n   486→\t\t\tName:      \"aide-whisper\",\n   487→\t\t\tIsWhisper: true,\n   488→\t\t},\n   489→\t\tRegions: []RegionConfig{\n   490→\t\t\t{Name: \"aideopenaieastus2\", Weight: 3},\n   491→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n   492→\t\t\t{Name: \"aideopenainorwayeast\", Weight: 3},\n   493→\t\t\t{Name: \"aideopenaisouthindia\", Weight: 3},\n   494→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n   495→\t\t\t{Name: \"aideopenaiwesteurope\", Weight: 3},\n   496→\t\t},\n   497→\t},\n   498→\n   499→\t// TTS models\n   500→\t\"aide-tts\": {\n   501→\t\tModelConfig: ModelConfig{\n   502→\t\t\tName:  \"aide-tts\",\n   503→\t\t\tIsTTS: true,\n   504→\t\t},\n   505→\t\tRegions: []RegionConfig{\n   506→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n   507→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n   508→\t\t},\n   509→\t},\n   510→\t\"aide-tts-hd\": {\n   511→\t\tModelConfig: ModelConfig{\n   512→\t\t\tName:  \"aide-tts-hd\",\n   513→\t\t\tIsTTS: true,\n   514→\t\t},\n   515→\t\tRegions: []RegionConfig{\n   516→\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n   517→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n   518→\t\t},\n   519→\t},\n   520→\n   521→\t// DALL-E models\n   522→\t\"Dalle3\": {\n   523→\t\tModelConfig: ModelConfig{\n   524→\t\t\tName:      \"dalle-3\", // Note: actual model name is different\n   525→\t\t\tIsDalle:   true,\n   526→\t\t\tDalleRate: 4000000,\n   527→\t\t},\n   528→\t\tRegions: []RegionConfig{\n   529→\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 240},\n   530→\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 240},\n   531→\t\t\t{Name: \"aideopenaieastus\", Weight: 240},\n   532→\t\t},\n   533→\t},\n   534→\t\"dalle\": {\n   535→\t\tModelConfig: ModelConfig{\n   536→\t\t\tName:      \"dalle\",\n   537→\t\t\tIsDalle:   true,\n   538→\t\t\tDalleRate: 2000000,\n   539→\t\t},\n   540→\t\tRegions: []RegionConfig{\n   541→\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n   542→\t\t},\n   543→\t},\n   544→\t\"dalleget\": {\n   545→\t\tModelConfig: ModelConfig{\n   546→\t\t\tName:    \"dalleget\",\n   547→\t\t\tIsDalle: true,\n   548→\t\t},\n   549→\t\tRegions: []RegionConfig{\n   550→\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n   551→\t\t},\n   552→\t},\n   553→}\n   554→\n   555→// GetModelConfig returns the configuration for a specific model\n   556→func GetModelConfig(model string) (ModelDeployment, bool) {\n   557→\tconfig, ok := ModelDeployments[model]\n   558→\treturn config, ok\n   559→}\n   560→\n   561→// IsPTUEnabled checks if PTU is enabled for a specific model and region\n   562→func IsPTUEnabled(model, region string) bool {\n   563→\t// Currently only aide-gpt-4.1 on aideopenaijapaneast has PTU\n   564→\treturn model == \"aide-gpt-4.1\" && region == \"aideopenaijapaneast\"\n   565→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"7a4461ac-897e-4018-9252-4ade79cc732a","timestamp":"2025-08-23T09:17:13.291Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/models.go","content":"package azure\n\n// ModelConfig contains pricing and configuration for Azure OpenAI models\ntype ModelConfig struct {\n\tName           string\n\tInputRate      int  // Price per million input tokens in internal units\n\tOutputRate     int  // Price per million output tokens in internal units\n\tCapGPT4        bool // Whether to apply GPT-4 cap\n\tIsEmbedding    bool // Whether this is an embedding model\n\tIsWhisper      bool // Whether this is a whisper model\n\tIsTTS          bool // Whether this is a TTS model\n\tIsRealtime     bool // Whether this is a realtime model\n\tIsDalle        bool // Whether this is a DALL-E model\n\tDalleRate      int  // Price per DALL-E image in internal units\n\tUseP50k        bool // Whether to use p50k tokenizer (vs cl100k)\n}\n\n// RegionConfig contains configuration for an Azure region endpoint\ntype RegionConfig struct {\n\tName   string\n\tWeight int\n}\n\n// ModelDeployment contains deployment configuration for a model\ntype ModelDeployment struct {\n\tModelConfig\n\tRegions []RegionConfig\n}\n\n// ModelDeployments contains all Azure OpenAI model deployments\nvar ModelDeployments = map[string]ModelDeployment{\n\t// GPT-4 Turbo models\n\t\"aide-gpt-4-turbo\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4-turbo\",\n\t\t\tInputRate:  1000,\n\t\t\tOutputRate: 3000, // 1500*2\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 480},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 480},\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 480},\n\t\t\t{Name: \"aideopenainorwayeast\", Weight: 900},\n\t\t\t{Name: \"aideopenaisouthindia\", Weight: 900},\n\t\t\t{Name: \"aideopenaiwestus\", Weight: 480},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 900},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 480},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 480},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 480},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 480},\n\t\t},\n\t},\n\t\"aide-gpt-4-turbo-1106\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4-turbo-1106\",\n\t\t\tInputRate:  1000,\n\t\t\tOutputRate: 3000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 5000},\n\t\t},\n\t},\n\t\"aide-gpt-4-turbo-vision\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4-turbo-vision\",\n\t\t\tInputRate:  1000,\n\t\t\tOutputRate: 3000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 10},\n\t\t\t{Name: \"aideopenaiwestus\", Weight: 10},\n\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 10},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 10},\n\t\t},\n\t},\n\n\t// GPT-4o models\n\t\"aide-gpt-4o-0806\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4o-0806\",\n\t\t\tInputRate:  500,\n\t\t\tOutputRate: 1500,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 5000},\n\t\t},\n\t},\n\t\"aide-gpt-4o\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4o\",\n\t\t\tInputRate:  500,\n\t\t\tOutputRate: 1500,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiwestus\", Weight: 60000},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 60000},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiwestus3\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-4o-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4o-mini\",\n\t\t\tInputRate:  15,\n\t\t\tOutputRate: 60,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-4o-realtime-preview\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4o-realtime-preview\",\n\t\t\tIsRealtime: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 500},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 500},\n\t\t},\n\t},\n\n\t// GPT-4.1 models\n\t\"aide-gpt-4.1\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4.1\",\n\t\t\tInputRate:  200,\n\t\t\tOutputRate: 800,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 600000}, // Special PTU weight\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 60000},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 60000},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-4.1-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4.1-mini\",\n\t\t\tInputRate:  40,\n\t\t\tOutputRate: 160,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-4.1-nano\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-4.1-nano\",\n\t\t\tInputRate:  10,\n\t\t\tOutputRate: 40,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\n\t// GPT-5 models\n\t\"aide-gpt-5\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-5\",\n\t\t\tInputRate:  125,\n\t\t\tOutputRate: 1000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-5-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-5-mini\",\n\t\t\tInputRate:  250,\n\t\t\tOutputRate: 200,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-5-nano\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-5-nano\",\n\t\t\tInputRate:  5,\n\t\t\tOutputRate: 40,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-gpt-5-chat\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-5-chat\",\n\t\t\tInputRate:  125,\n\t\t\tOutputRate: 1000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t},\n\t},\n\n\t// O-series models\n\t\"aide-o1-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o1-mini\",\n\t\t\tInputRate:  300,\n\t\t\tOutputRate: 1200,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o1\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o1\",\n\t\t\tInputRate:  1500,\n\t\t\tOutputRate: 6000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o1-preview\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o1-preview\",\n\t\t\tInputRate:  1500,\n\t\t\tOutputRate: 6000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o3-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o3-mini\",\n\t\t\tInputRate:  110,\n\t\t\tOutputRate: 440,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o3\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o3\",\n\t\t\tInputRate:  200,\n\t\t\tOutputRate: 800,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o3-pro\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o3-pro\",\n\t\t\tInputRate:  2000,\n\t\t\tOutputRate: 8000,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\t\"aide-o4-mini\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-o4-mini\",\n\t\t\tInputRate:  110,\n\t\t\tOutputRate: 440,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 60000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 60000},\n\t\t},\n\t},\n\n\t// GPT-3.5 Turbo models\n\t\"aide-gpt-35-turbo-16k-4k\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-35-turbo-16k-4k\",\n\t\t\tInputRate:  100,\n\t\t\tOutputRate: 200,\n\t\t\tCapGPT4:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 720},\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 3720},\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 720},\n\t\t\t{Name: \"aideopenaisouthindia\", Weight: 720},\n\t\t\t{Name: \"aideopenaiwestus\", Weight: 720},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 720},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 720},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 1800},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 720},\n\t\t},\n\t},\n\t\"aide-gpt-35-turbo\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-35-turbo\",\n\t\t\tInputRate:  150,\n\t\t\tOutputRate: 200,\n\t\t\tCapGPT4:    false,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 1440},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 720},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 1440},\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 900},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 1800},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 900},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 1800},\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 1800},\n\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 3000},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3000},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1800},\n\t\t},\n\t},\n\t\"aide-gpt-35-turbo-instruct\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-35-turbo-instruct\",\n\t\t\tInputRate:  150,\n\t\t\tOutputRate: 200,\n\t\t\tCapGPT4:    false,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 1440},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1440},\n\t\t},\n\t},\n\t\"aide-gpt-35-turbo-16k\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-gpt-35-turbo-16k\",\n\t\t\tInputRate:  300,\n\t\t\tOutputRate: 400,\n\t\t\tCapGPT4:    false,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 1440},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 3000},\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 900},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 1800},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 900},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 3000},\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 1800},\n\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 1800},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 1800},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1440},\n\t\t},\n\t},\n\n\t// Embedding models\n\t\"aide-text-embedding-3-large\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:        \"aide-text-embedding-3-large\",\n\t\t\tInputRate:   13,\n\t\t\tOutputRate:  13,\n\t\t\tIsEmbedding: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 2100},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 2100},\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 2100},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaisouthindia\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiwestus3\", Weight: 2100},\n\t\t},\n\t},\n\t\"aide-text-embedding-3-small\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:        \"aide-text-embedding-3-small\",\n\t\t\tInputRate:   2,\n\t\t\tOutputRate:  2,\n\t\t\tIsEmbedding: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 2100},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 2100},\n\t\t},\n\t},\n\t\"aide-text-embedding-ada-002-v2\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:        \"aide-text-embedding-ada-002-v2\",\n\t\t\tInputRate:   10,\n\t\t\tOutputRate:  10,\n\t\t\tIsEmbedding: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiwesteurope\", Weight: 4200},\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 4200},\n\t\t\t{Name: \"aideopenaisouthcentralus\", Weight: 4200},\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaicanadaeast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaijapaneast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiswitzerlandnorth\", Weight: 2100},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiuksouth\", Weight: 2100},\n\t\t\t{Name: \"aideopenaifrancecentral\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 2100},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n\t\t\t{Name: \"aideopenaiwestus\", Weight: 2100},\n\t\t\t{Name: \"aideopenainorwayeast\", Weight: 2100},\n\t\t\t{Name: \"aideopenaisouthindia\", Weight: 2100},\n\t\t\t{Name: \"aideopenaisouthafricanorth\", Weight: 2100},\n\t\t\t{Name: \"aideopenaiwestus3\", Weight: 2100},\n\t\t},\n\t},\n\t\"aide-text-embedding-ada-002\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:        \"aide-text-embedding-ada-002\",\n\t\t\tInputRate:   10,\n\t\t\tOutputRate:  10,\n\t\t\tIsEmbedding: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 20},\n\t\t},\n\t},\n\n\t// Legacy models\n\t\"aide-davinci-003\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-davinci-003\",\n\t\t\tInputRate:  2000,\n\t\t\tOutputRate: 2000,\n\t\t\tUseP50k:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 600},\n\t\t},\n\t},\n\t\"aide-code-davinci-002\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:       \"aide-code-davinci-002\",\n\t\t\tInputRate:  1000,\n\t\t\tOutputRate: 1000,\n\t\t\tUseP50k:    true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 600},\n\t\t},\n\t},\n\n\t// Whisper model\n\t\"aide-whisper\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:      \"aide-whisper\",\n\t\t\tIsWhisper: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus2\", Weight: 3},\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n\t\t\t{Name: \"aideopenainorwayeast\", Weight: 3},\n\t\t\t{Name: \"aideopenaisouthindia\", Weight: 3},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n\t\t\t{Name: \"aideopenaiwesteurope\", Weight: 3},\n\t\t},\n\t},\n\n\t// TTS models\n\t\"aide-tts\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:  \"aide-tts\",\n\t\t\tIsTTS: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n\t\t},\n\t},\n\t\"aide-tts-hd\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:  \"aide-tts-hd\",\n\t\t\tIsTTS: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenainorthcentralus\", Weight: 3},\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 3},\n\t\t},\n\t},\n\n\t// DALL-E models\n\t\"Dalle3\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:      \"dalle-3\", // Note: actual model name is different\n\t\t\tIsDalle:   true,\n\t\t\tDalleRate: 4000000,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaiswedencentral\", Weight: 240},\n\t\t\t{Name: \"aideopenaiaustraliaeast\", Weight: 240},\n\t\t\t{Name: \"aideopenaieastus\", Weight: 240},\n\t\t},\n\t},\n\t\"dalle\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:      \"dalle\",\n\t\t\tIsDalle:   true,\n\t\t\tDalleRate: 2000000,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n\t\t},\n\t},\n\t\"dalleget\": {\n\t\tModelConfig: ModelConfig{\n\t\t\tName:    \"dalleget\",\n\t\t\tIsDalle: true,\n\t\t},\n\t\tRegions: []RegionConfig{\n\t\t\t{Name: \"aideopenaieastus\", Weight: 1380},\n\t\t},\n\t},\n}\n\n// GetModelConfig returns the configuration for a specific model\nfunc GetModelConfig(model string) (ModelDeployment, bool) {\n\tconfig, ok := ModelDeployments[model]\n\treturn config, ok\n}\n\n// IsPTUEnabled checks if PTU is enabled for a specific model and region\nfunc IsPTUEnabled(model, region string) bool {\n\t// Currently only aide-gpt-4.1 on aideopenaijapaneast has PTU\n\treturn model == \"aide-gpt-4.1\" && region == \"aideopenaijapaneast\"\n}","numLines":565,"startLine":1,"totalLines":565}}}
{"parentUuid":"7a4461ac-897e-4018-9252-4ade79cc732a","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01Ms8xJ9XjkLLNCjeKfARUvL","type":"tool_result","content":"     1→package azure\n     2→\n     3→import (\n     4→\t\"os\"\n     5→)\n     6→\n     7→// GetEnvOrDefault returns the value of an environment variable or a default value if not set\n     8→func GetEnvOrDefault(name, defaultValue string) string {\n     9→\tif v := os.Getenv(name); v != \"\" {\n    10→\t\treturn v\n    11→\t}\n    12→\treturn defaultValue\n    13→}\n    14→\n    15→// GetEnvMust returns the value of an environment variable or panics if not set\n    16→func GetEnvMust(name string) string {\n    17→\tv := os.Getenv(name)\n    18→\tif v == \"\" {\n    19→\t\tpanic(\"Missing required environment variable: \" + name)\n    20→\t}\n    21→\treturn v\n    22→}\n    23→\n    24→// GetAPIKeyForRegion returns the Azure OpenAI API key for a given region\n    25→func GetAPIKeyForRegion(region string) string {\n    26→\treturn os.Getenv(\"AZURE_OPAI_KEY_\" + region)\n    27→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"00b81f9c-6ff0-4bcf-9d6d-0dc9039257bd","timestamp":"2025-08-23T09:17:13.291Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/utils.go","content":"package azure\n\nimport (\n\t\"os\"\n)\n\n// GetEnvOrDefault returns the value of an environment variable or a default value if not set\nfunc GetEnvOrDefault(name, defaultValue string) string {\n\tif v := os.Getenv(name); v != \"\" {\n\t\treturn v\n\t}\n\treturn defaultValue\n}\n\n// GetEnvMust returns the value of an environment variable or panics if not set\nfunc GetEnvMust(name string) string {\n\tv := os.Getenv(name)\n\tif v == \"\" {\n\t\tpanic(\"Missing required environment variable: \" + name)\n\t}\n\treturn v\n}\n\n// GetAPIKeyForRegion returns the Azure OpenAI API key for a given region\nfunc GetAPIKeyForRegion(region string) string {\n\treturn os.Getenv(\"AZURE_OPAI_KEY_\" + region)\n}","numLines":27,"startLine":1,"totalLines":27}}}
{"type":"summary","summary":"Python Script: Rename Files with Timestamp Prefix","leafUuid":"ed2a7e87-ad1b-4800-b51f-ce1170351c56"}
{"type":"summary","summary":"I don't see any conversation content provided to create a title for. The message indicates \"[Last 0 of 223 messages]\" but no actual conversation text is included. Please provide the conversation content you'd like me to title.","leafUuid":"7c7e970f-682d-45db-9071-ba44b466ea6d"}
{"type":"summary","summary":"Azure Gateway AWS Dispatch Impact Analysis","leafUuid":"d0c15484-d588-45a9-bcda-d3f13aedbb65"}
{"type":"summary","summary":"Python Script: Rename Files with Timestamp Prefix","leafUuid":"640c52af-96de-4d7f-ad3b-de725a906ffd"}
{"parentUuid":"00b81f9c-6ff0-4bcf-9d6d-0dc9039257bd","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01JNXd19deWy6rwZcgLJGih2","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01XYsUHRHKs1yCornVTF8CLn","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine the new Azure package structure and files","status":"completed"},{"id":"2","content":"Review the refactored Azure OpenAI spend functions","status":"in_progress"},{"id":"3","content":"Check how the main.go file was modified","status":"pending"},{"id":"4","content":"Understand the test coverage for the new Azure package","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15818,"cache_read_input_tokens":16249,"output_tokens":165}},"type":"assistant","uuid":"a31e194c-e280-4f26-8aa7-de54dab00640","timestamp":"2025-08-23T09:17:27.156Z"}
{"parentUuid":"a31e194c-e280-4f26-8aa7-de54dab00640","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01XYsUHRHKs1yCornVTF8CLn","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"03ac411d-63c3-443f-a143-3b8a6103a44b","timestamp":"2025-08-23T09:17:27.169Z","toolUseResult":{"oldTodos":[{"content":"Examine the new Azure package structure and files","status":"in_progress","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"pending","id":"2"},{"content":"Check how the main.go file was modified","status":"pending","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}],"newTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"in_progress","id":"2"},{"content":"Check how the main.go file was modified","status":"pending","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}]}}
{"type":"summary","summary":"Python Script: Rename Files with Timestamp Prefix","leafUuid":"903e6347-b639-4587-9278-79d0454c82a9"}
{"parentUuid":"03ac411d-63c3-443f-a143-3b8a6103a44b","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01RxrFKxq6t6Uh6Jvzx635oQ","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_0123i9vue1rAF8FvndSqtycg","name":"Glob","input":{"pattern":"azure/spendfn*.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":348,"cache_read_input_tokens":32067,"output_tokens":22}},"type":"assistant","uuid":"833da8ee-2170-4b80-848e-f24e92d9ab6c","timestamp":"2025-08-23T09:17:33.490Z"}
{"type":"summary","summary":"Azure Gateway Refactoring: Modularizing Azure OpenAI Code","leafUuid":"886f76e7-4939-4701-8055-387687978dc5"}
{"parentUuid":"833da8ee-2170-4b80-848e-f24e92d9ab6c","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01RxrFKxq6t6Uh6Jvzx635oQ","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_015A1jA6epdvuFkmA2tF4oZW","name":"Glob","input":{"pattern":"azure/azure.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":348,"cache_read_input_tokens":32067,"output_tokens":98}},"type":"assistant","uuid":"61e38e31-cf29-4d27-8579-ffa9cac56381","timestamp":"2025-08-23T09:17:34.712Z"}
{"parentUuid":"61e38e31-cf29-4d27-8579-ffa9cac56381","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_015A1jA6epdvuFkmA2tF4oZW","type":"tool_result","content":"/Users/mtk19651/project/azure-gateway/azure/azure.go"}]},"uuid":"072c2aca-54a0-46b5-a5db-0f5d2b68fd56","timestamp":"2025-08-23T09:17:34.744Z","toolUseResult":{"filenames":["/Users/mtk19651/project/azure-gateway/azure/azure.go"],"durationMs":7,"numFiles":1,"truncated":false}}
{"parentUuid":"072c2aca-54a0-46b5-a5db-0f5d2b68fd56","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_0123i9vue1rAF8FvndSqtycg","type":"tool_result","content":"/Users/mtk19651/project/azure-gateway/azure/spendfn.go"}]},"uuid":"efa4e4ee-e8d8-4a95-bb24-3974db86f1fc","timestamp":"2025-08-23T09:17:34.751Z","toolUseResult":{"filenames":["/Users/mtk19651/project/azure-gateway/azure/spendfn.go"],"durationMs":19,"numFiles":1,"truncated":false}}
{"type":"summary","summary":"Azure Gateway Project Setup Discussion","leafUuid":"5a5a2531-c072-4503-8f23-5b7234bd5d74"}
{"type":"summary","summary":"Simplifying Quota Test for Username Normalization","leafUuid":"b0429fff-b929-4231-a79a-9a18e69e8e21"}
{"parentUuid":"efa4e4ee-e8d8-4a95-bb24-3974db86f1fc","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_0131VfE776v3UFcQr8UC2o4X","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01LDGk4nvj2YxhsBibmnuur3","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/spendfn.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":48,"cache_creation_input_tokens":155,"cache_read_input_tokens":32415,"output_tokens":21}},"type":"assistant","uuid":"dd828264-8da0-4524-b58b-5e669dfd1966","timestamp":"2025-08-23T09:17:41.656Z"}
{"parentUuid":"dd828264-8da0-4524-b58b-5e669dfd1966","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_0131VfE776v3UFcQr8UC2o4X","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01GkZvAdrJ8PTv6U8CSLDACL","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/azure.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":48,"cache_creation_input_tokens":155,"cache_read_input_tokens":32415,"output_tokens":128}},"type":"assistant","uuid":"6bc9b1a3-5a9a-4d51-bc6c-b4394441e1e8","timestamp":"2025-08-23T09:17:43.199Z"}
{"parentUuid":"6bc9b1a3-5a9a-4d51-bc6c-b4394441e1e8","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01LDGk4nvj2YxhsBibmnuur3","type":"tool_result","content":"     1→package azure\n     2→\n     3→import (\n     4→\t\"context\"\n     5→\t\"encoding/json\"\n     6→\t\"errors\"\n     7→\t\"fmt\"\n     8→\t\"net/http\"\n     9→\t\"strings\"\n    10→\n    11→\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n    12→\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n    13→\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n    14→\t\"github.com/pkoukk/tiktoken-go\"\n    15→\t\"golang.org/x/exp/slog\"\n    16→)\n    17→\n    18→// Error definitions for Azure OpenAI operations\n    19→var (\n    20→\tErrTokenLimit        = errors.New(\"your input exceeds the token limit\")\n    21→\tVisionStreamDisabled = errors.New(\"streaming gpt-4-turbo-vision responses is disabled\")\n    22→\tVisionNotAllowed     = errors.New(\"you are not allowed to use gpt-4-turbo-vision\")\n    23→\tGPT4NotAllowed       = errors.New(\"you are not allowed to use gpt-4\")\n    24→\tDomainNotAllowed     = errors.New(\"you are not allowed to use the model in this domain\")\n    25→)\n    26→\n    27→// AoaiResp represents the response structure from the Azure OpenAI API.\n    28→// It contains usage information about the tokens consumed during the request.\n    29→type AoaiResp struct {\n    30→\tUsage struct {\n    31→\t\t// PromptTokens represents the number of tokens used in the prompt.\n    32→\t\t// This field is used in the original response format.\n    33→\t\tPromptTokens int `json:\"prompt_tokens\"`\n    34→\n    35→\t\t// CompletionTokens represents the number of tokens used in the completion.\n    36→\t\t// This field is used in the original response format.\n    37→\t\tCompletionTokens int `json:\"completion_tokens\"`\n    38→\n    39→\t\t// InputTokens represents the number of tokens used in the input.\n    40→\t\t// This field is used in the new response format.\n    41→\t\tInputTokens int `json:\"input_tokens\"`\n    42→\n    43→\t\t// OutputTokens represents the number of tokens used in the output.\n    44→\t\t// This field is used in the new response format.\n    45→\t\tOutputTokens int `json:\"output_tokens\"`\n    46→\t} `json:\"usage\"`\n    47→}\n    48→\n    49→// DalleReq represents a DALL-E image generation request\n    50→type DalleReq struct {\n    51→\tN int `json:\"n\"`\n    52→}\n    53→\n    54→// Message represents a message in a chat completion request\n    55→type Message struct {\n    56→\tRole    string          `json:\"role\"`\n    57→\tContent json.RawMessage `json:\"content\"`\n    58→}\n    59→\n    60→// MessageContent represents the content structure of a message\n    61→type MessageContent struct {\n    62→\tType string `json:\"type\"`\n    63→\tText string `json:\"text\"`\n    64→}\n    65→\n    66→// HasImages checks if the message contains image content\n    67→func (m Message) HasImages() bool {\n    68→\tvar content []MessageContent\n    69→\tif json.Unmarshal(m.Content, &content) == nil {\n    70→\t\tfor _, c := range content {\n    71→\t\t\tif c.Type == \"image_url\" {\n    72→\t\t\t\treturn true\n    73→\t\t\t}\n    74→\t\t}\n    75→\t}\n    76→\treturn false\n    77→}\n    78→\n    79→// SplitImageMessages separates text and image content from a message\n    80→func (m Message) SplitImageMessages() (Message, int) {\n    81→\tif !m.HasImages() {\n    82→\t\treturn m, 0\n    83→\t}\n    84→\tvar oldContents, newContents []MessageContent\n    85→\timageCount := 0\n    86→\tif json.Unmarshal(m.Content, &oldContents) == nil {\n    87→\t\tfor _, c := range oldContents {\n    88→\t\t\tif c.Type == \"image_url\" {\n    89→\t\t\t\timageCount++\n    90→\t\t\t\tcontinue\n    91→\t\t\t}\n    92→\t\t\tnewContents = append(newContents, c)\n    93→\t\t}\n    94→\t}\n    95→\tvar newMessage Message\n    96→\tnewMessage.Role = m.Role\n    97→\tnewMessage.Content, _ = json.Marshal(newContents)\n    98→\n    99→\treturn newMessage, imageCount\n   100→}\n   101→\n   102→// StreamBody represents a streaming request body\n   103→type StreamBody struct {\n   104→\tStream   bool      `json:\"stream\"`\n   105→\tMessages []Message `json:\"messages\"`\n   106→}\n   107→\n   108→// CountToken counts the tokens in the request, accounting for images\n   109→func (sb StreamBody) CountToken(encoder *tiktoken.Tiktoken, fallbackTokens int) int {\n   110→\thasImages := false\n   111→\tfor _, m := range sb.Messages {\n   112→\t\tif m.HasImages() {\n   113→\t\t\thasImages = true\n   114→\t\t\tbreak\n   115→\t\t}\n   116→\t}\n   117→\n   118→\tif !hasImages {\n   119→\t\tbody, err := json.Marshal(sb)\n   120→\t\tif err != nil {\n   121→\t\t\treturn fallbackTokens\n   122→\t\t}\n   123→\t\treturn len(encoder.Encode(string(body), nil, nil))\n   124→\t}\n   125→\n   126→\ttotalImageCount := 0\n   127→\tvar textContents []Message\n   128→\tfor _, m := range sb.Messages {\n   129→\t\tif m.HasImages() {\n   130→\t\t\ttextContent, imageCount := m.SplitImageMessages()\n   131→\t\t\ttextContents = append(textContents, textContent)\n   132→\t\t\ttotalImageCount += imageCount\n   133→\t\t} else {\n   134→\t\t\ttextContents = append(textContents, m)\n   135→\t\t}\n   136→\t}\n   137→\n   138→\ttextBody, err := json.Marshal(textContents)\n   139→\tif err != nil {\n   140→\t\treturn fallbackTokens\n   141→\t}\n   142→\ttextToken := len(encoder.Encode(string(textBody), nil, nil))\n   143→\t// https://learn.microsoft.com/en-us/azure/ai-services/openai/overview#image-tokens-gpt-4-turbo-with-vision\n   144→\t// max image token = 170 * 8 + 85 = 1445\n   145→\timageToken := 1445 * totalImageCount\n   146→\n   147→\treturn textToken + imageToken\n   148→}\n   149→\n   150→// AoaiSpendFn creates a spend function for Azure OpenAI models\n   151→func AoaiSpendFn(model string, capgpt4 bool, crowdapi crowdadapter.Adapter, qc quota.QuotaClient, smtpserver string, encoder *tiktoken.Tiktoken, promptrate, completionrate int) common.SpendFn {\n   152→\treturn common.SpendFn{\n   153→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   154→\t\t\tvar checkCrowd bool\n   155→\t\t\tvar groups []crowdadapter.CrowdGroup\n   156→\t\t\tif _, ok := crowdapi.(*crowdadapter.CrowdAPI); ok {\n   157→\t\t\t\tcheckCrowd = true\n   158→\t\t\t}\n   159→\t\t\tif checkCrowd && (common.IsAirgappedDomain(domain) || common.IsAirgappedDomain(req.Header.Get(\"X-Domain\"))) {\n   160→\t\t\t\tgroups, err = crowdapi.GetUserNestedGroups(req.Context(), user, crowdadapter.DefaultLimit)\n   161→\t\t\t\tif err != nil {\n   162→\t\t\t\t\treturn 0, 0, err\n   163→\t\t\t\t}\n   164→\t\t\t\tpermit := false\n   165→\t\t\t\tgroup := \"gaisf_\" + domain + \"_\" + strings.ReplaceAll(model, \"-\", \"_\")\n   166→\t\t\t\tfor _, g := range groups {\n   167→\t\t\t\t\tif g.Name == group {\n   168→\t\t\t\t\t\tpermit = true\n   169→\t\t\t\t\t\tbreak\n   170→\t\t\t\t\t}\n   171→\t\t\t\t}\n   172→\t\t\t\tif !permit {\n   173→\t\t\t\t\treturn 0, 0, fmt.Errorf(\"%w: %s\", DomainNotAllowed, group)\n   174→\t\t\t\t}\n   175→\t\t\t}\n   176→\n   177→\t\t\tvar tokens int\n   178→\t\t\tif strings.Contains(model, \"gpt-4o\") || strings.Contains(model, \"gpt-4.1\") || strings.Contains(model, \"vision\") {\n   179→\t\t\t\ttokens = 2000\n   180→\t\t\t\tvar sb StreamBody\n   181→\t\t\t\tif err := json.Unmarshal([]byte(body), &sb); err != nil {\n   182→\t\t\t\t\treturn 0, 0, err\n   183→\t\t\t\t}\n   184→\t\t\t\ttokens = sb.CountToken(encoder, tokens)\n   185→\t\t\t} else {\n   186→\t\t\t\ttokens = len(encoder.Encode(body, nil, nil))\n   187→\t\t\t}\n   188→\n   189→\t\t\tif checkCrowd && capgpt4 && strings.Contains(model, \"aide-gpt-4\") {\n   190→\t\t\t\tif groups == nil {\n   191→\t\t\t\t\tgroups, err = crowdapi.GetUserNestedGroups(req.Context(), user, crowdadapter.DefaultLimit)\n   192→\t\t\t\t\tif err != nil {\n   193→\t\t\t\t\t\treturn 0, 0, err\n   194→\t\t\t\t\t}\n   195→\t\t\t\t}\n   196→\n   197→\t\t\t\tif model == \"aide-gpt-4-turbo-vision\" {\n   198→\t\t\t\t\tpermit := false\n   199→\t\t\t\t\tif domain == \"oa\" {\n   200→\t\t\t\t\tL3:\n   201→\t\t\t\t\t\tfor _, g := range groups {\n   202→\t\t\t\t\t\t\tswitch g.Name {\n   203→\t\t\t\t\t\t\tcase \"gaisf_io_gpt4_vision\", \"gaisf_oa_gpt4_vision\", \"gaisf_oa_gpt4_turbo_vision\":\n   204→\t\t\t\t\t\t\t\tpermit = true\n   205→\t\t\t\t\t\t\t\tbreak L3\n   206→\t\t\t\t\t\t\t}\n   207→\t\t\t\t\t\t}\n   208→\t\t\t\t\t} else if domain == \"swrd\" {\n   209→\t\t\t\t\tL4:\n   210→\t\t\t\t\t\tfor _, g := range groups {\n   211→\t\t\t\t\t\t\tswitch g.Name {\n   212→\t\t\t\t\t\t\tcase \"gaisf_swrd_gpt4_vision\", \"gaisf_swrd_gpt4_turbo_vision\":\n   213→\t\t\t\t\t\t\t\tpermit = true\n   214→\t\t\t\t\t\t\t\tbreak L4\n   215→\t\t\t\t\t\t\t}\n   216→\t\t\t\t\t\t}\n   217→\t\t\t\t\t}\n   218→\t\t\t\t\tif !permit {\n   219→\t\t\t\t\t\treturn 0, 0, VisionNotAllowed\n   220→\t\t\t\t\t}\n   221→\t\t\t\t} else if (tokens > int(8000*1.1) && (model == \"aide-gpt-4-turbo\")) ||\n   222→\t\t\t\t\t(tokens > int(16000*1.1) && (model == \"aide-gpt-4o\")) ||\n   223→\t\t\t\t\t(tokens > int(16000*1.1) && (model == \"aide-gpt-4o-mini\")) {\n   224→\t\t\t\t\tif !common.CheckTokenLimitPermision(domain, tokens, groups) {\n   225→\t\t\t\t\t\treturn 0, 0, ErrTokenLimit\n   226→\t\t\t\t\t}\n   227→\t\t\t\t}\n   228→\t\t\t}\n   229→\t\t\testimate = tokens * promptrate\n   230→\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n   231→\t\t\treturn\n   232→\t\t},\n   233→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   234→\t\t\tif resp == nil {\n   235→\t\t\t\testimate = preestimate * -1\n   236→\t\t\t} else if preestimate > 0 && resp.StatusCode >= 300 {\n   237→\t\t\t\testimate = preestimate * -1\n   238→\t\t\t} else if strings.Contains(resp.Header.Get(\"content-type\"), \"text/event-stream\") {\n   239→\t\t\t\testimate = strings.Count(body, \"\\ndata: {\") * completionrate\n   240→\t\t\t} else {\n   241→\t\t\t\tvar resp AoaiResp\n   242→\t\t\t\tif err := json.Unmarshal([]byte(body), &resp); err == nil {\n   243→\t\t\t\t\tif resp.Usage.PromptTokens > 0 && resp.Usage.CompletionTokens > 0 {\n   244→\t\t\t\t\t\testimate = completionrate*resp.Usage.CompletionTokens + promptrate*resp.Usage.PromptTokens - preestimate\n   245→\t\t\t\t\t} else if resp.Usage.InputTokens > 0 && resp.Usage.OutputTokens > 0 {\n   246→\t\t\t\t\t\testimate = completionrate*resp.Usage.OutputTokens + promptrate*resp.Usage.InputTokens - preestimate\n   247→\t\t\t\t\t} else {\n   248→\t\t\t\t\t\testimate = preestimate * -1\n   249→\t\t\t\t\t}\n   250→\t\t\t\t} else {\n   251→\t\t\t\t\testimate = preestimate * -1\n   252→\t\t\t\t}\n   253→\t\t\t}\n   254→\t\t\tif estimate != 0 {\n   255→\t\t\t\tqc.Spend(context.Background(), user, estimate)\n   256→\t\t\t}\n   257→\t\t\treturn\n   258→\t\t},\n   259→\t\tAlert: common.AlertFn(smtpserver, qc),\n   260→\t}\n   261→}\n   262→\n   263→// DalleSpendFn creates a spend function for DALL-E image generation\n   264→func DalleSpendFn(costPerImage int, qc quota.QuotaClient, smtpserver string) common.SpendFn {\n   265→\treturn common.SpendFn{\n   266→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   267→\t\t\tvar dreq DalleReq\n   268→\t\t\tif err := json.Unmarshal([]byte(body), &dreq); err == nil {\n   269→\t\t\t\testimate = dreq.N * costPerImage\n   270→\t\t\t}\n   271→\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n   272→\t\t\treturn\n   273→\t\t},\n   274→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   275→\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n   276→\t\t\t\testimate = preestimate * -1\n   277→\t\t\t\tqc.Spend(context.Background(), user, estimate)\n   278→\t\t\t}\n   279→\t\t\treturn 0\n   280→\t\t},\n   281→\t\tAlert: func(user string, logger *slog.Logger) {},\n   282→\t}\n   283→}\n   284→\n   285→// WhisperSpendFn creates a spend function for Whisper speech-to-text\n   286→func WhisperSpendFn(qc quota.QuotaClient) common.SpendFn {\n   287→\treturn common.SpendFn{\n   288→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   289→\t\t\testimate = 6000000 // assume 10 minute\n   290→\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n   291→\t\t\treturn\n   292→\t\t},\n   293→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   294→\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n   295→\t\t\t\testimate = preestimate * -1\n   296→\t\t\t\tqc.Spend(context.Background(), user, estimate)\n   297→\t\t\t}\n   298→\t\t\treturn 0\n   299→\t\t},\n   300→\t\tAlert: func(user string, logger *slog.Logger) {},\n   301→\t}\n   302→}\n   303→\n   304→// TTSSpendFn creates a spend function for text-to-speech\n   305→func TTSSpendFn(costEstimate int, qc quota.QuotaClient) common.SpendFn {\n   306→\treturn common.SpendFn{\n   307→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   308→\t\t\testimate = costEstimate // e.g., 15000000 for TTS, 30000000 for TTS-HD\n   309→\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n   310→\t\t\treturn\n   311→\t\t},\n   312→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   313→\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n   314→\t\t\t\testimate = preestimate * -1\n   315→\t\t\t\tqc.Spend(context.Background(), user, estimate)\n   316→\t\t\t}\n   317→\t\t\treturn\n   318→\t\t},\n   319→\t\tAlert: func(user string, logger *slog.Logger) {},\n   320→\t}\n   321→}\n   322→\n   323→// RealtimeSpendFn creates a spend function for realtime models (no quota tracking)\n   324→func RealtimeSpendFn() common.SpendFn {\n   325→\treturn common.SpendFn{\n   326→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   327→\t\t\treturn\n   328→\t\t},\n   329→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   330→\t\t\treturn\n   331→\t\t},\n   332→\t\tAlert: func(user string, logger *slog.Logger) {},\n   333→\t}\n   334→}\n   335→\n   336→// AssistantsSpendFn creates a spend function for Assistants API\n   337→func AssistantsSpendFn(qc quota.QuotaClient, smtpserver string) common.SpendFn {\n   338→\treturn common.SpendFn{\n   339→\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n   340→\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"/runs\") {\n   341→\t\t\t\testimate = 1000000 // estimated assistants api costs $10 for 1000 runs\n   342→\t\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n   343→\t\t\t\treturn\n   344→\t\t\t}\n   345→\t\t\treturn 0, 1, nil\n   346→\t\t},\n   347→\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n   348→\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n   349→\t\t\t\tqc.Spend(context.Background(), user, preestimate*-1)\n   350→\t\t\t\treturn preestimate * -1\n   351→\t\t\t}\n   352→\t\t\treturn 0\n   353→\t\t},\n   354→\t\tAlert: common.AlertFn(smtpserver, qc),\n   355→\t}\n   356→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"060d0c2e-7568-49f3-a270-66ca94089da9","timestamp":"2025-08-23T09:17:43.218Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/spendfn.go","content":"package azure\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n\t\"github.com/pkoukk/tiktoken-go\"\n\t\"golang.org/x/exp/slog\"\n)\n\n// Error definitions for Azure OpenAI operations\nvar (\n\tErrTokenLimit        = errors.New(\"your input exceeds the token limit\")\n\tVisionStreamDisabled = errors.New(\"streaming gpt-4-turbo-vision responses is disabled\")\n\tVisionNotAllowed     = errors.New(\"you are not allowed to use gpt-4-turbo-vision\")\n\tGPT4NotAllowed       = errors.New(\"you are not allowed to use gpt-4\")\n\tDomainNotAllowed     = errors.New(\"you are not allowed to use the model in this domain\")\n)\n\n// AoaiResp represents the response structure from the Azure OpenAI API.\n// It contains usage information about the tokens consumed during the request.\ntype AoaiResp struct {\n\tUsage struct {\n\t\t// PromptTokens represents the number of tokens used in the prompt.\n\t\t// This field is used in the original response format.\n\t\tPromptTokens int `json:\"prompt_tokens\"`\n\n\t\t// CompletionTokens represents the number of tokens used in the completion.\n\t\t// This field is used in the original response format.\n\t\tCompletionTokens int `json:\"completion_tokens\"`\n\n\t\t// InputTokens represents the number of tokens used in the input.\n\t\t// This field is used in the new response format.\n\t\tInputTokens int `json:\"input_tokens\"`\n\n\t\t// OutputTokens represents the number of tokens used in the output.\n\t\t// This field is used in the new response format.\n\t\tOutputTokens int `json:\"output_tokens\"`\n\t} `json:\"usage\"`\n}\n\n// DalleReq represents a DALL-E image generation request\ntype DalleReq struct {\n\tN int `json:\"n\"`\n}\n\n// Message represents a message in a chat completion request\ntype Message struct {\n\tRole    string          `json:\"role\"`\n\tContent json.RawMessage `json:\"content\"`\n}\n\n// MessageContent represents the content structure of a message\ntype MessageContent struct {\n\tType string `json:\"type\"`\n\tText string `json:\"text\"`\n}\n\n// HasImages checks if the message contains image content\nfunc (m Message) HasImages() bool {\n\tvar content []MessageContent\n\tif json.Unmarshal(m.Content, &content) == nil {\n\t\tfor _, c := range content {\n\t\t\tif c.Type == \"image_url\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// SplitImageMessages separates text and image content from a message\nfunc (m Message) SplitImageMessages() (Message, int) {\n\tif !m.HasImages() {\n\t\treturn m, 0\n\t}\n\tvar oldContents, newContents []MessageContent\n\timageCount := 0\n\tif json.Unmarshal(m.Content, &oldContents) == nil {\n\t\tfor _, c := range oldContents {\n\t\t\tif c.Type == \"image_url\" {\n\t\t\t\timageCount++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnewContents = append(newContents, c)\n\t\t}\n\t}\n\tvar newMessage Message\n\tnewMessage.Role = m.Role\n\tnewMessage.Content, _ = json.Marshal(newContents)\n\n\treturn newMessage, imageCount\n}\n\n// StreamBody represents a streaming request body\ntype StreamBody struct {\n\tStream   bool      `json:\"stream\"`\n\tMessages []Message `json:\"messages\"`\n}\n\n// CountToken counts the tokens in the request, accounting for images\nfunc (sb StreamBody) CountToken(encoder *tiktoken.Tiktoken, fallbackTokens int) int {\n\thasImages := false\n\tfor _, m := range sb.Messages {\n\t\tif m.HasImages() {\n\t\t\thasImages = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !hasImages {\n\t\tbody, err := json.Marshal(sb)\n\t\tif err != nil {\n\t\t\treturn fallbackTokens\n\t\t}\n\t\treturn len(encoder.Encode(string(body), nil, nil))\n\t}\n\n\ttotalImageCount := 0\n\tvar textContents []Message\n\tfor _, m := range sb.Messages {\n\t\tif m.HasImages() {\n\t\t\ttextContent, imageCount := m.SplitImageMessages()\n\t\t\ttextContents = append(textContents, textContent)\n\t\t\ttotalImageCount += imageCount\n\t\t} else {\n\t\t\ttextContents = append(textContents, m)\n\t\t}\n\t}\n\n\ttextBody, err := json.Marshal(textContents)\n\tif err != nil {\n\t\treturn fallbackTokens\n\t}\n\ttextToken := len(encoder.Encode(string(textBody), nil, nil))\n\t// https://learn.microsoft.com/en-us/azure/ai-services/openai/overview#image-tokens-gpt-4-turbo-with-vision\n\t// max image token = 170 * 8 + 85 = 1445\n\timageToken := 1445 * totalImageCount\n\n\treturn textToken + imageToken\n}\n\n// AoaiSpendFn creates a spend function for Azure OpenAI models\nfunc AoaiSpendFn(model string, capgpt4 bool, crowdapi crowdadapter.Adapter, qc quota.QuotaClient, smtpserver string, encoder *tiktoken.Tiktoken, promptrate, completionrate int) common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\tvar checkCrowd bool\n\t\t\tvar groups []crowdadapter.CrowdGroup\n\t\t\tif _, ok := crowdapi.(*crowdadapter.CrowdAPI); ok {\n\t\t\t\tcheckCrowd = true\n\t\t\t}\n\t\t\tif checkCrowd && (common.IsAirgappedDomain(domain) || common.IsAirgappedDomain(req.Header.Get(\"X-Domain\"))) {\n\t\t\t\tgroups, err = crowdapi.GetUserNestedGroups(req.Context(), user, crowdadapter.DefaultLimit)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn 0, 0, err\n\t\t\t\t}\n\t\t\t\tpermit := false\n\t\t\t\tgroup := \"gaisf_\" + domain + \"_\" + strings.ReplaceAll(model, \"-\", \"_\")\n\t\t\t\tfor _, g := range groups {\n\t\t\t\t\tif g.Name == group {\n\t\t\t\t\t\tpermit = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif !permit {\n\t\t\t\t\treturn 0, 0, fmt.Errorf(\"%w: %s\", DomainNotAllowed, group)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tokens int\n\t\t\tif strings.Contains(model, \"gpt-4o\") || strings.Contains(model, \"gpt-4.1\") || strings.Contains(model, \"vision\") {\n\t\t\t\ttokens = 2000\n\t\t\t\tvar sb StreamBody\n\t\t\t\tif err := json.Unmarshal([]byte(body), &sb); err != nil {\n\t\t\t\t\treturn 0, 0, err\n\t\t\t\t}\n\t\t\t\ttokens = sb.CountToken(encoder, tokens)\n\t\t\t} else {\n\t\t\t\ttokens = len(encoder.Encode(body, nil, nil))\n\t\t\t}\n\n\t\t\tif checkCrowd && capgpt4 && strings.Contains(model, \"aide-gpt-4\") {\n\t\t\t\tif groups == nil {\n\t\t\t\t\tgroups, err = crowdapi.GetUserNestedGroups(req.Context(), user, crowdadapter.DefaultLimit)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn 0, 0, err\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif model == \"aide-gpt-4-turbo-vision\" {\n\t\t\t\t\tpermit := false\n\t\t\t\t\tif domain == \"oa\" {\n\t\t\t\t\tL3:\n\t\t\t\t\t\tfor _, g := range groups {\n\t\t\t\t\t\t\tswitch g.Name {\n\t\t\t\t\t\t\tcase \"gaisf_io_gpt4_vision\", \"gaisf_oa_gpt4_vision\", \"gaisf_oa_gpt4_turbo_vision\":\n\t\t\t\t\t\t\t\tpermit = true\n\t\t\t\t\t\t\t\tbreak L3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if domain == \"swrd\" {\n\t\t\t\t\tL4:\n\t\t\t\t\t\tfor _, g := range groups {\n\t\t\t\t\t\t\tswitch g.Name {\n\t\t\t\t\t\t\tcase \"gaisf_swrd_gpt4_vision\", \"gaisf_swrd_gpt4_turbo_vision\":\n\t\t\t\t\t\t\t\tpermit = true\n\t\t\t\t\t\t\t\tbreak L4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif !permit {\n\t\t\t\t\t\treturn 0, 0, VisionNotAllowed\n\t\t\t\t\t}\n\t\t\t\t} else if (tokens > int(8000*1.1) && (model == \"aide-gpt-4-turbo\")) ||\n\t\t\t\t\t(tokens > int(16000*1.1) && (model == \"aide-gpt-4o\")) ||\n\t\t\t\t\t(tokens > int(16000*1.1) && (model == \"aide-gpt-4o-mini\")) {\n\t\t\t\t\tif !common.CheckTokenLimitPermision(domain, tokens, groups) {\n\t\t\t\t\t\treturn 0, 0, ErrTokenLimit\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\testimate = tokens * promptrate\n\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n\t\t\treturn\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\tif resp == nil {\n\t\t\t\testimate = preestimate * -1\n\t\t\t} else if preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\testimate = preestimate * -1\n\t\t\t} else if strings.Contains(resp.Header.Get(\"content-type\"), \"text/event-stream\") {\n\t\t\t\testimate = strings.Count(body, \"\\ndata: {\") * completionrate\n\t\t\t} else {\n\t\t\t\tvar resp AoaiResp\n\t\t\t\tif err := json.Unmarshal([]byte(body), &resp); err == nil {\n\t\t\t\t\tif resp.Usage.PromptTokens > 0 && resp.Usage.CompletionTokens > 0 {\n\t\t\t\t\t\testimate = completionrate*resp.Usage.CompletionTokens + promptrate*resp.Usage.PromptTokens - preestimate\n\t\t\t\t\t} else if resp.Usage.InputTokens > 0 && resp.Usage.OutputTokens > 0 {\n\t\t\t\t\t\testimate = completionrate*resp.Usage.OutputTokens + promptrate*resp.Usage.InputTokens - preestimate\n\t\t\t\t\t} else {\n\t\t\t\t\t\testimate = preestimate * -1\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\testimate = preestimate * -1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif estimate != 0 {\n\t\t\t\tqc.Spend(context.Background(), user, estimate)\n\t\t\t}\n\t\t\treturn\n\t\t},\n\t\tAlert: common.AlertFn(smtpserver, qc),\n\t}\n}\n\n// DalleSpendFn creates a spend function for DALL-E image generation\nfunc DalleSpendFn(costPerImage int, qc quota.QuotaClient, smtpserver string) common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\tvar dreq DalleReq\n\t\t\tif err := json.Unmarshal([]byte(body), &dreq); err == nil {\n\t\t\t\testimate = dreq.N * costPerImage\n\t\t\t}\n\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n\t\t\treturn\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\testimate = preestimate * -1\n\t\t\t\tqc.Spend(context.Background(), user, estimate)\n\t\t\t}\n\t\t\treturn 0\n\t\t},\n\t\tAlert: func(user string, logger *slog.Logger) {},\n\t}\n}\n\n// WhisperSpendFn creates a spend function for Whisper speech-to-text\nfunc WhisperSpendFn(qc quota.QuotaClient) common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\testimate = 6000000 // assume 10 minute\n\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n\t\t\treturn\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\testimate = preestimate * -1\n\t\t\t\tqc.Spend(context.Background(), user, estimate)\n\t\t\t}\n\t\t\treturn 0\n\t\t},\n\t\tAlert: func(user string, logger *slog.Logger) {},\n\t}\n}\n\n// TTSSpendFn creates a spend function for text-to-speech\nfunc TTSSpendFn(costEstimate int, qc quota.QuotaClient) common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\testimate = costEstimate // e.g., 15000000 for TTS, 30000000 for TTS-HD\n\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n\t\t\treturn\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\testimate = preestimate * -1\n\t\t\t\tqc.Spend(context.Background(), user, estimate)\n\t\t\t}\n\t\t\treturn\n\t\t},\n\t\tAlert: func(user string, logger *slog.Logger) {},\n\t}\n}\n\n// RealtimeSpendFn creates a spend function for realtime models (no quota tracking)\nfunc RealtimeSpendFn() common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\treturn\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\treturn\n\t\t},\n\t\tAlert: func(user string, logger *slog.Logger) {},\n\t}\n}\n\n// AssistantsSpendFn creates a spend function for Assistants API\nfunc AssistantsSpendFn(qc quota.QuotaClient, smtpserver string) common.SpendFn {\n\treturn common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\tif req.Method == http.MethodPost && strings.Contains(req.URL.Path, \"/runs\") {\n\t\t\t\testimate = 1000000 // estimated assistants api costs $10 for 1000 runs\n\t\t\t\tremain, err = qc.Spend(context.Background(), user, estimate)\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn 0, 1, nil\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\tif resp != nil && preestimate > 0 && resp.StatusCode >= 300 {\n\t\t\t\tqc.Spend(context.Background(), user, preestimate*-1)\n\t\t\t\treturn preestimate * -1\n\t\t\t}\n\t\t\treturn 0\n\t\t},\n\t\tAlert: common.AlertFn(smtpserver, qc),\n\t}\n}","numLines":356,"startLine":1,"totalLines":356}}}
{"parentUuid":"060d0c2e-7568-49f3-a270-66ca94089da9","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01GkZvAdrJ8PTv6U8CSLDACL","type":"tool_result","content":"     1→package azure\n     2→\n     3→import (\n     4→\t\"fmt\"\n     5→\t\"regexp\"\n     6→\t\"strings\"\n     7→)\n     8→\n     9→// OpenAIAPIVersion is the API version for the Azure OpenAI API.\n    10→// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation#latest-ga-api-release\n    11→const OpenAIAPIVersion = \"2024-10-21\"\n    12→\n    13→// OpenAIOSeriesAPIVersion is the API version for the Azure OpenAI O-series API.\n    14→// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation#latest-ga-api-release\n    15→const OpenAIOSeriesAPIVersion = \"2024-12-01-preview\"\n    16→\n    17→// OseriesModel is a regular expression to match the O-series model names.\n    18→// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/reasoning?tabs=python-secure\n    19→// only support o3-mini, o1, o1-preview, o1-mini\n    20→\n    21→var supportedOSeriesModels = []string{\n    22→\t\"o1\", \"o1-preview\", \"o1-mini\",\n    23→\t\"o3-mini\", \"aide-o3\", \"aide-o3-pro\",\n    24→\t\"aide-o4-mini\",\n    25→}\n    26→\n    27→var OseriesModel = regexp.MustCompile(fmt.Sprintf(\"(%s)\", strings.Join(supportedOSeriesModels, \"|\")))\n    28→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"a9ce1d8a-9a23-4cb1-8132-088c13c86b80","timestamp":"2025-08-23T09:17:43.218Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/azure.go","content":"package azure\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n)\n\n// OpenAIAPIVersion is the API version for the Azure OpenAI API.\n// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation#latest-ga-api-release\nconst OpenAIAPIVersion = \"2024-10-21\"\n\n// OpenAIOSeriesAPIVersion is the API version for the Azure OpenAI O-series API.\n// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation#latest-ga-api-release\nconst OpenAIOSeriesAPIVersion = \"2024-12-01-preview\"\n\n// OseriesModel is a regular expression to match the O-series model names.\n// ref: https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/reasoning?tabs=python-secure\n// only support o3-mini, o1, o1-preview, o1-mini\n\nvar supportedOSeriesModels = []string{\n\t\"o1\", \"o1-preview\", \"o1-mini\",\n\t\"o3-mini\", \"aide-o3\", \"aide-o3-pro\",\n\t\"aide-o4-mini\",\n}\n\nvar OseriesModel = regexp.MustCompile(fmt.Sprintf(\"(%s)\", strings.Join(supportedOSeriesModels, \"|\")))\n","numLines":28,"startLine":1,"totalLines":28}}}
{"type":"summary","summary":"Empty Request Conversation","leafUuid":"d3f473c3-af57-4ab7-802f-ce3eaca42cf0"}
{"type":"summary","summary":"Fix Redis quota test uppercase conversion issues","leafUuid":"be5f72bd-ac47-449b-8cef-1ebe26b34143"}
{"type":"summary","summary":"\"Empty Conversation - No Content Provided\"","leafUuid":"635eb345-e18c-4e9d-a762-1029b6855c14"}
{"type":"summary","summary":"Auth Test UID Uppercase Normalization Fix","leafUuid":"20003e85-e9c9-47a3-8589-d7f0d1079714"}
{"parentUuid":"a9ce1d8a-9a23-4cb1-8132-088c13c86b80","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_018CpVGusPtwqjB61QKWVHAr","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01XE5mcHVL3enyD6PJu5i5Uo","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine the new Azure package structure and files","status":"completed"},{"id":"2","content":"Review the refactored Azure OpenAI spend functions","status":"completed"},{"id":"3","content":"Check how the main.go file was modified","status":"in_progress"},{"id":"4","content":"Understand the test coverage for the new Azure package","status":"pending"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":5845,"cache_read_input_tokens":32570,"output_tokens":165}},"type":"assistant","uuid":"dd49c115-2e53-41c8-bf6b-ba49ed2a049e","timestamp":"2025-08-23T09:17:57.083Z"}
{"parentUuid":"dd49c115-2e53-41c8-bf6b-ba49ed2a049e","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01XE5mcHVL3enyD6PJu5i5Uo","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"dacbd6e9-2cfc-4cfc-92b6-d3af2a94361f","timestamp":"2025-08-23T09:17:57.114Z","toolUseResult":{"oldTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"in_progress","id":"2"},{"content":"Check how the main.go file was modified","status":"pending","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}],"newTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"in_progress","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}]}}
{"parentUuid":"dacbd6e9-2cfc-4cfc-92b6-d3af2a94361f","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01NTZMiMmcq97f1CGKbbgYPY","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01FdVugHF1zeN9sjiFEqTc6W","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","limit":100}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":348,"cache_read_input_tokens":38415,"output_tokens":95}},"type":"assistant","uuid":"7e8476be-0d80-4a01-bfc0-09055c34e288","timestamp":"2025-08-23T09:18:05.451Z"}
{"parentUuid":"7e8476be-0d80-4a01-bfc0-09055c34e288","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01FdVugHF1zeN9sjiFEqTc6W","type":"tool_result","content":"     1→package main\n     2→\n     3→import (\n     4→\t\"bytes\"\n     5→\t\"context\"\n     6→\t\"crypto/tls\"\n     7→\t\"encoding/json\"\n     8→\t\"errors\"\n     9→\t\"flag\"\n    10→\t\"fmt\"\n    11→\t\"io\"\n    12→\t\"net\"\n    13→\t\"net/http\"\n    14→\t\"net/url\"\n    15→\t\"os\"\n    16→\t\"os/signal\"\n    17→\t\"regexp\"\n    18→\t\"strconv\"\n    19→\t\"strings\"\n    20→\t\"sync\"\n    21→\t\"syscall\"\n    22→\t\"time\"\n    23→\t\"unsafe\"\n    24→\n    25→\t\"gitea.mediatek.inc/davinci/azure-gateway/awsclaude\"\n    26→\t\"gitea.mediatek.inc/davinci/azure-gateway/azure\"\n    27→\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n    28→\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n    29→\t\"gitea.mediatek.inc/davinci/azure-gateway/dailyreset\"\n    30→\t\"gitea.mediatek.inc/davinci/azure-gateway/dispatcher\"\n    31→\tgemini \"gitea.mediatek.inc/davinci/azure-gateway/gcp\"\n    32→\t\"gitea.mediatek.inc/davinci/azure-gateway/internal/mtk\"\n    33→\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/header\"\n    34→\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/middleware\"\n    35→\t\"gitea.mediatek.inc/davinci/azure-gateway/poker\"\n    36→\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n    37→\tAPIV1 \"gitea.mediatek.inc/davinci/azure-gateway/router/api/v1\"\n    38→\t\"gitea.mediatek.inc/davinci/azure-gateway/router/auth\"\n    39→\t\"gitea.mediatek.inc/davinci/azure-gateway/service/azurebingsearch\"\n    40→\t\"gitea.mediatek.inc/davinci/azure-gateway/service/user\"\n    41→\n    42→\t_ \"gitea.mediatek.inc/davinci/azure-gateway/docs\"\n    43→\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    44→\tv4 \"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n    45→\t\"github.com/essentialkaos/go-crowd/v3\"\n    46→\t\"github.com/gin-contrib/requestid\"\n    47→\t\"github.com/gin-gonic/gin\"\n    48→\t\"github.com/joho/godotenv\"\n    49→\t\"github.com/pkoukk/tiktoken-go\"\n    50→\ttiktoken_loader \"github.com/pkoukk/tiktoken-go-loader\"\n    51→\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n    52→\t\"github.com/redis/rueidis\"\n    53→\t\"github.com/redis/rueidis/rueidisaside\"\n    54→\tswaggerFiles \"github.com/swaggo/files\"\n    55→\tginSwagger \"github.com/swaggo/gin-swagger\"\n    56→\t\"golang.org/x/exp/slog\"\n    57→\t\"golang.org/x/oauth2/google\"\n    58→)\n    59→\n    60→// UserTokenRequest represents a request to generate a user token with a specified expiration time.\n    61→// ExpirationHours specifies the number of hours the token will be valid for and is a required field.\n    62→type UserTokenRequest struct {\n    63→\tExpirationHours int             `json:\"expirationHours\" binding:\"required\"`\n    64→\tPayload         *map[string]any `json:\"payload\"`\n    65→}\n    66→\n    67→type UserLoginRequest struct {\n    68→\tUserTokenRequest\n    69→\tUsername string `json:\"username\" binding:\"required\"`\n    70→\tPassword string `json:\"password\" binding:\"required\"`\n    71→}\n    72→\n    73→// Types moved to azure package - using azure.AoaiResp and azure.DalleReq\n    74→\n    75→type ResourceConfig struct {\n    76→\tURL    string `json:\"url\"`\n    77→\tKey    string `json:\"key\"`\n    78→\tSecret string `json:\"secret\"`\n    79→\tRegion string `json:\"region\"`\n    80→\tWeight int    `json:\"weight\"`\n    81→}\n    82→\n    83→type Provider string\n    84→\n    85→var (\n    86→\tClaudeV3Provider = Provider(\"anthropic.claude-v3\")\n    87→\tOpenAIProvider   = Provider(\"openai\")\n    88→)\n    89→\n    90→type DispatchConfig struct {\n    91→\tProvider Provider `json:\"provider\"`\n    92→\tModel    string   `json:\"model\"`\n    93→\tPrice    struct {\n    94→\t\tPrompt     int `json:\"prompt\"`\n    95→\t\tCompletion int `json:\"completion\"`\n    96→\t\tDalleN     int `json:\"dalleN\"`\n    97→\t} `json:\"price\"`\n    98→\tResources map[string]ResourceConfig `json:\"resources\"`\n    99→}\n   100→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"4f7c71d3-1f2c-43bb-859e-52b2487ba67d","timestamp":"2025-08-23T09:18:05.476Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","content":"package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\t\"unsafe\"\n\n\t\"gitea.mediatek.inc/davinci/azure-gateway/awsclaude\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/azure\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dailyreset\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dispatcher\"\n\tgemini \"gitea.mediatek.inc/davinci/azure-gateway/gcp\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/internal/mtk\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/header\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/middleware\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/poker\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n\tAPIV1 \"gitea.mediatek.inc/davinci/azure-gateway/router/api/v1\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/router/auth\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/service/azurebingsearch\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/service/user\"\n\n\t_ \"gitea.mediatek.inc/davinci/azure-gateway/docs\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\tv4 \"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n\t\"github.com/essentialkaos/go-crowd/v3\"\n\t\"github.com/gin-contrib/requestid\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/joho/godotenv\"\n\t\"github.com/pkoukk/tiktoken-go\"\n\ttiktoken_loader \"github.com/pkoukk/tiktoken-go-loader\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidisaside\"\n\tswaggerFiles \"github.com/swaggo/files\"\n\tginSwagger \"github.com/swaggo/gin-swagger\"\n\t\"golang.org/x/exp/slog\"\n\t\"golang.org/x/oauth2/google\"\n)\n\n// UserTokenRequest represents a request to generate a user token with a specified expiration time.\n// ExpirationHours specifies the number of hours the token will be valid for and is a required field.\ntype UserTokenRequest struct {\n\tExpirationHours int             `json:\"expirationHours\" binding:\"required\"`\n\tPayload         *map[string]any `json:\"payload\"`\n}\n\ntype UserLoginRequest struct {\n\tUserTokenRequest\n\tUsername string `json:\"username\" binding:\"required\"`\n\tPassword string `json:\"password\" binding:\"required\"`\n}\n\n// Types moved to azure package - using azure.AoaiResp and azure.DalleReq\n\ntype ResourceConfig struct {\n\tURL    string `json:\"url\"`\n\tKey    string `json:\"key\"`\n\tSecret string `json:\"secret\"`\n\tRegion string `json:\"region\"`\n\tWeight int    `json:\"weight\"`\n}\n\ntype Provider string\n\nvar (\n\tClaudeV3Provider = Provider(\"anthropic.claude-v3\")\n\tOpenAIProvider   = Provider(\"openai\")\n)\n\ntype DispatchConfig struct {\n\tProvider Provider `json:\"provider\"`\n\tModel    string   `json:\"model\"`\n\tPrice    struct {\n\t\tPrompt     int `json:\"prompt\"`\n\t\tCompletion int `json:\"completion\"`\n\t\tDalleN     int `json:\"dalleN\"`\n\t} `json:\"price\"`\n\tResources map[string]ResourceConfig `json:\"resources\"`\n}\n","numLines":100,"startLine":1,"totalLines":1487}}}
{"parentUuid":"4f7c71d3-1f2c-43bb-859e-52b2487ba67d","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01EJ1smFUjMv6DVMf3q4Ghmj","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01YMuwE8aaWbXYDeeVidP22s","name":"Grep","input":{"pattern":"azure\\.Build","path":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","output_mode":"content","-n":true,"-B":2,"-A":5}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1596,"cache_read_input_tokens":38763,"output_tokens":169}},"type":"assistant","uuid":"c00985ff-83e2-42dc-845c-70e03fc66e95","timestamp":"2025-08-23T09:18:16.844Z"}
{"parentUuid":"c00985ff-83e2-42dc-845c-70e03fc66e95","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01YMuwE8aaWbXYDeeVidP22s","type":"tool_result","content":"208-\n209-// Azure OpenAI helper functions have been moved to the azure package\n210:// The following block is commented out as it's now handled by azure.BuildAOAIEndpointConfig\n211-/*\n212-// aoaiWithKey initializes an endpoint configuration for Azure OpenAI API calls.\n213-// It constructs the configuration based on the provided parameters and the model type.\n214-//\n215-// If the url parameter is non-empty, the function uses it directly with an \"Authorization\" header.\n--\n510-\n511-\t// Build Azure OpenAI dispatchers and endpoints\n512:\taoaidispatchers := azure.BuildAOAIDispatchers(azureConfig)\n513:\taoaifallback := azure.BuildAOAIFallback(azureConfig)\n514:\tassistantsAPI := azure.BuildAssistantsAPI(azureConfig)\n515:\tazurecognitive, sttxy, customvoice := azure.BuildCognitiveEndpoints(azureConfig)\n516-\n517-\tbedrockendpoint := make(map[string]*dispatcher.Endpoint)\n518-\n519-\t// AOAI configuration now handled by azure package\n520-\t// The following overrides the aoaidispatchers built from azure package if needed"}]},"uuid":"03e75b0b-e361-4ad1-981f-71585fa23d2e","timestamp":"2025-08-23T09:18:16.874Z","toolUseResult":{"mode":"content","numFiles":0,"filenames":[],"content":"208-\n209-// Azure OpenAI helper functions have been moved to the azure package\n210:// The following block is commented out as it's now handled by azure.BuildAOAIEndpointConfig\n211-/*\n212-// aoaiWithKey initializes an endpoint configuration for Azure OpenAI API calls.\n213-// It constructs the configuration based on the provided parameters and the model type.\n214-//\n215-// If the url parameter is non-empty, the function uses it directly with an \"Authorization\" header.\n--\n510-\n511-\t// Build Azure OpenAI dispatchers and endpoints\n512:\taoaidispatchers := azure.BuildAOAIDispatchers(azureConfig)\n513:\taoaifallback := azure.BuildAOAIFallback(azureConfig)\n514:\tassistantsAPI := azure.BuildAssistantsAPI(azureConfig)\n515:\tazurecognitive, sttxy, customvoice := azure.BuildCognitiveEndpoints(azureConfig)\n516-\n517-\tbedrockendpoint := make(map[string]*dispatcher.Endpoint)\n518-\n519-\t// AOAI configuration now handled by azure package\n520-\t// The following overrides the aoaidispatchers built from azure package if needed","numLines":20}}
{"parentUuid":"03e75b0b-e361-4ad1-981f-71585fa23d2e","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01G7GWG5aMw7HMq1bFdygSkA","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01Fx2iKwZtQxyig6L1Bfn3u7","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine the new Azure package structure and files","status":"completed"},{"id":"2","content":"Review the refactored Azure OpenAI spend functions","status":"completed"},{"id":"3","content":"Check how the main.go file was modified","status":"completed"},{"id":"4","content":"Understand the test coverage for the new Azure package","status":"in_progress"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":485,"cache_read_input_tokens":40359,"output_tokens":165}},"type":"assistant","uuid":"f925542d-2e61-464c-801c-b0e5590a59f6","timestamp":"2025-08-23T09:18:28.307Z"}
{"parentUuid":"f925542d-2e61-464c-801c-b0e5590a59f6","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01Fx2iKwZtQxyig6L1Bfn3u7","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"a32f2ffb-29ec-47d3-9f99-69a7d6669dba","timestamp":"2025-08-23T09:18:28.321Z","toolUseResult":{"oldTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"in_progress","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"pending","id":"4"}],"newTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"completed","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"in_progress","id":"4"}]}}
{"parentUuid":"a32f2ffb-29ec-47d3-9f99-69a7d6669dba","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_011xxSaqiLXUPsixnpx9iCpi","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_019xpUGbAWroMD1MbPbtiPxH","name":"Read","input":{"file_path":"/Users/mtk19651/project/azure-gateway/azure/models_test.go"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":347,"cache_read_input_tokens":40844,"output_tokens":73}},"type":"assistant","uuid":"5f149da5-785a-4986-b733-60d34f5530cb","timestamp":"2025-08-23T09:18:35.556Z"}
{"parentUuid":"5f149da5-785a-4986-b733-60d34f5530cb","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_019xpUGbAWroMD1MbPbtiPxH","type":"tool_result","content":"     1→package azure\n     2→\n     3→import (\n     4→\t\"testing\"\n     5→)\n     6→\n     7→func TestGetModelConfig(t *testing.T) {\n     8→\ttests := []struct {\n     9→\t\tname      string\n    10→\t\tmodelName string\n    11→\t\twantFound bool\n    12→\t}{\n    13→\t\t{\n    14→\t\t\tname:      \"GPT-4 Turbo model exists\",\n    15→\t\t\tmodelName: \"aide-gpt-4-turbo\",\n    16→\t\t\twantFound: true,\n    17→\t\t},\n    18→\t\t{\n    19→\t\t\tname:      \"GPT-4o model exists\",\n    20→\t\t\tmodelName: \"aide-gpt-4o\",\n    21→\t\t\twantFound: true,\n    22→\t\t},\n    23→\t\t{\n    24→\t\t\tname:      \"O3 model exists\",\n    25→\t\t\tmodelName: \"aide-o3\",\n    26→\t\t\twantFound: true,\n    27→\t\t},\n    28→\t\t{\n    29→\t\t\tname:      \"DALL-E 3 model exists\",\n    30→\t\t\tmodelName: \"Dalle3\",\n    31→\t\t\twantFound: true,\n    32→\t\t},\n    33→\t\t{\n    34→\t\t\tname:      \"Non-existent model\",\n    35→\t\t\tmodelName: \"non-existent-model\",\n    36→\t\t\twantFound: false,\n    37→\t\t},\n    38→\t}\n    39→\n    40→\tfor _, tt := range tests {\n    41→\t\tt.Run(tt.name, func(t *testing.T) {\n    42→\t\t\tconfig, found := GetModelConfig(tt.modelName)\n    43→\t\t\tif found != tt.wantFound {\n    44→\t\t\t\tt.Errorf(\"GetModelConfig(%s) found = %v, want %v\", tt.modelName, found, tt.wantFound)\n    45→\t\t\t}\n    46→\t\t\tif found && config.Name == \"\" {\n    47→\t\t\t\tt.Errorf(\"GetModelConfig(%s) returned config with empty name\", tt.modelName)\n    48→\t\t\t}\n    49→\t\t})\n    50→\t}\n    51→}\n    52→\n    53→func TestIsPTUEnabled(t *testing.T) {\n    54→\ttests := []struct {\n    55→\t\tname   string\n    56→\t\tmodel  string\n    57→\t\tregion string\n    58→\t\twant   bool\n    59→\t}{\n    60→\t\t{\n    61→\t\t\tname:   \"PTU enabled for aide-gpt-4.1 in Japan\",\n    62→\t\t\tmodel:  \"aide-gpt-4.1\",\n    63→\t\t\tregion: \"aideopenaijapaneast\",\n    64→\t\t\twant:   true,\n    65→\t\t},\n    66→\t\t{\n    67→\t\t\tname:   \"PTU disabled for aide-gpt-4.1 in other region\",\n    68→\t\t\tmodel:  \"aide-gpt-4.1\",\n    69→\t\t\tregion: \"aideopenaieastus2\",\n    70→\t\t\twant:   false,\n    71→\t\t},\n    72→\t\t{\n    73→\t\t\tname:   \"PTU disabled for other model in Japan\",\n    74→\t\t\tmodel:  \"aide-gpt-4o\",\n    75→\t\t\tregion: \"aideopenaijapaneast\",\n    76→\t\t\twant:   false,\n    77→\t\t},\n    78→\t\t{\n    79→\t\t\tname:   \"PTU disabled for other model in other region\",\n    80→\t\t\tmodel:  \"aide-gpt-4o\",\n    81→\t\t\tregion: \"aideopenaieastus2\",\n    82→\t\t\twant:   false,\n    83→\t\t},\n    84→\t}\n    85→\n    86→\tfor _, tt := range tests {\n    87→\t\tt.Run(tt.name, func(t *testing.T) {\n    88→\t\t\tif got := IsPTUEnabled(tt.model, tt.region); got != tt.want {\n    89→\t\t\t\tt.Errorf(\"IsPTUEnabled(%s, %s) = %v, want %v\", tt.model, tt.region, got, tt.want)\n    90→\t\t\t}\n    91→\t\t})\n    92→\t}\n    93→}\n    94→\n    95→func TestModelDeploymentConfigurations(t *testing.T) {\n    96→\t// Test that all models have at least one region configured\n    97→\tfor modelName, deployment := range ModelDeployments {\n    98→\t\tif len(deployment.Regions) == 0 {\n    99→\t\t\tt.Errorf(\"Model %s has no regions configured\", modelName)\n   100→\t\t}\n   101→\t\t\n   102→\t\t// Check that model name matches the map key (except for special cases)\n   103→\t\tif modelName != \"Dalle3\" && modelName != \"dalle\" && modelName != \"dalleget\" {\n   104→\t\t\tif deployment.Name != modelName {\n   105→\t\t\t\tt.Errorf(\"Model key %s doesn't match config name %s\", modelName, deployment.Name)\n   106→\t\t\t}\n   107→\t\t}\n   108→\t\t\n   109→\t\t// Verify that embedding models don't have cap settings\n   110→\t\tif deployment.IsEmbedding && deployment.CapGPT4 {\n   111→\t\t\tt.Errorf(\"Embedding model %s should not have CapGPT4 enabled\", modelName)\n   112→\t\t}\n   113→\t\t\n   114→\t\t// Verify rate configuration for non-special models\n   115→\t\tif !deployment.IsWhisper && !deployment.IsTTS && !deployment.IsRealtime && !deployment.IsDalle {\n   116→\t\t\tif deployment.InputRate == 0 || deployment.OutputRate == 0 {\n   117→\t\t\t\tt.Errorf(\"Model %s missing rate configuration\", modelName)\n   118→\t\t\t}\n   119→\t\t}\n   120→\t}\n   121→}\n   122→\n   123→func TestRegionWeights(t *testing.T) {\n   124→\t// Test that all region weights are positive\n   125→\tfor modelName, deployment := range ModelDeployments {\n   126→\t\tfor _, region := range deployment.Regions {\n   127→\t\t\tif region.Weight <= 0 {\n   128→\t\t\t\tt.Errorf(\"Model %s region %s has non-positive weight: %d\", modelName, region.Name, region.Weight)\n   129→\t\t\t}\n   130→\t\t\tif region.Name == \"\" {\n   131→\t\t\t\tt.Errorf(\"Model %s has a region with empty name\", modelName)\n   132→\t\t\t}\n   133→\t\t}\n   134→\t}\n   135→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"6f8caca5-2b57-471e-acb8-12c02b3ea6d9","timestamp":"2025-08-23T09:18:35.569Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/mtk19651/project/azure-gateway/azure/models_test.go","content":"package azure\n\nimport (\n\t\"testing\"\n)\n\nfunc TestGetModelConfig(t *testing.T) {\n\ttests := []struct {\n\t\tname      string\n\t\tmodelName string\n\t\twantFound bool\n\t}{\n\t\t{\n\t\t\tname:      \"GPT-4 Turbo model exists\",\n\t\t\tmodelName: \"aide-gpt-4-turbo\",\n\t\t\twantFound: true,\n\t\t},\n\t\t{\n\t\t\tname:      \"GPT-4o model exists\",\n\t\t\tmodelName: \"aide-gpt-4o\",\n\t\t\twantFound: true,\n\t\t},\n\t\t{\n\t\t\tname:      \"O3 model exists\",\n\t\t\tmodelName: \"aide-o3\",\n\t\t\twantFound: true,\n\t\t},\n\t\t{\n\t\t\tname:      \"DALL-E 3 model exists\",\n\t\t\tmodelName: \"Dalle3\",\n\t\t\twantFound: true,\n\t\t},\n\t\t{\n\t\t\tname:      \"Non-existent model\",\n\t\t\tmodelName: \"non-existent-model\",\n\t\t\twantFound: false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tconfig, found := GetModelConfig(tt.modelName)\n\t\t\tif found != tt.wantFound {\n\t\t\t\tt.Errorf(\"GetModelConfig(%s) found = %v, want %v\", tt.modelName, found, tt.wantFound)\n\t\t\t}\n\t\t\tif found && config.Name == \"\" {\n\t\t\t\tt.Errorf(\"GetModelConfig(%s) returned config with empty name\", tt.modelName)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestIsPTUEnabled(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tmodel  string\n\t\tregion string\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"PTU enabled for aide-gpt-4.1 in Japan\",\n\t\t\tmodel:  \"aide-gpt-4.1\",\n\t\t\tregion: \"aideopenaijapaneast\",\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"PTU disabled for aide-gpt-4.1 in other region\",\n\t\t\tmodel:  \"aide-gpt-4.1\",\n\t\t\tregion: \"aideopenaieastus2\",\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"PTU disabled for other model in Japan\",\n\t\t\tmodel:  \"aide-gpt-4o\",\n\t\t\tregion: \"aideopenaijapaneast\",\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"PTU disabled for other model in other region\",\n\t\t\tmodel:  \"aide-gpt-4o\",\n\t\t\tregion: \"aideopenaieastus2\",\n\t\t\twant:   false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := IsPTUEnabled(tt.model, tt.region); got != tt.want {\n\t\t\t\tt.Errorf(\"IsPTUEnabled(%s, %s) = %v, want %v\", tt.model, tt.region, got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestModelDeploymentConfigurations(t *testing.T) {\n\t// Test that all models have at least one region configured\n\tfor modelName, deployment := range ModelDeployments {\n\t\tif len(deployment.Regions) == 0 {\n\t\t\tt.Errorf(\"Model %s has no regions configured\", modelName)\n\t\t}\n\t\t\n\t\t// Check that model name matches the map key (except for special cases)\n\t\tif modelName != \"Dalle3\" && modelName != \"dalle\" && modelName != \"dalleget\" {\n\t\t\tif deployment.Name != modelName {\n\t\t\t\tt.Errorf(\"Model key %s doesn't match config name %s\", modelName, deployment.Name)\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Verify that embedding models don't have cap settings\n\t\tif deployment.IsEmbedding && deployment.CapGPT4 {\n\t\t\tt.Errorf(\"Embedding model %s should not have CapGPT4 enabled\", modelName)\n\t\t}\n\t\t\n\t\t// Verify rate configuration for non-special models\n\t\tif !deployment.IsWhisper && !deployment.IsTTS && !deployment.IsRealtime && !deployment.IsDalle {\n\t\t\tif deployment.InputRate == 0 || deployment.OutputRate == 0 {\n\t\t\t\tt.Errorf(\"Model %s missing rate configuration\", modelName)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestRegionWeights(t *testing.T) {\n\t// Test that all region weights are positive\n\tfor modelName, deployment := range ModelDeployments {\n\t\tfor _, region := range deployment.Regions {\n\t\t\tif region.Weight <= 0 {\n\t\t\t\tt.Errorf(\"Model %s region %s has non-positive weight: %d\", modelName, region.Name, region.Weight)\n\t\t\t}\n\t\t\tif region.Name == \"\" {\n\t\t\t\tt.Errorf(\"Model %s has a region with empty name\", modelName)\n\t\t\t}\n\t\t}\n\t}\n}","numLines":135,"startLine":1,"totalLines":135}}}
{"parentUuid":"6f8caca5-2b57-471e-acb8-12c02b3ea6d9","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01BbQ29zHdVPozdRfyTQbVHS","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01L6Dgw5Jh3iW9DuPtV98iPP","name":"Bash","input":{"command":"go test ./azure -v","description":"Run Azure package tests"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1835,"cache_read_input_tokens":41191,"output_tokens":92}},"type":"assistant","uuid":"b5b5f970-4530-4c71-9e4b-e12ee5b855ee","timestamp":"2025-08-23T09:18:44.153Z"}
{"parentUuid":"b5b5f970-4530-4c71-9e4b-e12ee5b855ee","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01L6Dgw5Jh3iW9DuPtV98iPP","type":"tool_result","content":"=== RUN   TestRegexOseriesModel\n=== RUN   TestRegexOseriesModel/o3-mini_should_match\n=== RUN   TestRegexOseriesModel/o1_should_match\n=== RUN   TestRegexOseriesModel/o1-preview_should_match\n=== RUN   TestRegexOseriesModel/o1-mini_should_match\n=== RUN   TestRegexOseriesModel/o2_should_not_match\n=== RUN   TestRegexOseriesModel/gpt-4_should_not_match\n=== RUN   TestRegexOseriesModel/o3_should_not_match\n=== RUN   TestRegexOseriesModel/empty_string_should_not_match\n=== RUN   TestRegexOseriesModel/aide-o3_should_match\n=== RUN   TestRegexOseriesModel/aide-o3-pro_should_match\n=== RUN   TestRegexOseriesModel/aide-o4-mini_should_match\n=== RUN   TestRegexOseriesModel/aide-o5_should_not_match\n--- PASS: TestRegexOseriesModel (0.00s)\n    --- PASS: TestRegexOseriesModel/o3-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1-preview_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o2_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/gpt-4_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o3_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/empty_string_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o3_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o3-pro_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o4-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o5_should_not_match (0.00s)\n=== RUN   TestGetModelConfig\n=== RUN   TestGetModelConfig/GPT-4_Turbo_model_exists\n=== RUN   TestGetModelConfig/GPT-4o_model_exists\n=== RUN   TestGetModelConfig/O3_model_exists\n=== RUN   TestGetModelConfig/DALL-E_3_model_exists\n=== RUN   TestGetModelConfig/Non-existent_model\n--- PASS: TestGetModelConfig (0.00s)\n    --- PASS: TestGetModelConfig/GPT-4_Turbo_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/GPT-4o_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/O3_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/DALL-E_3_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/Non-existent_model (0.00s)\n=== RUN   TestIsPTUEnabled\n=== RUN   TestIsPTUEnabled/PTU_enabled_for_aide-gpt-4.1_in_Japan\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_aide-gpt-4.1_in_other_region\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_other_model_in_Japan\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_other_model_in_other_region\n--- PASS: TestIsPTUEnabled (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_enabled_for_aide-gpt-4.1_in_Japan (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_aide-gpt-4.1_in_other_region (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_other_model_in_Japan (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_other_model_in_other_region (0.00s)\n=== RUN   TestModelDeploymentConfigurations\n--- PASS: TestModelDeploymentConfigurations (0.00s)\n=== RUN   TestRegionWeights\n--- PASS: TestRegionWeights (0.00s)\nPASS\nok  \tgitea.mediatek.inc/davinci/azure-gateway/azure\t0.396s","is_error":false}]},"uuid":"e9c6de63-c00d-4c6f-bd64-211483bf8aa9","timestamp":"2025-08-23T09:18:48.795Z","toolUseResult":{"stdout":"=== RUN   TestRegexOseriesModel\n=== RUN   TestRegexOseriesModel/o3-mini_should_match\n=== RUN   TestRegexOseriesModel/o1_should_match\n=== RUN   TestRegexOseriesModel/o1-preview_should_match\n=== RUN   TestRegexOseriesModel/o1-mini_should_match\n=== RUN   TestRegexOseriesModel/o2_should_not_match\n=== RUN   TestRegexOseriesModel/gpt-4_should_not_match\n=== RUN   TestRegexOseriesModel/o3_should_not_match\n=== RUN   TestRegexOseriesModel/empty_string_should_not_match\n=== RUN   TestRegexOseriesModel/aide-o3_should_match\n=== RUN   TestRegexOseriesModel/aide-o3-pro_should_match\n=== RUN   TestRegexOseriesModel/aide-o4-mini_should_match\n=== RUN   TestRegexOseriesModel/aide-o5_should_not_match\n--- PASS: TestRegexOseriesModel (0.00s)\n    --- PASS: TestRegexOseriesModel/o3-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1-preview_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o1-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o2_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/gpt-4_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/o3_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/empty_string_should_not_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o3_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o3-pro_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o4-mini_should_match (0.00s)\n    --- PASS: TestRegexOseriesModel/aide-o5_should_not_match (0.00s)\n=== RUN   TestGetModelConfig\n=== RUN   TestGetModelConfig/GPT-4_Turbo_model_exists\n=== RUN   TestGetModelConfig/GPT-4o_model_exists\n=== RUN   TestGetModelConfig/O3_model_exists\n=== RUN   TestGetModelConfig/DALL-E_3_model_exists\n=== RUN   TestGetModelConfig/Non-existent_model\n--- PASS: TestGetModelConfig (0.00s)\n    --- PASS: TestGetModelConfig/GPT-4_Turbo_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/GPT-4o_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/O3_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/DALL-E_3_model_exists (0.00s)\n    --- PASS: TestGetModelConfig/Non-existent_model (0.00s)\n=== RUN   TestIsPTUEnabled\n=== RUN   TestIsPTUEnabled/PTU_enabled_for_aide-gpt-4.1_in_Japan\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_aide-gpt-4.1_in_other_region\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_other_model_in_Japan\n=== RUN   TestIsPTUEnabled/PTU_disabled_for_other_model_in_other_region\n--- PASS: TestIsPTUEnabled (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_enabled_for_aide-gpt-4.1_in_Japan (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_aide-gpt-4.1_in_other_region (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_other_model_in_Japan (0.00s)\n    --- PASS: TestIsPTUEnabled/PTU_disabled_for_other_model_in_other_region (0.00s)\n=== RUN   TestModelDeploymentConfigurations\n--- PASS: TestModelDeploymentConfigurations (0.00s)\n=== RUN   TestRegionWeights\n--- PASS: TestRegionWeights (0.00s)\nPASS\nok  \tgitea.mediatek.inc/davinci/azure-gateway/azure\t0.396s","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"e9c6de63-c00d-4c6f-bd64-211483bf8aa9","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01Jr7fwJbVW4knkNKBhWjpXx","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01PhpAgsUYZ1AchGswjjwMGg","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine the new Azure package structure and files","status":"completed"},{"id":"2","content":"Review the refactored Azure OpenAI spend functions","status":"completed"},{"id":"3","content":"Check how the main.go file was modified","status":"completed"},{"id":"4","content":"Understand the test coverage for the new Azure package","status":"completed"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1368,"cache_read_input_tokens":43026,"output_tokens":163}},"type":"assistant","uuid":"877ea0f5-b59d-40b6-b339-ef2d51226b21","timestamp":"2025-08-23T09:19:00.672Z"}
{"parentUuid":"877ea0f5-b59d-40b6-b339-ef2d51226b21","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01PhpAgsUYZ1AchGswjjwMGg","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"05f96673-51cc-4547-b2cd-5ba1e92d6f44","timestamp":"2025-08-23T09:19:00.702Z","toolUseResult":{"oldTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"completed","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"in_progress","id":"4"}],"newTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"completed","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"completed","id":"4"}]}}
{"parentUuid":"05f96673-51cc-4547-b2cd-5ba1e92d6f44","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01BoShG8PHJsawoyFHzPg6i3","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"## Summary\n\nThe Azure gateway project has been successfully refactored to extract Azure OpenAI functionality into a reusable `azure` package. Here's what was done:\n\n### New Azure Package Structure\n\nThe new `azure/` package contains:\n- **azure.go**: Core constants (API versions, O-series model regex)\n- **config.go**: Configuration builders for dispatchers and endpoints\n- **models.go**: Complete model configurations with pricing and regional deployments\n- **spendfn.go**: Spend calculation functions for different service types\n- **utils.go**: Environment variable utilities\n- **models_test.go**: Comprehensive test coverage\n\n### Key Refactoring Changes\n\n1. **Centralized Model Configuration**: All Azure OpenAI models (GPT-4, GPT-4o, O-series, DALL-E, Whisper, TTS) are now defined in `ModelDeployments` map with consistent structure\n\n2. **Builder Pattern**: Main.go now uses clean builder functions:\n   - `azure.BuildAOAIDispatchers()` - Creates all model dispatchers\n   - `azure.BuildAOAIFallback()` - Creates fallback endpoint  \n   - `azure.BuildAssistantsAPI()` - Creates Assistants API endpoint\n   - `azure.BuildCognitiveEndpoints()` - Creates cognitive service endpoints\n\n3. **Spend Functions**: Extracted and organized spend calculation logic:\n   - `AoaiSpendFn()` - Regular token-based models\n   - `DalleSpendFn()` - Image generation\n   - `WhisperSpendFn()` - Speech-to-text\n   - `TTSSpendFn()` - Text-to-speech  \n   - `RealtimeSpendFn()` - Realtime models\n   - `AssistantsSpendFn()` - Assistants API\n\n4. **Configuration Management**: Clean separation of concerns with `Config` struct containing all dependencies (transport, logger, Crowd API, quota client, tokenizers)\n\n### Benefits\n\n- **Reusability**: Azure OpenAI functionality can now be imported by other projects\n- **Maintainability**: Model configurations centralized in one place\n- **Testability**: Comprehensive test coverage for model configurations and PTU logic\n- **Extensibility**: Easy to add new models by updating `ModelDeployments` map\n\nThe refactoring maintains backward compatibility while significantly improving code organization and reusability."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":343,"cache_read_input_tokens":44394,"output_tokens":567}},"type":"assistant","uuid":"1a9e6b39-ce01-4b7f-93f9-47fd6fca214e","timestamp":"2025-08-23T09:19:36.388Z"}
{"parentUuid":"1a9e6b39-ce01-4b7f-93f9-47fd6fca214e","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":"@cmd/mlop-azure-gateway/main.go 為什麼把很多function註解掉了"},"uuid":"916374d2-ddd1-4423-a659-bd7569c29c38","timestamp":"2025-08-23T09:21:43.064Z"}
{"parentUuid":"916374d2-ddd1-4423-a659-bd7569c29c38","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01PYAaS3HdfW4cPK34Puc9vM","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"在 `main.go` 中看到大段被註解掉的原因是因為這些功能已經被重構並移到了新的 `azure` package 中。讓我解釋具體的變化：\n\n## 被註解掉的部分\n\n### 1. **輔助函數** (行 211-351)\n```go\n// aoaiWithKey - 建立 Azure OpenAI endpoint 配置\n// aoai - 簡化版本的 aoaiWithKey\n// aoaiNoReqLog - 不記錄請求的版本\n// aoaiSpend - 費用計算函數\n```\n這些函數現在被移到 `azure` package：\n- `aoaiWithKey` → `azure.BuildAOAIEndpointConfig`\n- `aoaiSpend` → `azure.AoaiSpendFn`\n\n### 2. **硬編碼的 Dispatcher 配置** (行 523-751)\n這是最大的被註解部分，包含所有 Azure OpenAI 模型的硬編碼配置。現在改為：\n```go\n// 舊方式（被註解）\naoaidispatchers = map[string]*dispatcher.Dispatcher{\n    \"aide-gpt-4-turbo\": dispatcher.NewDispatcher(...),\n    // ... 幾十個模型的硬編碼配置\n}\n\n// 新方式（行 512）\naoaidispatchers := azure.BuildAOAIDispatchers(azureConfig)\n```\n\n## 重構的好處\n\n1. **集中管理**：所有 Azure OpenAI 配置現在在 `azure/models.go` 的 `ModelDeployments` map 中統一管理\n\n2. **更容易維護**：\n   - 添加新模型只需更新 `ModelDeployments`\n   - 價格、區域、權重等配置在一個地方\n\n3. **程式碼重用**：其他專案可以 import `azure` package 來使用這些配置\n\n4. **減少重複**：建立 endpoint 和 dispatcher 的邏輯現在封裝在 builder 函數中\n\n## 為什麼保留註解？\n\n註解中有這樣的說明（行 519-521）：\n```go\n// AOAI configuration now handled by azure package\n// The following overrides the aoaidispatchers built from azure package if needed\n// Remove this block once verified the azure package configuration works correctly\n```\n\n這表示團隊正在進行漸進式遷移：\n1. 新的 azure package 已經實作並使用中\n2. 舊代碼被保留作為備份，以防新實作有問題\n3. 一旦確認新實作穩定運行，將會移除這些註解\n\n這是一個謹慎的重構策略，確保在完全移除舊代碼前，新的實作已經被充分測試和驗證。"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":36546,"cache_read_input_tokens":44737,"output_tokens":781}},"type":"assistant","uuid":"c601c500-7db0-4f4f-a9d3-4cf6dca70e15","timestamp":"2025-08-23T09:22:34.383Z"}
{"parentUuid":"c601c500-7db0-4f4f-a9d3-4cf6dca70e15","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":"好請幫我再確認一下, 若是新的架構沒問題, 就幫我移除掉註解"},"uuid":"80a41745-25a9-4c28-9a0e-933618f3e256","timestamp":"2025-08-23T09:25:01.479Z"}
{"parentUuid":"80a41745-25a9-4c28-9a0e-933618f3e256","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01EAjPyii79VNGd1XsgomDEG","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"我來幫你確認新架構並移除註解。首先讓我檢查新舊配置是否一致。"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":819,"cache_read_input_tokens":81283,"output_tokens":3}},"type":"assistant","uuid":"d6e058ce-88e9-482c-83bc-fba2dbec30f7","timestamp":"2025-08-23T09:25:09.359Z"}
{"parentUuid":"d6e058ce-88e9-482c-83bc-fba2dbec30f7","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01EAjPyii79VNGd1XsgomDEG","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01M26osgfMEdxA8yvVV4oFLN","name":"TodoWrite","input":{"todos":[{"id":"1","content":"驗證新的 azure package 配置與註解中的舊配置一致","status":"in_progress"},{"id":"2","content":"移除 main.go 中已被取代的註解代碼","status":"pending"},{"id":"3","content":"確認程式運行正常","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":819,"cache_read_input_tokens":81283,"output_tokens":192}},"type":"assistant","uuid":"8533fb18-5a9e-4bc0-9878-85ee485a2b38","timestamp":"2025-08-23T09:25:15.292Z"}
{"parentUuid":"8533fb18-5a9e-4bc0-9878-85ee485a2b38","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01M26osgfMEdxA8yvVV4oFLN","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2d382530-517e-4c51-b2bb-74e5c7a657eb","timestamp":"2025-08-23T09:25:15.308Z","toolUseResult":{"oldTodos":[{"content":"Examine the new Azure package structure and files","status":"completed","id":"1"},{"content":"Review the refactored Azure OpenAI spend functions","status":"completed","id":"2"},{"content":"Check how the main.go file was modified","status":"completed","id":"3"},{"content":"Understand the test coverage for the new Azure package","status":"completed","id":"4"}],"newTodos":[{"content":"驗證新的 azure package 配置與註解中的舊配置一致","status":"in_progress","id":"1"},{"content":"移除 main.go 中已被取代的註解代碼","status":"pending","id":"2"},{"content":"確認程式運行正常","status":"pending","id":"3"}]}}
{"parentUuid":"2d382530-517e-4c51-b2bb-74e5c7a657eb","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01XnxwuScseDLLCvk66h4zBs","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_017kRjJaaupD4GPfFXebsctn","name":"Grep","input":{"pattern":"aoaiSpend|aoaiWithKey|aoai\\(|aoaiNoReqLog","path":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","output_mode":"content","-n":true}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":499,"cache_read_input_tokens":82102,"output_tokens":151}},"type":"assistant","uuid":"e0cbae1a-c23d-4ffd-8762-e4daab49418f","timestamp":"2025-08-23T09:25:26.846Z"}
{"parentUuid":"e0cbae1a-c23d-4ffd-8762-e4daab49418f","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_017kRjJaaupD4GPfFXebsctn","type":"tool_result","content":"212:// aoaiWithKey initializes an endpoint configuration for Azure OpenAI API calls.\n250:func aoaiWithKey(weight int, name, model, key, url string) dispatcher.EndpointConfig {\n333:func aoai(weight int, name, model string) dispatcher.EndpointConfig {\n334:\treturn aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n337:func aoaiNoReqLog(weight int, name, model string) dispatcher.EndpointConfig {\n338:\tconfig := aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n347:// aoaiSpend is a wrapper function that calls azure.AoaiSpendFn\n348:func aoaiSpend(model string, capgpt4 bool, crowdapi crowdadapter.Adapter, qc quota.QuotaClient, smtpserver string, encoder *tiktoken.Tiktoken, promptrate, completionrate int) common.SpendFn {\n524:\t\t\"aide-gpt-4-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n525:\t\t\taoai(480, \"aideopenaicanadaeast\", \"aide-gpt-4-turbo\"),\n526:\t\t\taoai(480, \"aideopenaieastus2\", \"aide-gpt-4-turbo\"),\n527:\t\t\taoai(480, \"aideopenaifrancecentral\", \"aide-gpt-4-turbo\"),\n528:\t\t\taoai(900, \"aideopenainorwayeast\", \"aide-gpt-4-turbo\"),\n529:\t\t\taoai(900, \"aideopenaisouthindia\", \"aide-gpt-4-turbo\"),\n530:\t\t\taoai(480, \"aideopenaiwestus\", \"aide-gpt-4-turbo\"),\n531:\t\t\taoai(900, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo\"),\n532:\t\t\taoai(480, \"aideopenaiuksouth\", \"aide-gpt-4-turbo\"),\n533:\t\t\taoai(480, \"aideopenainorthcentralus\", \"aide-gpt-4-turbo\"),\n534:\t\t\taoai(480, \"aideopenaisouthcentralus\", \"aide-gpt-4-turbo\"),\n535:\t\t\taoai(480, \"aideopenaieastus\", \"aide-gpt-4-turbo\"),\n538:\t\t\"aide-gpt-4-turbo-1106\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-1106\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n539:\t\t\taoai(5000, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-1106\"),\n542:\t\t\"aide-gpt-4o-0806\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-0806\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n543:\t\t\taoai(5000, \"aideopenaieastus\", \"aide-gpt-4o-0806\"),\n545:\t\t\"aide-gpt-4o\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n546:\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o\"),\n547:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o\"),\n548:\t\t\taoai(60000, \"aideopenaiwestus\", \"aide-gpt-4o\"),\n549:\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4o\"),\n550:\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4o\"),\n551:\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o\"),\n552:\t\t\taoai(60000, \"aideopenaiwestus3\", \"aide-gpt-4o\"),\n554:\t\t\"aide-gpt-4o-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-mini\", true, crowdapi, qc, smtpserver, cl100k, 15, 60), []dispatcher.EndpointConfig{\n555:\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o-mini\"),\n556:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4o-mini\"),\n557:\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o-mini\"),\n558:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o-mini\"),\n560:\t\t\"aide-gpt-4.1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n561:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1\"),\n562:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1\"),\n563:\t\t\taoai(600000, \"aideopenaijapaneast\", \"aide-gpt-4.1\"),\n564:\t\t\taoai(60000, \"aideopenaicanadaeast\", \"aide-gpt-4.1\"),\n565:\t\t\taoai(60000, \"aideopenaiaustraliaeast\", \"aide-gpt-4.1\"),\n566:\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4.1\"),\n567:\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4.1\"),\n569:\t\t\"aide-gpt-4.1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-mini\", true, crowdapi, qc, smtpserver, cl100k, 40, 160), []dispatcher.EndpointConfig{\n570:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-mini\"),\n571:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-mini\"),\n573:\t\t\"aide-gpt-4.1-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-nano\", true, crowdapi, qc, smtpserver, cl100k, 10, 40), []dispatcher.EndpointConfig{\n574:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-nano\"),\n575:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-nano\"),\n577:\t\t\"aide-gpt-5\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n578:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5\"),\n579:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5\"),\n581:\t\t\"aide-gpt-5-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-mini\", true, crowdapi, qc, smtpserver, cl100k, 250, 200), []dispatcher.EndpointConfig{\n582:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-mini\"),\n583:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-mini\"),\n585:\t\t\"aide-gpt-5-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-nano\", true, crowdapi, qc, smtpserver, cl100k, 5, 40), []dispatcher.EndpointConfig{\n586:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-nano\"),\n587:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-nano\"),\n589:\t\t\"aide-gpt-5-chat\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-chat\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n590:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-chat\"),\n591:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-chat\"),\n593:\t\t\"aide-o1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-mini\", true, crowdapi, qc, smtpserver, cl100k, 300, 1200), []dispatcher.EndpointConfig{\n594:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-mini\"),\n595:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-mini\"),\n597:\t\t\"aide-o1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n598:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1\"),\n599:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1\"),\n602:\t\t\"aide-o1-preview\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-preview\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n603:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-preview\"),\n604:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-preview\"),\n606:\t\t\"aide-o3-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n607:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-mini\"),\n608:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-mini\"),\n610:\t\t\"aide-o3\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n611:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3\"),\n612:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3\"),\n614:\t\t\"aide-o3-pro\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-pro\", true, crowdapi, qc, smtpserver, cl100k, 2000, 8000), []dispatcher.EndpointConfig{\n615:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-pro\"),\n616:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-pro\"),\n618:\t\t\"aide-o4-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o4-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n619:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o4-mini\"),\n620:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o4-mini\"),\n622:\t\t\"aide-gpt-4-turbo-vision\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-vision\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n623:\t\t\taoai(10, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-vision\"),\n624:\t\t\taoai(10, \"aideopenaiwestus\", \"aide-gpt-4-turbo-vision\"),\n625:\t\t\taoai(10, \"aideopenaiswitzerlandnorth\", \"aide-gpt-4-turbo-vision\"),\n626:\t\t\taoai(10, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo-vision\"),\n628:\t\t\"aide-gpt-35-turbo-16k-4k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k-4k\", true, crowdapi, qc, smtpserver, cl100k, 100, 200), []dispatcher.EndpointConfig{\n629:\t\t\taoai(720, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n630:\t\t\taoai(3720, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n631:\t\t\taoai(720, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k-4k\"),\n632:\t\t\taoai(720, \"aideopenaisouthindia\", \"aide-gpt-35-turbo-16k-4k\"),\n633:\t\t\taoai(720, \"aideopenaiwestus\", \"aide-gpt-35-turbo-16k-4k\"),\n634:\t\t\taoai(720, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k-4k\"),\n635:\t\t\taoai(720, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k-4k\"),\n636:\t\t\taoai(1800, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n637:\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n639:\t\t\"aide-gpt-35-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n640:\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo\"),\n641:\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo\"),\n642:\t\t\taoai(1440, \"aideopenaiuksouth\", \"aide-gpt-35-turbo\"),\n643:\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo\"),\n644:\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo\"),\n645:\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo\"),\n646:\t\t\taoai(1800, \"aideopenaieastus2\", \"aide-gpt-35-turbo\"),\n647:\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo\"),\n648:\t\t\taoai(3000, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo\"),\n649:\t\t\taoai(3000, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo\"),\n650:\t\t\taoai(1800, \"aideopenaieastus\", \"aide-gpt-35-turbo\"),\n652:\t\t\"aide-gpt-35-turbo-instruct\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-instruct\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n653:\t\t\taoai(1440, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-instruct\"),\n654:\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-instruct\"),\n656:\t\t\"aide-gpt-35-turbo-16k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k\", false, crowdapi, qc, smtpserver, cl100k, 300, 400), []dispatcher.EndpointConfig{\n657:\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k\"),\n658:\t\t\taoai(3000, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k\"),\n659:\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k\"),\n660:\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo-16k\"),\n661:\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k\"),\n662:\t\t\taoai(3000, \"aideopenaieastus2\", \"aide-gpt-35-turbo-16k\"),\n663:\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k\"),\n664:\t\t\taoai(1800, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo-16k\"),\n665:\t\t\taoai(1800, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k\"),\n666:\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-16k\"),\n668:\t\t\"aide-text-embedding-3-large\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-large\", false, crowdapi, qc, smtpserver, cl100k, 13, 13), []dispatcher.EndpointConfig{\n669:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-large\"),\n670:\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-large\"),\n671:\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-large\"),\n672:\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-3-large\"),\n673:\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-3-large\"),\n674:\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-3-large\"),\n675:\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-3-large\"),\n676:\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-3-large\"),\n677:\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-3-large\"),\n679:\t\t\"aide-text-embedding-3-small\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-small\", false, crowdapi, qc, smtpserver, cl100k, 2, 2), []dispatcher.EndpointConfig{\n680:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-small\"),\n681:\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-small\"),\n682:\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-small\"),\n684:\t\t\"aide-text-embedding-ada-002-v2\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002-v2\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n685:\t\t\taoai(4200, \"aideopenaiwesteurope\", \"aide-text-embedding-ada-002-v2\"),\n686:\t\t\taoai(4200, \"aideopenaieastus2\", \"aide-text-embedding-ada-002-v2\"),\n687:\t\t\taoai(4200, \"aideopenaisouthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n688:\t\t\taoai(2100, \"aideopenaiaustraliaeast\", \"aide-text-embedding-ada-002-v2\"),\n689:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-ada-002-v2\"),\n690:\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-ada-002-v2\"),\n691:\t\t\taoai(2100, \"aideopenaiswitzerlandnorth\", \"aide-text-embedding-ada-002-v2\"),\n692:\t\t\taoai(2100, \"aideopenainorthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n693:\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-ada-002-v2\"),\n694:\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-ada-002-v2\"),\n695:\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-ada-002-v2\"),\n696:\t\t\taoai(1380, \"aideopenaieastus\", \"aide-text-embedding-ada-002-v2\"),\n697:\t\t\taoai(2100, \"aideopenaiwestus\", \"aide-text-embedding-ada-002-v2\"),\n698:\t\t\taoai(2100, \"aideopenainorwayeast\", \"aide-text-embedding-ada-002-v2\"),\n699:\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-ada-002-v2\"),\n700:\t\t\taoai(2100, \"aideopenaisouthafricanorth\", \"aide-text-embedding-ada-002-v2\"),\n701:\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-ada-002-v2\"),\n703:\t\t\"aide-text-embedding-ada-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n704:\t\t\taoai(20, \"aideopenaieastus\", \"aide-text-embedding-ada-002\"),\n706:\t\t\"aide-davinci-003\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-davinci-003\", false, crowdapi, qc, smtpserver, p50k, 2000, 2000), []dispatcher.EndpointConfig{\n707:\t\t\taoai(600, \"aideopenaieastus\", \"aide-davinci-003\"),\n709:\t\t\"aide-code-davinci-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-code-davinci-002\", false, crowdapi, qc, smtpserver, p50k, 1000, 1000), []dispatcher.EndpointConfig{\n710:\t\t\taoai(600, \"aideopenaieastus\", \"aide-code-davinci-002\"),\n713:\t\t\taoaiNoReqLog(3, \"aideopenaieastus2\", \"aide-whisper\"),\n714:\t\t\taoaiNoReqLog(3, \"aideopenainorthcentralus\", \"aide-whisper\"),\n715:\t\t\taoaiNoReqLog(3, \"aideopenainorwayeast\", \"aide-whisper\"),\n716:\t\t\taoaiNoReqLog(3, \"aideopenaisouthindia\", \"aide-whisper\"),\n717:\t\t\taoaiNoReqLog(3, \"aideopenaiswedencentral\", \"aide-whisper\"),\n718:\t\t\taoaiNoReqLog(3, \"aideopenaiwesteurope\", \"aide-whisper\"),\n721:\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts\"),\n722:\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts\"),\n725:\t\t\taoai(500, \"aideopenaieastus2\", \"aide-gpt-4o-realtime-preview\"),\n726:\t\t\taoai(500, \"aideopenaiswedencentral\", \"aide-gpt-4o-realtime-preview\"),\n729:\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts-hd\"),\n730:\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts-hd\"),\n733:\t\t\taoai(240, \"aideopenaiswedencentral\", \"dalle-3\"),\n734:\t\t\taoai(240, \"aideopenaiaustraliaeast\", \"dalle-3\"),\n735:\t\t\taoai(240, \"aideopenaieastus\", \"dalle-3\"),\n738:\t\t\taoai(1380, \"aideopenaieastus\", \"dalle\"),\n749:\t\t\taoai(1380, \"aideopenaieastus\", \"dalleget\"),"}]},"uuid":"95339a22-25a7-4a42-86d5-fb808b3bd291","timestamp":"2025-08-23T09:25:26.879Z","toolUseResult":{"mode":"content","numFiles":0,"filenames":[],"content":"212:// aoaiWithKey initializes an endpoint configuration for Azure OpenAI API calls.\n250:func aoaiWithKey(weight int, name, model, key, url string) dispatcher.EndpointConfig {\n333:func aoai(weight int, name, model string) dispatcher.EndpointConfig {\n334:\treturn aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n337:func aoaiNoReqLog(weight int, name, model string) dispatcher.EndpointConfig {\n338:\tconfig := aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n347:// aoaiSpend is a wrapper function that calls azure.AoaiSpendFn\n348:func aoaiSpend(model string, capgpt4 bool, crowdapi crowdadapter.Adapter, qc quota.QuotaClient, smtpserver string, encoder *tiktoken.Tiktoken, promptrate, completionrate int) common.SpendFn {\n524:\t\t\"aide-gpt-4-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n525:\t\t\taoai(480, \"aideopenaicanadaeast\", \"aide-gpt-4-turbo\"),\n526:\t\t\taoai(480, \"aideopenaieastus2\", \"aide-gpt-4-turbo\"),\n527:\t\t\taoai(480, \"aideopenaifrancecentral\", \"aide-gpt-4-turbo\"),\n528:\t\t\taoai(900, \"aideopenainorwayeast\", \"aide-gpt-4-turbo\"),\n529:\t\t\taoai(900, \"aideopenaisouthindia\", \"aide-gpt-4-turbo\"),\n530:\t\t\taoai(480, \"aideopenaiwestus\", \"aide-gpt-4-turbo\"),\n531:\t\t\taoai(900, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo\"),\n532:\t\t\taoai(480, \"aideopenaiuksouth\", \"aide-gpt-4-turbo\"),\n533:\t\t\taoai(480, \"aideopenainorthcentralus\", \"aide-gpt-4-turbo\"),\n534:\t\t\taoai(480, \"aideopenaisouthcentralus\", \"aide-gpt-4-turbo\"),\n535:\t\t\taoai(480, \"aideopenaieastus\", \"aide-gpt-4-turbo\"),\n538:\t\t\"aide-gpt-4-turbo-1106\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-1106\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n539:\t\t\taoai(5000, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-1106\"),\n542:\t\t\"aide-gpt-4o-0806\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-0806\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n543:\t\t\taoai(5000, \"aideopenaieastus\", \"aide-gpt-4o-0806\"),\n545:\t\t\"aide-gpt-4o\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n546:\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o\"),\n547:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o\"),\n548:\t\t\taoai(60000, \"aideopenaiwestus\", \"aide-gpt-4o\"),\n549:\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4o\"),\n550:\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4o\"),\n551:\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o\"),\n552:\t\t\taoai(60000, \"aideopenaiwestus3\", \"aide-gpt-4o\"),\n554:\t\t\"aide-gpt-4o-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-mini\", true, crowdapi, qc, smtpserver, cl100k, 15, 60), []dispatcher.EndpointConfig{\n555:\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o-mini\"),\n556:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4o-mini\"),\n557:\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o-mini\"),\n558:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o-mini\"),\n560:\t\t\"aide-gpt-4.1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n561:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1\"),\n562:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1\"),\n563:\t\t\taoai(600000, \"aideopenaijapaneast\", \"aide-gpt-4.1\"),\n564:\t\t\taoai(60000, \"aideopenaicanadaeast\", \"aide-gpt-4.1\"),\n565:\t\t\taoai(60000, \"aideopenaiaustraliaeast\", \"aide-gpt-4.1\"),\n566:\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4.1\"),\n567:\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4.1\"),\n569:\t\t\"aide-gpt-4.1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-mini\", true, crowdapi, qc, smtpserver, cl100k, 40, 160), []dispatcher.EndpointConfig{\n570:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-mini\"),\n571:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-mini\"),\n573:\t\t\"aide-gpt-4.1-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-nano\", true, crowdapi, qc, smtpserver, cl100k, 10, 40), []dispatcher.EndpointConfig{\n574:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-nano\"),\n575:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-nano\"),\n577:\t\t\"aide-gpt-5\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n578:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5\"),\n579:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5\"),\n581:\t\t\"aide-gpt-5-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-mini\", true, crowdapi, qc, smtpserver, cl100k, 250, 200), []dispatcher.EndpointConfig{\n582:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-mini\"),\n583:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-mini\"),\n585:\t\t\"aide-gpt-5-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-nano\", true, crowdapi, qc, smtpserver, cl100k, 5, 40), []dispatcher.EndpointConfig{\n586:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-nano\"),\n587:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-nano\"),\n589:\t\t\"aide-gpt-5-chat\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-chat\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n590:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-chat\"),\n591:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-chat\"),\n593:\t\t\"aide-o1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-mini\", true, crowdapi, qc, smtpserver, cl100k, 300, 1200), []dispatcher.EndpointConfig{\n594:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-mini\"),\n595:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-mini\"),\n597:\t\t\"aide-o1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n598:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1\"),\n599:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1\"),\n602:\t\t\"aide-o1-preview\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-preview\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n603:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-preview\"),\n604:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-preview\"),\n606:\t\t\"aide-o3-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n607:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-mini\"),\n608:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-mini\"),\n610:\t\t\"aide-o3\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n611:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3\"),\n612:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3\"),\n614:\t\t\"aide-o3-pro\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-pro\", true, crowdapi, qc, smtpserver, cl100k, 2000, 8000), []dispatcher.EndpointConfig{\n615:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-pro\"),\n616:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-pro\"),\n618:\t\t\"aide-o4-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o4-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n619:\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o4-mini\"),\n620:\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o4-mini\"),\n622:\t\t\"aide-gpt-4-turbo-vision\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-vision\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n623:\t\t\taoai(10, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-vision\"),\n624:\t\t\taoai(10, \"aideopenaiwestus\", \"aide-gpt-4-turbo-vision\"),\n625:\t\t\taoai(10, \"aideopenaiswitzerlandnorth\", \"aide-gpt-4-turbo-vision\"),\n626:\t\t\taoai(10, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo-vision\"),\n628:\t\t\"aide-gpt-35-turbo-16k-4k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k-4k\", true, crowdapi, qc, smtpserver, cl100k, 100, 200), []dispatcher.EndpointConfig{\n629:\t\t\taoai(720, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n630:\t\t\taoai(3720, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n631:\t\t\taoai(720, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k-4k\"),\n632:\t\t\taoai(720, \"aideopenaisouthindia\", \"aide-gpt-35-turbo-16k-4k\"),\n633:\t\t\taoai(720, \"aideopenaiwestus\", \"aide-gpt-35-turbo-16k-4k\"),\n634:\t\t\taoai(720, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k-4k\"),\n635:\t\t\taoai(720, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k-4k\"),\n636:\t\t\taoai(1800, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n637:\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n639:\t\t\"aide-gpt-35-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n640:\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo\"),\n641:\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo\"),\n642:\t\t\taoai(1440, \"aideopenaiuksouth\", \"aide-gpt-35-turbo\"),\n643:\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo\"),\n644:\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo\"),\n645:\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo\"),\n646:\t\t\taoai(1800, \"aideopenaieastus2\", \"aide-gpt-35-turbo\"),\n647:\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo\"),\n648:\t\t\taoai(3000, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo\"),\n649:\t\t\taoai(3000, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo\"),\n650:\t\t\taoai(1800, \"aideopenaieastus\", \"aide-gpt-35-turbo\"),\n652:\t\t\"aide-gpt-35-turbo-instruct\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-instruct\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n653:\t\t\taoai(1440, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-instruct\"),\n654:\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-instruct\"),\n656:\t\t\"aide-gpt-35-turbo-16k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k\", false, crowdapi, qc, smtpserver, cl100k, 300, 400), []dispatcher.EndpointConfig{\n657:\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k\"),\n658:\t\t\taoai(3000, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k\"),\n659:\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k\"),\n660:\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo-16k\"),\n661:\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k\"),\n662:\t\t\taoai(3000, \"aideopenaieastus2\", \"aide-gpt-35-turbo-16k\"),\n663:\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k\"),\n664:\t\t\taoai(1800, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo-16k\"),\n665:\t\t\taoai(1800, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k\"),\n666:\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-16k\"),\n668:\t\t\"aide-text-embedding-3-large\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-large\", false, crowdapi, qc, smtpserver, cl100k, 13, 13), []dispatcher.EndpointConfig{\n669:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-large\"),\n670:\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-large\"),\n671:\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-large\"),\n672:\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-3-large\"),\n673:\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-3-large\"),\n674:\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-3-large\"),\n675:\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-3-large\"),\n676:\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-3-large\"),\n677:\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-3-large\"),\n679:\t\t\"aide-text-embedding-3-small\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-small\", false, crowdapi, qc, smtpserver, cl100k, 2, 2), []dispatcher.EndpointConfig{\n680:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-small\"),\n681:\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-small\"),\n682:\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-small\"),\n684:\t\t\"aide-text-embedding-ada-002-v2\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002-v2\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n685:\t\t\taoai(4200, \"aideopenaiwesteurope\", \"aide-text-embedding-ada-002-v2\"),\n686:\t\t\taoai(4200, \"aideopenaieastus2\", \"aide-text-embedding-ada-002-v2\"),\n687:\t\t\taoai(4200, \"aideopenaisouthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n688:\t\t\taoai(2100, \"aideopenaiaustraliaeast\", \"aide-text-embedding-ada-002-v2\"),\n689:\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-ada-002-v2\"),\n690:\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-ada-002-v2\"),\n691:\t\t\taoai(2100, \"aideopenaiswitzerlandnorth\", \"aide-text-embedding-ada-002-v2\"),\n692:\t\t\taoai(2100, \"aideopenainorthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n693:\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-ada-002-v2\"),\n694:\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-ada-002-v2\"),\n695:\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-ada-002-v2\"),\n696:\t\t\taoai(1380, \"aideopenaieastus\", \"aide-text-embedding-ada-002-v2\"),\n697:\t\t\taoai(2100, \"aideopenaiwestus\", \"aide-text-embedding-ada-002-v2\"),\n698:\t\t\taoai(2100, \"aideopenainorwayeast\", \"aide-text-embedding-ada-002-v2\"),\n699:\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-ada-002-v2\"),\n700:\t\t\taoai(2100, \"aideopenaisouthafricanorth\", \"aide-text-embedding-ada-002-v2\"),\n701:\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-ada-002-v2\"),\n703:\t\t\"aide-text-embedding-ada-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n704:\t\t\taoai(20, \"aideopenaieastus\", \"aide-text-embedding-ada-002\"),\n706:\t\t\"aide-davinci-003\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-davinci-003\", false, crowdapi, qc, smtpserver, p50k, 2000, 2000), []dispatcher.EndpointConfig{\n707:\t\t\taoai(600, \"aideopenaieastus\", \"aide-davinci-003\"),\n709:\t\t\"aide-code-davinci-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-code-davinci-002\", false, crowdapi, qc, smtpserver, p50k, 1000, 1000), []dispatcher.EndpointConfig{\n710:\t\t\taoai(600, \"aideopenaieastus\", \"aide-code-davinci-002\"),\n713:\t\t\taoaiNoReqLog(3, \"aideopenaieastus2\", \"aide-whisper\"),\n714:\t\t\taoaiNoReqLog(3, \"aideopenainorthcentralus\", \"aide-whisper\"),\n715:\t\t\taoaiNoReqLog(3, \"aideopenainorwayeast\", \"aide-whisper\"),\n716:\t\t\taoaiNoReqLog(3, \"aideopenaisouthindia\", \"aide-whisper\"),\n717:\t\t\taoaiNoReqLog(3, \"aideopenaiswedencentral\", \"aide-whisper\"),\n718:\t\t\taoaiNoReqLog(3, \"aideopenaiwesteurope\", \"aide-whisper\"),\n721:\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts\"),\n722:\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts\"),\n725:\t\t\taoai(500, \"aideopenaieastus2\", \"aide-gpt-4o-realtime-preview\"),\n726:\t\t\taoai(500, \"aideopenaiswedencentral\", \"aide-gpt-4o-realtime-preview\"),\n729:\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts-hd\"),\n730:\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts-hd\"),\n733:\t\t\taoai(240, \"aideopenaiswedencentral\", \"dalle-3\"),\n734:\t\t\taoai(240, \"aideopenaiaustraliaeast\", \"dalle-3\"),\n735:\t\t\taoai(240, \"aideopenaieastus\", \"dalle-3\"),\n738:\t\t\taoai(1380, \"aideopenaieastus\", \"dalle\"),\n749:\t\t\taoai(1380, \"aideopenaieastus\", \"dalleget\"),","numLines":180}}
{"parentUuid":"95339a22-25a7-4a42-86d5-fb808b3bd291","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_011yTM4bo7Krqmcoo7wyGaAE","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"看起來配置基本一致。讓我檢查新的 azure package 是否正確建立了所有必要的 dispatchers 和 endpoints。"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":7070,"cache_read_input_tokens":82601,"output_tokens":1}},"type":"assistant","uuid":"d291f8a3-f93a-4f8c-9b1b-f2a2c6bd39d1","timestamp":"2025-08-23T09:25:35.418Z"}
{"parentUuid":"d291f8a3-f93a-4f8c-9b1b-f2a2c6bd39d1","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_011yTM4bo7Krqmcoo7wyGaAE","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01UpuGiA2u1ACbNCmbTBvZhT","name":"TodoWrite","input":{"todos":[{"id":"1","content":"驗證新的 azure package 配置與註解中的舊配置一致","status":"completed"},{"id":"2","content":"移除 main.go 中已被取代的註解代碼","status":"in_progress"},{"id":"3","content":"確認程式運行正常","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":7070,"cache_read_input_tokens":82601,"output_tokens":199}},"type":"assistant","uuid":"83d0e853-1145-40cf-80aa-7bcf9a66183a","timestamp":"2025-08-23T09:25:42.332Z"}
{"parentUuid":"83d0e853-1145-40cf-80aa-7bcf9a66183a","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01UpuGiA2u1ACbNCmbTBvZhT","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"7525be88-248f-418a-8ef8-07141a90c718","timestamp":"2025-08-23T09:25:42.347Z","toolUseResult":{"oldTodos":[{"content":"驗證新的 azure package 配置與註解中的舊配置一致","status":"in_progress","id":"1"},{"content":"移除 main.go 中已被取代的註解代碼","status":"pending","id":"2"},{"content":"確認程式運行正常","status":"pending","id":"3"}],"newTodos":[{"content":"驗證新的 azure package 配置與註解中的舊配置一致","status":"completed","id":"1"},{"content":"移除 main.go 中已被取代的註解代碼","status":"in_progress","id":"2"},{"content":"確認程式運行正常","status":"pending","id":"3"}]}}
{"parentUuid":"7525be88-248f-418a-8ef8-07141a90c718","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01NNSixeCXh8HvgGAboUTJj9","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"text","text":"現在我要移除 main.go 中已被取代的註解代碼："}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":509,"cache_read_input_tokens":89671,"output_tokens":1}},"type":"assistant","uuid":"6a15c37d-bf6c-43d3-ad04-075ef008588b","timestamp":"2025-08-23T09:25:50.769Z"}
{"parentUuid":"6a15c37d-bf6c-43d3-ad04-075ef008588b","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","message":{"id":"msg_bdrk_01NNSixeCXh8HvgGAboUTJj9","type":"message","role":"assistant","model":"claude-opus-4-1-20250805","content":[{"type":"tool_use","id":"toolu_bdrk_01J2aNMzqZ36DRrCqP8nks4y","name":"Edit","input":{"file_path":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","old_string":"// Types moved to azure package - using azure.AoaiResp and azure.DalleReq","new_string":""}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":509,"cache_read_input_tokens":89671,"output_tokens":160}},"type":"assistant","uuid":"c011fc1e-ff91-489f-966f-6b47497df8db","timestamp":"2025-08-23T09:25:53.801Z"}
{"parentUuid":"c011fc1e-ff91-489f-966f-6b47497df8db","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_bdrk_01J2aNMzqZ36DRrCqP8nks4y","type":"tool_result","content":"The file /Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n    69→\tUsername string `json:\"username\" binding:\"required\"`\n    70→\tPassword string `json:\"password\" binding:\"required\"`\n    71→}\n    72→\n    73→\n    74→type ResourceConfig struct {\n    75→\tURL    string `json:\"url\"`\n    76→\tKey    string `json:\"key\"`\n    77→\tSecret string `json:\"secret\"`"}]},"uuid":"654a32fe-38b1-4d28-9042-be89da9fadd6","timestamp":"2025-08-23T09:30:21.293Z","toolUseResult":{"filePath":"/Users/mtk19651/project/azure-gateway/cmd/mlop-azure-gateway/main.go","oldString":"// Types moved to azure package - using azure.AoaiResp and azure.DalleReq","newString":"","originalFile":"package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\t\"unsafe\"\n\n\t\"gitea.mediatek.inc/davinci/azure-gateway/awsclaude\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/azure\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/common\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/crowdadapter\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dailyreset\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/dispatcher\"\n\tgemini \"gitea.mediatek.inc/davinci/azure-gateway/gcp\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/internal/mtk\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/header\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/pkg/middleware\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/poker\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/quota\"\n\tAPIV1 \"gitea.mediatek.inc/davinci/azure-gateway/router/api/v1\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/router/auth\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/service/azurebingsearch\"\n\t\"gitea.mediatek.inc/davinci/azure-gateway/service/user\"\n\n\t_ \"gitea.mediatek.inc/davinci/azure-gateway/docs\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\tv4 \"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n\t\"github.com/essentialkaos/go-crowd/v3\"\n\t\"github.com/gin-contrib/requestid\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/joho/godotenv\"\n\t\"github.com/pkoukk/tiktoken-go\"\n\ttiktoken_loader \"github.com/pkoukk/tiktoken-go-loader\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidisaside\"\n\tswaggerFiles \"github.com/swaggo/files\"\n\tginSwagger \"github.com/swaggo/gin-swagger\"\n\t\"golang.org/x/exp/slog\"\n\t\"golang.org/x/oauth2/google\"\n)\n\n// UserTokenRequest represents a request to generate a user token with a specified expiration time.\n// ExpirationHours specifies the number of hours the token will be valid for and is a required field.\ntype UserTokenRequest struct {\n\tExpirationHours int             `json:\"expirationHours\" binding:\"required\"`\n\tPayload         *map[string]any `json:\"payload\"`\n}\n\ntype UserLoginRequest struct {\n\tUserTokenRequest\n\tUsername string `json:\"username\" binding:\"required\"`\n\tPassword string `json:\"password\" binding:\"required\"`\n}\n\n// Types moved to azure package - using azure.AoaiResp and azure.DalleReq\n\ntype ResourceConfig struct {\n\tURL    string `json:\"url\"`\n\tKey    string `json:\"key\"`\n\tSecret string `json:\"secret\"`\n\tRegion string `json:\"region\"`\n\tWeight int    `json:\"weight\"`\n}\n\ntype Provider string\n\nvar (\n\tClaudeV3Provider = Provider(\"anthropic.claude-v3\")\n\tOpenAIProvider   = Provider(\"openai\")\n)\n\ntype DispatchConfig struct {\n\tProvider Provider `json:\"provider\"`\n\tModel    string   `json:\"model\"`\n\tPrice    struct {\n\t\tPrompt     int `json:\"prompt\"`\n\t\tCompletion int `json:\"completion\"`\n\t\tDalleN     int `json:\"dalleN\"`\n\t} `json:\"price\"`\n\tResources map[string]ResourceConfig `json:\"resources\"`\n}\n\nfunc checkInCrowdGroup(crowdapi crowdadapter.Adapter, list, uid string) (int, InListResp) {\n\tif _, ok := crowdapi.(*crowdadapter.Empty); ok {\n\t\treturn http.StatusOK, InListResp{In: true}\n\t}\n\tif uid == \"\" || list == \"\" {\n\t\treturn http.StatusBadRequest, InListResp{Reason: \"uid and list should not be empty\"}\n\t}\n\tif strings.Contains(uid, \"@\") {\n\t\tusers, err := crowdapi.SearchUsers(context.Background(), \"email=\"+uid, crowdadapter.DefaultLimit)\n\t\tif err != nil {\n\t\t\treturn http.StatusInternalServerError, InListResp{Reason: err.Error()}\n\t\t}\n\t\tif len(users) == 0 {\n\t\t\treturn http.StatusNotFound, InListResp{Reason: fmt.Sprintf(\"user not found: %q\", uid)}\n\t\t}\n\t\tuid = users[0].Name\n\t}\n\tgroups, err := crowdapi.GetUserNestedGroups(context.Background(), uid, crowdadapter.DefaultLimit)\n\tif err != nil {\n\t\treturn http.StatusInternalServerError, InListResp{Reason: err.Error()}\n\t}\n\tfor _, group := range groups {\n\t\tif group.Name == list {\n\t\t\treturn http.StatusOK, InListResp{In: true}\n\t\t}\n\t}\n\treturn http.StatusOK, InListResp{In: false}\n}\n\nfunc URL(target string) *url.URL {\n\tpurl, err := url.Parse(target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn purl\n}\n\nvar buffers sync.Pool\n\nfunc NewTeeBufReader(r io.ReadCloser, done func(string)) *TeeBufReader {\n\treturn &TeeBufReader{r: r, w: buffers.Get().(*bytes.Buffer), done: done}\n}\n\ntype TeeBufReader struct {\n\tr    io.ReadCloser\n\tw    *bytes.Buffer\n\tdone func(buf string)\n}\n\nfunc (t *TeeBufReader) Read(p []byte) (n int, err error) {\n\tif t.r == nil {\n\t\treturn 0, io.EOF\n\t}\n\tn, err = t.r.Read(p)\n\tif n > 0 {\n\t\tif n, err := t.w.Write(p[:n]); err != nil {\n\t\t\treturn n, err\n\t\t}\n\t}\n\treturn\n}\n\nfunc (t *TeeBufReader) Close() (err error) {\n\tbs := t.w.Bytes()\n\tt.done(*(*string)(unsafe.Pointer(&bs)))\n\tt.w.Reset()\n\tbuffers.Put(t.w)\n\tif t.r != nil {\n\t\treturn t.r.Close()\n\t}\n\treturn nil\n}\n\ntype InListResp struct {\n\tIn     bool   `json:\"in\"`\n\tReason string `json:\"reason\"`\n}\n\nfunc (p InListResp) ToString() string {\n\tbs, _ := json.Marshal(p)\n\treturn *(*string)(unsafe.Pointer(&bs))\n}\n\ntype InListReq struct {\n\tUid  string `json:\"uid\"`\n\tList string `json:\"list\"`\n}\n\nfunc (p InListReq) ToString() string {\n\tbs, _ := json.Marshal(p)\n\treturn *(*string)(unsafe.Pointer(&bs))\n}\n\nvar proxyUsers map[string]bool\n\nfunc init() {\n\tbuffers = sync.Pool{New: func() any { return bytes.NewBuffer(make([]byte, 0, 4096)) }}\n\tproxyUsers = make(map[string]bool, 20)\n\tfor _, u := range strings.Split(os.Getenv(\"PROXY_USERS\"), \",\") {\n\t\tif u = strings.TrimSpace(u); u != \"\" {\n\t\t\tproxyUsers[strings.ToLower(u)] = true\n\t\t\tproxyUsers[strings.ToUpper(u)] = true\n\t\t}\n\t}\n}\n\nvar globalDailyResetController = dailyreset.New()\n\n// Azure OpenAI helper functions have been moved to the azure package\n// The following block is commented out as it's now handled by azure.BuildAOAIEndpointConfig\n/*\n// aoaiWithKey initializes an endpoint configuration for Azure OpenAI API calls.\n// It constructs the configuration based on the provided parameters and the model type.\n//\n// If the url parameter is non-empty, the function uses it directly with an \"Authorization\" header.\n// Otherwise, it builds a base URL from the name and configures headers with the provided API key.\n//\n// For models containing \"dalle\" (case-insensitive), it returns a configuration with an \"api-key\" header\n// without setting any deadline or special performance testing behavior.\n//\n// For other models, it sets a default deadline of 60 seconds, but extends it to 150 seconds for models\n// ending with \"32k\", \"16k\", or containing \"gpt-4\". It also determines if the special \"ptu\" mode should\n// be enabled when name equals \"aideopenaijapaneast\" and model equals \"aide-gpt-4o\".\n//\n// In ptu mode, the function sets a judge function that always returns true and defines\n// a specific test request targeting the chat completions endpoint.\n// For general cases, a judge function is defined to check that the response status is neither 429 nor\n// in the 500 range, and that the time-to-first-byte (ttfb) is below the set deadline.\n// The test request function is adjusted based on the model (e.g., using \"completions\" for some models,\n// \"embeddings\" for others, or \"chat/completions\" by default).\n//\n// Parameters:\n//\n//\tweight int:\n//\t  The traffic weight assigned to this endpoint.\n//\tname string:\n//\t  The identifier used to construct the base URL if no override URL is provided.\n//\tmodel string:\n//\t  The model variant which affects headers, deadline configuration, and endpoint path.\n//\tkey string:\n//\t  The API key used either as an \"api-key\" or \"Authorization\" header depending on the scenario.\n//\turl string:\n//\t  An optional URL override; if provided, it bypasses the base URL construction.\n//\n// Returns:\n//\n//\tendpointconfig:\n//\t  A structure encompassing the endpoint URL, HTTP headers, associated labels, and the functions\n//\t  (judgeFn and testReqFn) used for response validation and test request generation.\nfunc aoaiWithKey(weight int, name, model, key, url string) dispatcher.EndpointConfig {\n\tif url != \"\" {\n\t\treturn dispatcher.EndpointConfig{\n\t\t\tWeight: weight,\n\t\t\tURL:    url,\n\t\t\tHdrs:   map[string]string{\"Authorization\": key},\n\t\t\tLabels: []string{\"azure\", model, name},\n\t\t}\n\t}\n\n\tbaseURL := fmt.Sprintf(\"https://%s.openai.azure.com\", name)\n\n\t// If the model contains \"dalle\", no additional deadline or ptu configuration is needed\n\tif strings.Contains(strings.ToLower(model), \"dalle\") {\n\t\treturn dispatcher.EndpointConfig{\n\t\t\tWeight: weight,\n\t\t\tURL:    baseURL,\n\t\t\tHdrs:   map[string]string{\"api-key\": key},\n\t\t\tLabels: []string{\"aoai\", model, name},\n\t\t}\n\t}\n\n\t// Set deadline\n\tdeadline := time.Second * 60\n\tif strings.HasSuffix(model, \"32k\") || strings.HasSuffix(model, \"16k\") || strings.Contains(model, \"gpt-4\") {\n\t\tdeadline = time.Second * 150\n\t}\n\n\tptu := name == \"aideopenaijapaneast\" && (model == \"aide-gpt-4.1\")\n\n\t// Create a common configuration\n\tcfg := dispatcher.EndpointConfig{\n\t\tPTU:    ptu,\n\t\tWeight: weight,\n\t\tURL:    baseURL,\n\t\tHdrs:   map[string]string{\"api-key\": key},\n\t\tLabels: []string{\"aoai\", model, name},\n\t}\n\n\t// If ptu is true, set judgeFn to always return true\n\tif ptu {\n\t\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n\t\t\treturn true\n\t\t}\n\t\tcfg.TestReqFn = func() *http.Request {\n\t\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n\t\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/chat/completions?api-version=2024-02-01\", baseURL, model), payload)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\treq.Header.Set(\"api-key\", key)\n\t\t\treq.Header.Set(\"content-type\", \"application/json\")\n\t\t\treturn req\n\t\t}\n\t\treturn cfg\n\t}\n\n\t// Define default judgeFn and testReqFn for normal cases\n\tcfg.JudgeFn = func(resp *http.Response, ttfb time.Duration) bool {\n\t\treturn resp.StatusCode != 429 && resp.StatusCode < 500 && ttfb < deadline\n\t}\n\tcfg.TestReqFn = func() *http.Request {\n\t\tendpoint := \"chat/completions\"\n\t\tpayload := strings.NewReader(`{\"messages\":[{\"role\": \"user\",\"content\": \"Hi\"}]}`)\n\t\tif model == \"aide-davinci-003\" || model == \"aide-code-davinci-002\" {\n\t\t\tendpoint = \"completions\"\n\t\t\tpayload = strings.NewReader(`{\"prompt\": \"Hi\"}`)\n\t\t} else if strings.Contains(model, \"embedding\") {\n\t\t\tendpoint = \"embeddings\"\n\t\t\tpayload = strings.NewReader(`{\"input\": [\"Hi\"]}`)\n\t\t}\n\t\treq, err := http.NewRequest(http.MethodPost, fmt.Sprintf(\"%s/openai/deployments/%s/%s?api-version=2024-02-01\", baseURL, model, endpoint), payload)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\treq.Header.Set(\"api-key\", key)\n\t\treq.Header.Set(\"content-type\", \"application/json\")\n\t\treturn req\n\t}\n\n\treturn cfg\n}\n\nfunc aoai(weight int, name, model string) dispatcher.EndpointConfig {\n\treturn aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n}\n\nfunc aoaiNoReqLog(weight int, name, model string) dispatcher.EndpointConfig {\n\tconfig := aoaiWithKey(weight, name, model, envmust(\"AZURE_OPAI_KEY_\"+name), \"\")\n\tconfig.NoReqLog = true\n\treturn config\n}\n\n// Error definitions moved to azure package\n\n// Message types moved to azure package\n\n// aoaiSpend is a wrapper function that calls azure.AoaiSpendFn\nfunc aoaiSpend(model string, capgpt4 bool, crowdapi crowdadapter.Adapter, qc quota.QuotaClient, smtpserver string, encoder *tiktoken.Tiktoken, promptrate, completionrate int) common.SpendFn {\n\treturn azure.AoaiSpendFn(model, capgpt4, crowdapi, qc, smtpserver, encoder, promptrate, completionrate)\n}\n*/\n\nfunc enrichCSESHeaders(r *http.Request, domain, proj, tkid string, payload *map[string]any) error {\n\tlc, ok := r.Context().Value(\"lc\").(*common.LoggingContext)\n\tif !ok || lc == nil {\n\t\treturn errors.New(\"invalid logging context: not *common.LoggingContext\")\n\t}\n\tif lc.UID == nil {\n\t\treturn errors.New(\"missing UID in logging context\")\n\t}\n\tuid := *lc.UID\n\tif r.Header.Get(\"X-Domain\") == \"hwrd\" {\n\t\tdomain = \"hwrd\"\n\t}\n\tr.Header.Set(\"grpc-metadata-x-user-proxy-name\", uid)\n\tr.Header.Set(\"grpc-metadata-x-user-name\", uid)\n\tr.Header.Set(\"grpc-metadata-x-user-proxy-domain\", domain)\n\tr.Header.Set(\"grpc-metadata-x-user-domain\", domain)\n\tr.Header.Set(\"grpc-metadata-x-app-name\", proj)\n\tr.Header.Set(\"grpc-metadata-x-task-id\", tkid)\n\n\tif payload != nil {\n\t\tif v, ok := (*payload)[\"project\"]; ok {\n\t\t\tr.Header.Set(\"grpc-metadata-x-project-code\", v.(string))\n\t\t}\n\t}\n\tif code := r.Header.Get(\"X-Project-Code\"); code != \"\" {\n\t\tr.Header.Set(\"grpc-metadata-x-project-code\", code)\n\t}\n\treturn nil\n}\n\n//\t@title\t\t\t\t\t\tGAISF Gateway API\n//\t@version\t\t\t\t\t1.0\n//\t@description\t\t\t\tThis is the API documentation for the GAISF Gateway.\n//\t@BasePath\t\t\t\t\t/v1\n//\t@securityDefinitions.apikey\tBearerAuth\n//\t@in\t\t\t\t\t\t\theader\n//\t@name\t\t\t\t\t\tAuthorization\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tglobalDailyResetController.Start(ctx)\n\tvar envfile string\n\tflag.StringVar(&envfile, \"env-file\", \".env\", \"Read in a file of environment variables\")\n\tflag.Parse()\n\n\tlogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\n\n\tif err := godotenv.Load(envfile); err == nil {\n\t\tlogger.Info(\"loading config file\", \"file\", envfile)\n\t}\n\n\tjwtKey := envmust(\"JWT_SECRET_KEY\")\n\tdomain := envstr(\"DOMAIN_CHECK\", \"oa\")\n\t// (permMgr initialization moved later where crowdapi is available)\n\n\tif !common.Domain(domain).IsValid() {\n\t\tpanic(\"DOMAIN_CHECK must be set to an airgapped domain\")\n\t}\n\n\tuserServiceURL := envstr(\"USER_SERVICE\", \"http://user-service:8080\")\n\n\tsmtpserver := \"smtp.mediatek.com:25\"\n\n\tif smtp := envstr(\"SMTP_SERVER\", \"\"); smtp != \"\" {\n\t\tsmtpserver = smtp\n\t}\n\n\tredisurl := envmust(\"REDIS_URL\")\n\n\tcapping := envstr(\"ENABLE_CAPPING\", \"true\")\n\n\tvar err error\n\tvar crowdapi crowdadapter.Adapter\n\n\trueidisopt := rueidis.ClientOption{InitAddress: []string{redisurl}}\n\tif strings.Contains(redisurl, \"://\") {\n\t\trueidisopt = rueidis.MustParseURL(redisurl)\n\t}\n\trueidisopt.CacheSizeEachConn = 64 * (1 << 20)\n\trac, err := rueidisaside.NewClient(rueidisaside.ClientOption{ClientOption: rueidisopt})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trc := rac.Client()\n\n\tswitch envstr(\"CROWD_IMPL_TYPE\", \"crowd\") {\n\tcase \"crowd\":\n\t\tcrowdapi, err = crowdadapter.NewCrowdAPI(envmust(\"CROWD_USERNAME\"), envmust(\"CROWD_PASSWORD\"), rac)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\tcase \"none\":\n\t\tcrowdapi = &crowdadapter.Empty{}\n\tdefault:\n\t\tpanic(\"unexpected CROWD_IMPL_TYPE\")\n\t}\n\n\tpermMgr := mtk.NewModelPermissionManager(jwtKey, crowdapi)\n\ttr := http.DefaultTransport.(*http.Transport).Clone()\n\ttr.MaxIdleConns = 10000\n\ttr.MaxIdleConnsPerHost = 1000\n\ttr.ResponseHeaderTimeout = 0\n\tif resolver := os.Getenv(\"RESOLVER_ADDR\"); resolver != \"\" {\n\t\tdialer := net.Dialer{\n\t\t\tResolver: &net.Resolver{\n\t\t\t\tPreferGo: true,\n\t\t\t\tDial: func(ctx context.Context, network, address string) (net.Conn, error) {\n\t\t\t\t\treturn (&net.Dialer{}).DialContext(ctx, \"tcp\", resolver)\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\ttr.DialContext = func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\taddr = strings.Replace(addr, \"mtklm-core.mediatek.inc\", \"10.225.43.241\", 1)\n\t\t\treturn dialer.DialContext(ctx, network, addr)\n\t\t}\n\t}\n\tif strings.Contains(os.Getenv(\"CSES_LLM_API_URL\"), \"mtklm-hwrd.mediatek.inc\") {\n\t\tdialer := &tls.Dialer{\n\t\t\tConfig: &tls.Config{\n\t\t\t\tInsecureSkipVerify: true,\n\t\t\t},\n\t\t}\n\t\ttr.DialTLSContext = func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\tif strings.Contains(addr, \"mtklm-hwrd.mediatek.inc\") {\n\t\t\t\treturn dialer.DialContext(ctx, network, \"10.10.46.14:443\")\n\t\t\t}\n\t\t\treturn dialer.DialContext(ctx, network, addr)\n\t\t}\n\t}\n\n\tqc := quota.NewRedisQuotaClient(rc, capping == \"true\")\n\n\ttiktoken.SetBpeLoader(tiktoken_loader.NewOfflineLoader())\n\tcl100k, err := tiktoken.GetEncoding(\"cl100k_base\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tp50k, err := tiktoken.GetEncoding(\"p50k_base\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Configure Azure services\n\tazureConfig := &azure.Config{\n\t\tTransport:             tr,\n\t\tLogger:                logger,\n\t\tCrowdAPI:              crowdapi,\n\t\tQuotaClient:           qc,\n\t\tSMTPServer:            smtpserver,\n\t\tCL100K:                cl100k,\n\t\tP50K:                  p50k,\n\t\tDailyResetController:  globalDailyResetController,\n\t\tAssistantsAPIResource: envstr(\"ASSISTANTS_API_RESOURCE\", \"aideopenaiaustraliaeast\"),\n\t\tAzureCognitiveHost:    envstr(\"AZURE_COGNITIVE_HOST\", \"https://aide-cognitive-multi.cognitiveservices.azure.com\"),\n\t\tAzureCognitiveKey:     envmust(\"AZURE_COGNITIVE_KEY\"),\n\t\tSpeechAPIKey:          envstr(\"SPEECH_API_KEY\", envmust(\"AZURE_COGNITIVE_KEY\")),\n\t}\n\n\t// Build Azure OpenAI dispatchers and endpoints\n\taoaidispatchers := azure.BuildAOAIDispatchers(azureConfig)\n\taoaifallback := azure.BuildAOAIFallback(azureConfig)\n\tassistantsAPI := azure.BuildAssistantsAPI(azureConfig)\n\tazurecognitive, sttxy, customvoice := azure.BuildCognitiveEndpoints(azureConfig)\n\n\tbedrockendpoint := make(map[string]*dispatcher.Endpoint)\n\n\t// AOAI configuration now handled by azure package\n\t// The following overrides the aoaidispatchers built from azure package if needed\n\t// Remove this block once verified the azure package configuration works correctly\n\t/*\n\taoaidispatchers = map[string]*dispatcher.Dispatcher{\n\t\t\"aide-gpt-4-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n\t\t\taoai(480, \"aideopenaicanadaeast\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaieastus2\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaifrancecentral\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(900, \"aideopenainorwayeast\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(900, \"aideopenaisouthindia\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaiwestus\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(900, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaiuksouth\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenainorthcentralus\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaisouthcentralus\", \"aide-gpt-4-turbo\"),\n\t\t\taoai(480, \"aideopenaieastus\", \"aide-gpt-4-turbo\"),\n\t\t}, globalDailyResetController),\n\t\t// for AIDE internal use\n\t\t\"aide-gpt-4-turbo-1106\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-1106\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n\t\t\taoai(5000, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-1106\"),\n\t\t}, globalDailyResetController),\n\t\t// for AIDE internal use\n\t\t\"aide-gpt-4o-0806\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-0806\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n\t\t\taoai(5000, \"aideopenaieastus\", \"aide-gpt-4o-0806\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4o\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o\", true, crowdapi, qc, smtpserver, cl100k, 500, 1500), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenaiwestus\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o\"),\n\t\t\taoai(60000, \"aideopenaiwestus3\", \"aide-gpt-4o\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4o-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4o-mini\", true, crowdapi, qc, smtpserver, cl100k, 15, 60), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus\", \"aide-gpt-4o-mini\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4o-mini\"),\n\t\t\taoai(60000, \"aideopenaijapaneast\", \"aide-gpt-4o-mini\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4o-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4.1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1\"),\n\t\t\taoai(600000, \"aideopenaijapaneast\", \"aide-gpt-4.1\"),\n\t\t\taoai(60000, \"aideopenaicanadaeast\", \"aide-gpt-4.1\"),\n\t\t\taoai(60000, \"aideopenaiaustraliaeast\", \"aide-gpt-4.1\"),\n\t\t\taoai(60000, \"aideopenainorthcentralus\", \"aide-gpt-4.1\"),\n\t\t\taoai(60000, \"aideopenaisouthcentralus\", \"aide-gpt-4.1\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4.1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-mini\", true, crowdapi, qc, smtpserver, cl100k, 40, 160), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-mini\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4.1-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4.1-nano\", true, crowdapi, qc, smtpserver, cl100k, 10, 40), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-4.1-nano\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-4.1-nano\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-5\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-5-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-mini\", true, crowdapi, qc, smtpserver, cl100k, 250, 200), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-mini\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-5-nano\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-nano\", true, crowdapi, qc, smtpserver, cl100k, 5, 40), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-nano\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-nano\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-5-chat\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-5-chat\", true, crowdapi, qc, smtpserver, cl100k, 125, 1000), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-gpt-5-chat\"),\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-gpt-5-chat\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o1-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-mini\", true, crowdapi, qc, smtpserver, cl100k, 300, 1200), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-mini\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o1\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1\"),\n\t\t}, globalDailyResetController),\n\t\t// o1-preview will be deprecated if o1 is stable\n\t\t\"aide-o1-preview\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o1-preview\", true, crowdapi, qc, smtpserver, cl100k, 1500, 6000), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o1-preview\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o1-preview\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o3-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-mini\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o3\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3\", true, crowdapi, qc, smtpserver, cl100k, 200, 800), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o3-pro\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o3-pro\", true, crowdapi, qc, smtpserver, cl100k, 2000, 8000), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o3-pro\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o3-pro\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-o4-mini\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-o4-mini\", true, crowdapi, qc, smtpserver, cl100k, 110, 440), []dispatcher.EndpointConfig{\n\t\t\taoai(60000, \"aideopenaieastus2\", \"aide-o4-mini\"),\n\t\t\taoai(60000, \"aideopenaiswedencentral\", \"aide-o4-mini\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4-turbo-vision\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-4-turbo-vision\", true, crowdapi, qc, smtpserver, cl100k, 1000, 1500*2), []dispatcher.EndpointConfig{\n\t\t\taoai(10, \"aideopenaiaustraliaeast\", \"aide-gpt-4-turbo-vision\"),\n\t\t\taoai(10, \"aideopenaiwestus\", \"aide-gpt-4-turbo-vision\"),\n\t\t\taoai(10, \"aideopenaiswitzerlandnorth\", \"aide-gpt-4-turbo-vision\"),\n\t\t\taoai(10, \"aideopenaiswedencentral\", \"aide-gpt-4-turbo-vision\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-35-turbo-16k-4k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k-4k\", true, crowdapi, qc, smtpserver, cl100k, 100, 200), []dispatcher.EndpointConfig{\n\t\t\taoai(720, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(3720, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaisouthindia\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaiwestus\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(1800, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo-16k-4k\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-35-turbo\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(720, \"aideopenaisouthcentralus\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(1440, \"aideopenaiuksouth\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(1800, \"aideopenaieastus2\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(3000, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(3000, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo\"),\n\t\t\taoai(1800, \"aideopenaieastus\", \"aide-gpt-35-turbo\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-35-turbo-instruct\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-instruct\", false, crowdapi, qc, smtpserver, cl100k, 150, 200), []dispatcher.EndpointConfig{\n\t\t\taoai(1440, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-instruct\"),\n\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-instruct\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-35-turbo-16k\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-gpt-35-turbo-16k\", false, crowdapi, qc, smtpserver, cl100k, 300, 400), []dispatcher.EndpointConfig{\n\t\t\taoai(1440, \"aideopenaifrancecentral\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(3000, \"aideopenaiuksouth\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(900, \"aideopenaicanadaeast\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(1800, \"aideopenaijapaneast\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(900, \"aideopenainorthcentralus\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(3000, \"aideopenaieastus2\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(1800, \"aideopenaiaustraliaeast\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(1800, \"aideopenaiswitzerlandnorth\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(1800, \"aideopenaiswedencentral\", \"aide-gpt-35-turbo-16k\"),\n\t\t\taoai(1440, \"aideopenaieastus\", \"aide-gpt-35-turbo-16k\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-text-embedding-3-large\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-large\", false, crowdapi, qc, smtpserver, cl100k, 13, 13), []dispatcher.EndpointConfig{\n\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-3-large\"),\n\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-3-large\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-text-embedding-3-small\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-3-small\", false, crowdapi, qc, smtpserver, cl100k, 2, 2), []dispatcher.EndpointConfig{\n\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-3-small\"),\n\t\t\taoai(2100, \"aideopenaieastus\", \"aide-text-embedding-3-small\"),\n\t\t\taoai(2100, \"aideopenaieastus2\", \"aide-text-embedding-3-small\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-text-embedding-ada-002-v2\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002-v2\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n\t\t\taoai(4200, \"aideopenaiwesteurope\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(4200, \"aideopenaieastus2\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(4200, \"aideopenaisouthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiaustraliaeast\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaicanadaeast\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaijapaneast\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiswitzerlandnorth\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenainorthcentralus\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiuksouth\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaifrancecentral\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiswedencentral\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(1380, \"aideopenaieastus\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiwestus\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenainorwayeast\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaisouthindia\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaisouthafricanorth\", \"aide-text-embedding-ada-002-v2\"),\n\t\t\taoai(2100, \"aideopenaiwestus3\", \"aide-text-embedding-ada-002-v2\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-text-embedding-ada-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-text-embedding-ada-002\", false, crowdapi, qc, smtpserver, cl100k, 10, 10), []dispatcher.EndpointConfig{\n\t\t\taoai(20, \"aideopenaieastus\", \"aide-text-embedding-ada-002\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-davinci-003\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-davinci-003\", false, crowdapi, qc, smtpserver, p50k, 2000, 2000), []dispatcher.EndpointConfig{\n\t\t\taoai(600, \"aideopenaieastus\", \"aide-davinci-003\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-code-davinci-002\": dispatcher.NewDispatcher(tr, logger, true, aoaiSpend(\"aide-code-davinci-002\", false, crowdapi, qc, smtpserver, p50k, 1000, 1000), []dispatcher.EndpointConfig{\n\t\t\taoai(600, \"aideopenaieastus\", \"aide-code-davinci-002\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-whisper\": dispatcher.NewDispatcher(tr, logger, true, azure.WhisperSpendFn(qc), []dispatcher.EndpointConfig{\n\t\t\taoaiNoReqLog(3, \"aideopenaieastus2\", \"aide-whisper\"),\n\t\t\taoaiNoReqLog(3, \"aideopenainorthcentralus\", \"aide-whisper\"),\n\t\t\taoaiNoReqLog(3, \"aideopenainorwayeast\", \"aide-whisper\"),\n\t\t\taoaiNoReqLog(3, \"aideopenaisouthindia\", \"aide-whisper\"),\n\t\t\taoaiNoReqLog(3, \"aideopenaiswedencentral\", \"aide-whisper\"),\n\t\t\taoaiNoReqLog(3, \"aideopenaiwesteurope\", \"aide-whisper\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-tts\": dispatcher.NewDispatcher(tr, logger, true, azure.TTSSpendFn(15000000, qc), []dispatcher.EndpointConfig{\n\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts\"),\n\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-gpt-4o-realtime-preview\": dispatcher.NewDispatcher(tr, logger, true, azure.RealtimeSpendFn(), []dispatcher.EndpointConfig{\n\t\t\taoai(500, \"aideopenaieastus2\", \"aide-gpt-4o-realtime-preview\"),\n\t\t\taoai(500, \"aideopenaiswedencentral\", \"aide-gpt-4o-realtime-preview\"),\n\t\t}, globalDailyResetController),\n\t\t\"aide-tts-hd\": dispatcher.NewDispatcher(tr, logger, true, azure.TTSSpendFn(30000000, qc), []dispatcher.EndpointConfig{\n\t\t\taoai(3, \"aideopenainorthcentralus\", \"aide-tts-hd\"),\n\t\t\taoai(3, \"aideopenaiswedencentral\", \"aide-tts-hd\"),\n\t\t}, globalDailyResetController),\n\t\t\"Dalle3\": dispatcher.NewDispatcher(tr, logger, true, azure.DalleSpendFn(4000000, qc, smtpserver), []dispatcher.EndpointConfig{\n\t\t\taoai(240, \"aideopenaiswedencentral\", \"dalle-3\"),\n\t\t\taoai(240, \"aideopenaiaustraliaeast\", \"dalle-3\"),\n\t\t\taoai(240, \"aideopenaieastus\", \"dalle-3\"),\n\t\t}, globalDailyResetController),\n\t\t\"dalle\": dispatcher.NewDispatcher(tr, logger, true, azure.DalleSpendFn(2000000, qc, smtpserver), []dispatcher.EndpointConfig{\n\t\t\taoai(1380, \"aideopenaieastus\", \"dalle\"),\n\t\t}, globalDailyResetController),\n\t\t\"dalleget\": dispatcher.NewDispatcher(tr, logger, true, common.SpendFn{\n\t\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\t\treturn 0, 1, nil\n\t\t\t},\n\t\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\t\treturn 0\n\t\t\t},\n\t\t\tAlert: func(user string, logger *slog.Logger) {},\n\t\t}, []dispatcher.EndpointConfig{\n\t\t\taoai(1380, \"aideopenaieastus\", \"dalleget\"),\n\t\t}, globalDailyResetController),\n\t}\n\t*/\n\t// End of commented old AOAI configuration - now using azure package\n\n\tcsesLLMAPIURL := envstr(\"CSES_LLM_API_URL\", \"https://mtklm-core.mediatek.inc\")\n\n\tmtklmr := dispatcher.NewEndpoint(context.Background(), false, dispatcher.EndpointConfig{URL: \"https://mtklm-mr.mediatek.inc\", Labels: []string{\"mtkmr\", \"cses\", \"c\"}, Hdrs: map[string]string{\n\t\t\"Authorization\": \"Bearer \" + envstr(\"CSES_LLM_MR_API_KEY\", \"\"),\n\t}}, tr, logger, common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\treturn 0, 1, nil // TODO\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\treturn 0\n\t\t},\n\t\tAlert: common.AlertFn(smtpserver, qc),\n\t}, globalDailyResetController)\n\n\tmtkcreatetoken := os.Getenv(\"CREATE_MTK_RESEARCH_COM_LLM_API_TOKEN\")\n\n\tmtkcreate := dispatcher.NewEndpoint(context.Background(), false, dispatcher.EndpointConfig{URL: \"https://create.mtkresearch.com\", Labels: []string{\"mtkmr\", \"cses\", \"c\"}, Hdrs: map[string]string{\n\t\t\"Authorization\": fmt.Sprintf(\"Bearer %s\", mtkcreatetoken),\n\t}}, tr, logger, common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\treturn 0, 1, nil // TODO\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\treturn 0\n\t\t},\n\t\tAlert: common.AlertFn(smtpserver, qc),\n\t}, globalDailyResetController)\n\n\tmtklcore := dispatcher.NewEndpoint(context.Background(), false, dispatcher.EndpointConfig{URL: csesLLMAPIURL, Labels: []string{\"mtkcore\", \"cses\", \"c\"}, Hdrs: map[string]string{\n\t\t\"Authorization\": \"Bearer \" + envstr(\"CSES_LLM_API_KEY\", \"\"),\n\t}}, tr, logger, common.SpendFn{\n\t\tPre: func(user, domain string, req *http.Request, body string) (estimate int, remain int, err error) {\n\t\t\tmodel := extractModel(req.URL.Path, body)\n\t\t\tif model != \"\" {\n\t\t\t\tif ok := permMgr.CheckServicePermission(req.Context(), req, model, domain, user, crowdapi); !ok {\n\t\t\t\t\treturn 0, 1, azure.DomainNotAllowed\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0, 1, nil // TODO\n\t\t},\n\t\tPost: func(user string, resp *http.Response, body string, preestimate int) (estimate int) {\n\t\t\treturn 0\n\t\t},\n\t\tAlert: common.AlertFn(smtpserver, qc),\n\t}, globalDailyResetController)\n\n\tvar creds *google.Credentials\n\tvar gcpcredonce sync.Once\n\n\tgeminiRegions := gemini.GeminiRegions\n\tgeminis := make(map[string]*dispatcher.Endpoint, len(geminiRegions))\n\tfor _, region := range geminiRegions {\n\t\t// Use smart SpendFn that can handle multiple Gemini models dynamically\n\t\tspendFn := gemini.SpendFnGeminiSmart(crowdapi, qc, smtpserver, cl100k, &creds, &gcpcredonce)\n\t\tgeminis[region] = dispatcher.NewEndpoint(context.Background(), false, dispatcher.EndpointConfig{\n\t\t\tURL:    \"https://aiplatform.googleapis.com\",\n\t\t\tLabels: []string{\"gcp\", \"gemini\", region},\n\t\t}, tr, logger, spendFn, globalDailyResetController)\n\t}\n\n\tdavinciShareProd := dispatcher.NewDaviciShareServerFunc(envstr(\"STORE_API_PROD_URL\", \"http://store-api-prod.default.svc.cluster.mke\"), envstr(\"DAVINCI_PROD_URL\", \"https://davinci.mediatek.inc/\"))\n\tdavinciShareStag := dispatcher.NewDaviciShareServerFunc(envstr(\"STORE_API_STAG_URL\", \"http://store-api-stag.default.svc.cluster.mke\"), envstr(\"DAVINCI_STAG_URL\", \"https://davinci-io.mediatek.inc/\"))\n\n\tawsKey := os.Getenv(\"AWS_ACCESS_KEY\")\n\tawsSecret := os.Getenv(\"AWS_SECRET_KEY\")\n\tawssigner := v4.NewSigner()\n\tsignAwsReq := awsclaude.SignAwsReq(awssigner, awsKey, awsSecret)\n\n\tawsdispatchers := make(map[string]*dispatcher.Dispatcher)\n\tawsModelEndpointConfigs := make(map[string][]dispatcher.EndpointConfig)\n\tmodelIDSpendFnKey := make(map[string]string)\n\tfor modelKey, arn := range awsclaude.ModelARNs {\n\t\tregion := awsclaude.GetRegionFromArn(arn)\n\t\tmodelWithVersion := awsclaude.GetModelWithVersionFromArn(arn)\n\t\tmodelId := awsclaude.GetModelIDFromModelWithVersion(modelWithVersion)\n\n\t\tendpointUrl := awsclaude.GetEndpointFromRegion(region)\n\t\tspendFnKey := awsclaude.ModelKeyToSpendFnKey(modelKey) // 例如 \"claude-v3-5-haiku\"\n\t\tmodelIDSpendFnKey[modelId] = spendFnKey\n\n\t\tspendFnFactory, ok := awsclaude.SpendFnMap[spendFnKey]\n\t\tif !ok {\n\t\t\tpanic(\"no spendFn for model: \" + modelKey)\n\t\t}\n\n\t\tfn := spendFnFactory(signAwsReq, crowdapi, qc, smtpserver, cl100k)\n\t\tepcForArn := dispatcher.EndpointConfig{\n\t\t\tWeight: 1,\n\t\t\tURL:    endpointUrl,\n\t\t\tLabels: []string{\"awsbedrock\", modelKey, region},\n\t\t}\n\t\tbedrockendpoint[modelKey] = dispatcher.NewEndpoint(\n\t\t\tcontext.Background(), false, epcForArn, tr, logger, fn, globalDailyResetController,\n\t\t)\n\n\t\tepcForModelId := dispatcher.EndpointConfig{\n\t\t\tWeight: 1,\n\t\t\tURL:    endpointUrl + \"/model/\" + modelWithVersion,\n\t\t\tLabels: []string{\"awsbedrock\", modelKey, region},\n\t\t}\n\n\t\tawsModelEndpointConfigs[modelId] = append(awsModelEndpointConfigs[modelId], epcForModelId)\n\t}\n\n\tfor modelId, epcs := range awsModelEndpointConfigs {\n\t\tspendFnKey := modelIDSpendFnKey[modelId]\n\t\tspendFn := awsclaude.SpendFnMap[spendFnKey](signAwsReq, crowdapi, qc, smtpserver, cl100k)\n\t\tawsdispatchers[modelId] = dispatcher.NewDispatcher(tr, logger, false, spendFn, epcs, globalDailyResetController)\n\t}\n\n\t// update modelMapGroupSVC\n\t// Initialize ModelPermissionManager before usage below\n\t// permMgr already initialized above using jwtKey and crowdapi\n\tmodelGroupSvc := NewModelGroupService(domain, logger)\n\tinitParams := ModelGroupInitParams{\n\t\tDomain:         domain,\n\t\tAOAIDispatcher: aoaidispatchers,\n\t\tAWSDispatcher:  awsdispatchers,\n\t\t// Use the injected model permission manager's map\n\t\tModelPermissionMap: permMgr.Map,\n\t\tClaudeGroups:       map[string]map[string]string{}, // ClaudeGroups temporarily disabled, replaced with an empty map. TODO: Restore when fixed.\n\t}\n\tmodelGroupSvc.InitAllModelGroups(initParams)\n\tenableModelCheck := envBool(\"ENABLE_MODEL_CHECK\", false)\n\n\tallowedLogger := slog.New(slog.NewJSONHandler(os.Stdout, nil))\n\n\tuserService := user.NewEngine(userServiceURL, jwtKey, crowdapi)\n\tjwtVeriHandler := APIV1.JWTVerifyHandler(userService)\n\tgin.SetMode(gin.ReleaseMode)\n\tapp := gin.New()\n\tapp.Use(gin.Recovery())\n\tapp.Use(header.Options)\n\tapp.Use(header.Secure)\n\tapp.Use(requestid.New())\n\tapp.GET(\"/\", func(c *gin.Context) {\n\t\tc.AbortWithStatus(http.StatusOK)\n\t})\n\t// Add auth routers\n\tauth.RegisterRoutes(app, domain, jwtKey, userService)\n\tapp.GET(\"/metrics\", gin.WrapH(promhttp.Handler()))\n\tapp.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n\t{\n\t\tv1 := app.Group(\"/v1\")\n\t\tv1.GET(\"/version\", APIV1.GetVersion)\n\t\tv1.POST(\"/token\",\n\t\t\tjwtVeriHandler,\n\t\t\tmiddleware.VerifyAdmin(crowdapi, \"gaisf_admins\"),\n\t\t\tAPIV1.JWTSignHandler(\n\t\t\t\tcrowdapi,\n\t\t\t\tuserService,\n\t\t\t),\n\t\t)\n\t\tv1.POST(\"/services/:uid/token\",\n\t\t\tjwtVeriHandler,\n\t\t\tmiddleware.VerifyAdmin(crowdapi, \"gaisf_admins\"),\n\t\t\tAPIV1.ServiceJWTSignHandler(\n\t\t\t\tcrowdapi,\n\t\t\t\tuserService,\n\t\t\t),\n\t\t)\n\t\tv1.GET(\"/models\", jwtVeriHandler, APIV1.UserModelsHandler(domain, crowdapi, modelGroupSvc, false))\n\t\tv1.GET(\"/admin/models\", jwtVeriHandler, APIV1.UserModelsHandler(domain, crowdapi, modelGroupSvc, true))\n\n\t\tawsClaudeModels := make(map[string]interface{})\n\t\tfor k := range awsdispatchers {\n\t\t\tawsClaudeModels[k] = struct{}{}\n\t\t}\n\t\tdeps := &ChatHandlerDeps{\n\t\t\tAoaidDispatchers: aoaidispatchers,\n\t\t\tDomain:           domain,\n\t\t\tMtklcore:         mtklcore,\n\t\t\tGeminis:          geminis,\n\t\t\tCrowdapi:         crowdapi,\n\t\t\tBuffers:          &buffers,\n\t\t\tAwsClaudesModels: awsClaudeModels,\n\t\t}\n\t\tif enableModelCheck {\n\t\t\tv1.POST(\"/chat/completions\", jwtVeriHandler, modelGroupSvc.CompletionsMiddleware(domain), deps.ChatCompletionsHandler)\n\t\t} else {\n\t\t\tv1.POST(\"/chat/completions\", jwtVeriHandler, deps.ChatCompletionsHandler)\n\t\t}\n\t\tv1.GET(\"/users/:uid/cap\", jwtVeriHandler, APIV1.UserCapHandler(qc))\n\t\tv1.POST(\"/users/:uid/token\", jwtVeriHandler, APIV1.UserTokenHandler(userService))\n\t\tv1.POST(\"/token/check\", jwtVeriHandler, APIV1.TokenCheckHandler)\n\t\tv1.POST(\"/login\", jwtVeriHandler, APIV1.LoginHandler(userService))\n\t}\n\tapp.POST(\"/verify\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"project\": lc.Project, \"tokenId\": lc.TokenID, \"account\": lc.Account, \"domain\": lc.Domain})\n\t})\n\tapp.GET(\"/in\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tlogger := allowedLogger.With(\"proj\", lc.Project, \"tkid\", lc.TokenID, \"acco\", lc.Account, \"rqid\", ctx.Request.Header.Get(\"X-Request-ID\"))\n\t\tlogger.Info(ctx.Request.URL.Path, \"req\", InListReq{Uid: ctx.Query(\"uid\"), List: ctx.Query(\"list\")}.ToString(), \"hdrs\", dispatcher.ToHeaderLogs(ctx.Request.Header, \"\", \"\", 0, 0, lc.Priority, 0, 0, 0))\n\n\t\tstatus, resp := checkInCrowdGroup(crowdapi, ctx.Query(\"list\"), ctx.Query(\"uid\"))\n\t\tlogger.Info(ctx.Request.URL.Path, \"resp\", resp.ToString())\n\t\tctx.AbortWithStatusJSON(status, resp)\n\t})\n\n\t// POST /bing-search endpoint\n\t// --- credential init, only once ---\n\tazureBingCfg, _ := azurebingsearch.GetConfig()\n\tazureBingCred, _ := azidentity.NewClientSecretCredential(\n\t\tazureBingCfg.TenantID,\n\t\tazureBingCfg.ClientID,\n\t\tazureBingCfg.ClientSecret,\n\t\tnil,\n\t)\n\n\tapp.POST(\"/bing-search\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tvar req struct {\n\t\t\tQ string `json:\"q\"`\n\t\t}\n\t\tif err := ctx.ShouldBindJSON(&req); err != nil || req.Q == \"\" {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"missing q\"})\n\t\t\treturn\n\t\t}\n\t\tresult, err := azurebingsearch.BingSearch(context.Background(), req.Q, azureBingCred)\n\t\tif err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\n\t\t\t\"project\": lc.Project,\n\t\t\t\"tokenId\": lc.TokenID,\n\t\t\t\"account\": lc.Account,\n\t\t\t\"domain\":  lc.Domain,\n\t\t\t\"result\":  result,\n\t\t})\n\t})\n\n\tapp.GET(\"/searchusers\", func(ctx *gin.Context) {\n\t\tcql := ctx.Query(\"cql\")\n\t\tlimit, ok := getLimit(ctx)\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\tusers, err := crowdapi.SearchUsers(context.Background(), cql, limit)\n\t\tif err == crowd.ErrNoPerms {\n\t\t\tctx.AbortWithError(http.StatusForbidden, err)\n\t\t\treturn\n\t\t}\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.JSON(http.StatusOK, users)\n\t})\n\n\tapp.GET(\"/searchgroups\", func(ctx *gin.Context) {\n\t\tcql := ctx.Query(\"cql\")\n\t\tlimit, ok := getLimit(ctx)\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\tgroups, err := crowdapi.SearchGroups(context.Background(), cql, limit)\n\t\tif err == crowd.ErrNoPerms {\n\t\t\tctx.AbortWithError(http.StatusForbidden, err)\n\t\t\treturn\n\t\t}\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.JSON(http.StatusOK, groups)\n\t})\n\n\tapp.GET(\"/groupmembers\", func(ctx *gin.Context) {\n\t\tgroup := ctx.Query(\"group\")\n\t\tlimit, ok := getLimit(ctx)\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\tusers, err := crowdapi.GetGroupNestedUsers(context.Background(), group, limit)\n\t\tif err == crowd.ErrNoPerms {\n\t\t\tctx.AbortWithError(http.StatusForbidden, err)\n\t\t\treturn\n\t\t}\n\t\tif err != nil {\n\t\t\tif strings.Contains(err.Error(), \"status code 404\") {\n\t\t\t\tctx.AbortWithError(http.StatusNotFound, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.JSON(http.StatusOK, users)\n\t})\n\tapp.GET(\"/allowed\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tlogger := allowedLogger.With(\"proj\", lc.Project, \"tkid\", lc.TokenID, \"acco\", lc.Account, \"rqid\", ctx.Request.Header.Get(\"X-Request-ID\"))\n\t\tlogger.Info(ctx.Request.URL.Path, \"req\", common.AllowedReq{Uid: ctx.Query(\"uid\"), Domain: ctx.Query(\"domain\")}.ToString(), \"hdrs\", dispatcher.ToHeaderLogs(ctx.Request.Header, \"\", \"\", 0, 0, lc.Priority, 0, 0, 0))\n\n\t\tstatus, resp := common.CheckPIM(crowdapi, ctx.Query(\"domain\"), ctx.Query(\"uid\"))\n\t\tlogger.Info(ctx.Request.URL.Path, \"resp\", resp.ToString())\n\t\tctx.AbortWithStatusJSON(status, resp)\n\t})\n\tapp.GET(\"/getcap\", func(ctx *gin.Context) {\n\t\tuid := strings.ToUpper(ctx.Query(\"uid\"))\n\t\tusage, cap, err := qc.GetCap(ctx.Request.Context(), uid)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"usage\": usage, \"cap\": cap, \"uid\": uid})\n\t})\n\tapp.POST(\"/charge\", func(ctx *gin.Context) {\n\t\tuid := strings.ToUpper(ctx.Query(\"uid\"))\n\t\tcost, err := strconv.Atoi(ctx.Query(\"cost\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, err)\n\t\t\treturn\n\t\t}\n\t\tif cost < 0 {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, errors.New(\"the cost should be >= 0\"))\n\t\t\treturn\n\t\t}\n\t\tremain, err := qc.Spend(ctx, uid, cost)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"remain\": remain, \"uid\": uid})\n\t})\n\tapp.POST(\"/setcap\", func(ctx *gin.Context) {\n\t\tif ctx.Request.Header.Get(\"jwt-enc\") != jwtKey {\n\t\t\tctx.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": \"invalid jwt-enc header\"})\n\t\t\treturn\n\t\t}\n\t\tuid := strings.ToUpper(ctx.Query(\"uid\"))\n\t\tif uid == \"\" {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"uid is required\"})\n\t\t\treturn\n\t\t}\n\t\tcap, err := strconv.Atoi(ctx.Query(\"cap\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"invalid cap value\"})\n\t\t\treturn\n\t\t}\n\t\tend, err := time.Parse(\"2006-01-02\", ctx.Query(\"end\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"invalid end format\"})\n\t\t\treturn\n\t\t}\n\t\tif err = qc.SetCap(ctx.Request.Context(), uid, cap, end.Unix()); err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to set cap\"})\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{})\n\t})\n\t// Set a session cookie in Redis with a custom TTL\n\tapp.POST(\"/setSessionCookie\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tuserName := ctx.PostForm(\"user_name\")\n\t\tcookie := ctx.PostForm(\"cookie\")\n\t\tttlSecondsStr := ctx.PostForm(\"ttlSeconds\")\n\t\tttlSeconds, err := strconv.Atoi(ttlSecondsStr)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, err)\n\t\t\treturn\n\t\t}\n\t\tif err := qc.SetSessionCookie(ctx, userName, cookie, ttlSeconds); err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.Status(http.StatusOK)\n\t})\n\t// Get a session cookie from Redis\n\tapp.GET(\"/getSessionCookie\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tuserName := ctx.Query(\"user_name\")\n\t\tcookie, err := qc.GetSessionCookie(ctx, userName)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tif cookie == \"\" {\n\t\t\tctx.AbortWithStatus(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\t\tctx.JSON(http.StatusOK, gin.H{\"cookie\": cookie})\n\t})\n\tapp.POST(\"/checkrate\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc, ok := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tif !ok || lc == nil || lc.UID == nil || *lc.UID == \"\" {\n\t\t\tctx.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": \"user not found in context\"})\n\t\t\treturn\n\t\t}\n\t\tuid := *lc.UID\n\t\tok, req, cap, gap, err := qc.Limit(ctx.Request.Context(), strings.ToUpper(uid))\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"ok\": ok, \"req\": req, \"cap\": cap, \"gap\": gap})\n\t})\n\tapp.POST(\"/setreq\", jwtVeriHandler, middleware.VerifyAdmin(crowdapi, \"gaisf_admins\"), func(ctx *gin.Context) {\n\t\tuid := strings.ToUpper(ctx.Query(\"uid\"))\n\t\tif uid == \"\" {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"uid is required\"})\n\t\t\treturn\n\t\t}\n\t\treq, err := strconv.Atoi(ctx.Query(\"req\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"invalid req\"})\n\t\t\treturn\n\t\t}\n\t\tgap, err := strconv.Atoi(ctx.Query(\"gap\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"invalid gap\"})\n\t\t\treturn\n\t\t}\n\t\tif err = qc.SetLimit(ctx.Request.Context(), uid, int64(req), int64(gap)); err != nil {\n\t\t\tctx.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to set limit\"})\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{})\n\t})\n\tapp.GET(\"/getreq\", func(ctx *gin.Context) {\n\t\tuid := strings.ToUpper(ctx.Query(\"uid\"))\n\t\tif uid == \"\" {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, errors.New(\"uid is required\"))\n\t\t\treturn\n\t\t}\n\t\tret, err := qc.GetLimit(ctx.Request.Context(), uid)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"req\": ret[0], \"gap\": ret[1]})\n\t})\n\tapp.GET(\"/time\", func(ctx *gin.Context) {\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"ts\": time.Now()})\n\t})\n\tapp.POST(\"/spend\", jwtVeriHandler, func(ctx *gin.Context) {\n\t\tlc, ok := ctx.MustGet(\"lc\").(*common.LoggingContext)\n\t\tif !ok || lc == nil || lc.UID == nil || *lc.UID == \"\" {\n\t\t\tctx.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": \"user not found in context\"})\n\t\t\treturn\n\t\t}\n\t\tuid := *lc.UID\n\t\tif uid == \"\" {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, errors.New(\"uid is required\"))\n\t\t\treturn\n\t\t}\n\t\tspend, err := strconv.Atoi(ctx.Query(\"spend\"))\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusBadRequest, err)\n\t\t\treturn\n\t\t}\n\t\tremain, err := qc.Spend(ctx.Request.Context(), uid, spend)\n\t\tif err != nil {\n\t\t\tctx.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\tctx.AbortWithStatusJSON(http.StatusOK, gin.H{\"remain\": remain})\n\t})\n\n\t// davinciProcxyRouter is a Gin middleware function that handles routing and authentication for various API endpoints.\n\t// It performs the following main functions:\n\t//   - Validates domain access and user authentication\n\t//   - Enforces X-User-Id header requirement for cost allocation\n\t//   - Routes requests to appropriate services based on URL path:\n\t//     * LLM models (v3)\n\t//     * OpenAI services (including DALL-E)\n\t//     * Anthropic Claude models\n\t//     * Bing search\n\t//     * Azure Cognitive Services (vision, form recognition)\n\t//     * Speech services (text-to-speech, speech-to-text)\n\t//     * Gemini API endpoints\n\t//     * Davinci chat sharing\n\t//   - Performs PIM checks for certain endpoints\n\t//   - Enriches headers with required information\n\t//   - Handles timeout simulation for testing\n\t// Parameters:\n\t//   - c: Gin context containing the HTTP request and response information\n\tdavinciProcxyRouter := func(c *gin.Context) {\n\t\tlc := c.MustGet(\"lc\").(*common.LoggingContext)\n\t\tif lc.UID == nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": gin.H{\n\t\t\t\t\"code\":    strconv.Itoa(http.StatusForbidden),\n\t\t\t\t\"message\": \"missing UID in logging context\",\n\t\t\t}})\n\t\t\treturn\n\t\t}\n\t\tif lc.Domain == \"\" {\n\t\t\tlc.Domain = \"oa\"\n\t\t}\n\t\tif (domain == \"oa\" && lc.Domain != domain) || ((common.IsAirgappedDomain(domain) || common.IsAirgappedDomain(c.Request.Header.Get(\"X-Domain\"))) && !common.IsAirgappedDomain(lc.Domain)) {\n\t\t\tc.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": gin.H{\n\t\t\t\t\"code\":    strconv.Itoa(http.StatusForbidden),\n\t\t\t\t\"message\": fmt.Sprintf(\"token for domain %q is prohibited here\", lc.Domain),\n\t\t\t}})\n\t\t\treturn\n\t\t}\n\t\tendUser := *lc.UID\n\t\tif endUser == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": gin.H{\n\t\t\t\t\"code\":    strconv.Itoa(http.StatusForbidden),\n\t\t\t\t\"message\": \"The X-User-Id request header is now mandatory for cost allocation. Please set the parameter with \\\"mtkxxxxx\\\" for allocating to the end user's department or \\\"srv_xxxx\\\" for background jobs.\",\n\t\t\t}})\n\t\t\treturn\n\t\t}\n\n\t\t// Check if the request is for a specific endpoint that requires PIM check\n\t\t// and if the request method is POST, PUT, or GET with specific path prefix\n\t\t// If so, perform the PIM check and update the X-User-Id header if necessary\n\t\t// If the PIM check fails, abort the request with the appropriate status and response\n\t\t// If the PIM check passes, update the LoggingContext with the response data (Banwords)\n\t\tif !strings.HasPrefix(c.Request.URL.Path, \"/llm/v3\") &&\n\t\t\t(c.Request.Method == http.MethodPost ||\n\t\t\t\tc.Request.Method == http.MethodPut ||\n\t\t\t\t(c.Request.Method == http.MethodGet && strings.HasPrefix(c.Request.URL.Path, \"/v7.0\"))) {\n\t\t\tstatus, resp := common.CheckPIM(crowdapi, lc.Domain, endUser)\n\t\t\tif status != http.StatusOK {\n\t\t\t\tlogger := allowedLogger.With(\"proj\", lc.Project, \"tkid\", lc.TokenID, \"acco\", lc.Account, \"rqid\", c.Request.Header.Get(\"X-Request-ID\"))\n\t\t\t\tlogger.Info(c.Request.URL.Path, \"req\", \"checkpim\", \"hdrs\", dispatcher.ToHeaderLogs(c.Request.Header, \"\", \"\", 0, 0, lc.Priority, 0, 0, 0))\n\t\t\t\tlogger.Info(c.Request.URL.Path, \"resp\", resp.ToString(), \"hdrs\", dispatcher.ToHeaderLogs(c.Request.Header, \"\", \"\", 0, 0, lc.Priority, 0, 0, 0))\n\t\t\t\tc.AbortWithStatusJSON(status, resp)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif resp.UID != \"\" && resp.UID != endUser {\n\t\t\t\tc.Request.Header.Set(\"X-User-Id\", resp.UID)\n\t\t\t}\n\t\t\tlc.Banwords = resp.Banwords\n\t\t}\n\n\t\tif strings.HasPrefix(c.Request.URL.Path, \"/timeout\") {\n\t\t\tduration, _ := time.ParseDuration(c.Query(\"dur\"))\n\t\t\ttime.Sleep(duration)\n\t\t\tc.JSON(http.StatusOK, gin.H{\"duration\": duration})\n\t\t\treturn\n\t\t}\n\n\t\tif c.Request.Method != http.MethodDelete {\n\n\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/model/anthropic\") {\n\t\t\t\tmodelId := strings.Split(c.Request.URL.Path, \"/\")[2]\n\t\t\t\tdispatcher, ok := awsdispatchers[modelId]\n\t\t\t\tif !ok {\n\t\t\t\t\tc.AbortWithStatusJSON(http.StatusNotFound, gin.H{\"error\": \"model not found\"})\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tparts := strings.Split(c.Request.URL.Path, \"/\")\n\t\t\t\tc.Request.URL.Path = \"/\"\n\t\t\t\tif len(parts) > 3 {\n\t\t\t\t\tc.Request.URL.Path = \"/\" + strings.Join(parts[3:], \"/\")\n\t\t\t\t}\n\n\t\t\t\tdispatcher.ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// route aws bedrock with bedrock arn\n\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/model/\") {\n\t\t\t\tmodelKey := awsclaude.ParseBedrockModelKeyFromPath(c.Request.URL.Path)\n\t\t\t\tif ep, ok := bedrockendpoint[modelKey]; ok && ep != nil {\n\t\t\t\t\tep.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/llm/v3/models/mtkresearch\") {\n\t\t\t\tif err := enrichCSESHeaders(c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)), domain, lc.Project, lc.TokenID, lc.Payload); err != nil {\n\t\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif mtkcreatetoken != \"\" {\n\t\t\t\t\tmtkcreate.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t} else {\n\t\t\t\t\tmtklmr.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/llm/v3/info\") {\n\t\t\t\tif err := enrichCSESHeaders(c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)), domain, lc.Project, lc.TokenID, lc.Payload); err != nil {\n\t\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tmtklcore.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/llm/v3/models\") {\n\t\t\t\tif err := enrichCSESHeaders(c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)), domain, lc.Project, lc.TokenID, lc.Payload); err != nil {\n\t\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tmtklcore.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/openai/\") {\n\t\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/openai/assistants\") {\n\t\t\t\t\tassistantsAPI.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/openai/threads\") {\n\t\t\t\t\tassistantsAPI.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif strings.HasPrefix(c.Request.URL.Path, \"/openai/files\") {\n\t\t\t\t\tassistantsAPI.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tdeployment := extractURLSlug(c.Request.URL.Path, 3)\n\t\t\t\tswitch deployment {\n\t\t\t\tcase \"generations:submit\": // DALL·E submit\n\t\t\t\t\tdeployment = \"dalle\"\n\t\t\t\tcase \"images\": // DALL·E get\n\t\t\t\t\tdeployment = \"dalleget\"\n\t\t\t\t}\n\t\t\t\tif d, ok := aoaidispatchers[deployment]; ok {\n\t\t\t\t\t// Check and set default api-version only if needed\n\t\t\t\t\t// See the reference: https://learn.microsoft.com/en-us/azure/ai-services/openai/reference\n\t\t\t\t\tq := c.Request.URL.Query()\n\t\t\t\t\tif q.Get(\"api-version\") == \"\" {\n\t\t\t\t\t\tq.Set(\"api-version\", azure.OpenAIAPIVersion)\n\t\t\t\t\t\tc.Request.URL.RawQuery = q.Encode()\n\t\t\t\t\t}\n\t\t\t\t\td.ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t} else {\n\t\t\t\t\tif aoaifallback == nil || aoaifallback.Proxy() == nil {\n\t\t\t\t\t\tc.AbortWithStatus(http.StatusNotFound)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\taoaifallback.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/vision\") {\n\t\t\t\tif c.Request.ContentLength > 1024*1024*10 {\n\t\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": gin.H{\n\t\t\t\t\t\t\"code\": strconv.Itoa(http.StatusBadRequest),\n\t\t\t\t\t}})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tazurecognitive.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/formrecognizer\") {\n\t\t\t\tazurecognitive.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/api/texttospeech\") {\n\t\t\t\tcustomvoice.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/speech/recognition/conversation/cognitiveservices\") {\n\t\t\t\tsttxy.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\treturn\n\t\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/v1/projects/mtk-aide-gemini-poc/locations\") {\n\t\t\t\t// Remove API version from path if present (e.g., v1beta1 after region)\n\t\t\t\t// Original: /v1/projects/mtk-aide-gemini-poc/locations/global/v1beta1/publishers/...\n\t\t\t\t// Target:   /v1/projects/mtk-aide-gemini-poc/locations/global/publishers/...\n\t\t\t\toriginalPath := c.Request.URL.Path\n\t\t\t\tpathAfterLocations := originalPath[len(\"/v1/projects/mtk-aide-gemini-poc/locations/\"):]\n\n\t\t\t\t// Find first slash to get region name\n\t\t\t\tif firstSlash := strings.Index(pathAfterLocations, \"/\"); firstSlash > 0 {\n\t\t\t\t\tregion := pathAfterLocations[:firstSlash]\n\t\t\t\t\tremainingPath := pathAfterLocations[firstSlash+1:]\n\n\t\t\t\t\t// Check if the next segment is an API version (v1beta1, v2beta1, v1alpha, v2alpha2, etc.)\n\t\t\t\t\tif nextSlash := strings.Index(remainingPath, \"/\"); nextSlash > 0 {\n\t\t\t\t\t\tpotentialVersion := remainingPath[:nextSlash]\n\t\t\t\t\t\tif matched, _ := regexp.MatchString(\"^v\\\\d+(alpha|beta)\\\\d*$\", potentialVersion); matched {\n\t\t\t\t\t\t\t// Reconstruct path without the API version\n\t\t\t\t\t\t\tc.Request.URL.Path = \"/v1/projects/mtk-aide-gemini-poc/locations/\" + region + \"/\" + remainingPath[nextSlash+1:]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Match against region\n\t\t\t\t\tif endpoint, exists := geminis[region]; exists {\n\t\t\t\t\t\tendpoint.Proxy().ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.AbortWithStatus(http.StatusNotFound)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tdeployment := extractURLSlug(c.Request.URL.Path, 1)\n\n\t\t\t\tif d, ok := aoaidispatchers[deployment]; ok {\n\t\t\t\t\tc.Request.URL.Path = strings.TrimPrefix(c.Request.URL.Path, \"/\"+deployment)\n\t\t\t\t\td.ServeHTTP(c.Writer, c.Request.WithContext(context.WithValue(c.Request.Context(), \"lc\", lc)))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tif strings.HasPrefix(c.Request.URL.Path, \"/davinci/share-chat\") {\n\t\t\tdavinciShareProd(c)\n\t\t\treturn\n\t\t} else if strings.HasPrefix(c.Request.URL.Path, \"/davinci-io/share-chat\") {\n\t\t\tdavinciShareStag(c)\n\t\t\treturn\n\t\t}\n\t\tc.AbortWithStatus(http.StatusNotFound)\n\t}\n\n\tenableLLMOverride := envBool(\"ENABLE_OVERRIDE_LLM\", false)\n\tif enableLLMOverride {\n\t\tinitOverriddenMiddleware()\n\t\tapp.NoRoute(header.Options, jwtVeriHandler, overrideMiddleware, davinciProcxyRouter)\n\t} else {\n\t\tapp.NoRoute(header.Options, jwtVeriHandler, davinciProcxyRouter)\n\t}\n\n\tgo func() {\n\t\tsrv := &http.Server{\n\t\t\tAddr:              \":\" + envstr(\"SERVER_PORT\", \"8080\"),\n\t\t\tHandler:           app.Handler(),\n\t\t\tReadHeaderTimeout: time.Minute,\n\t\t\tReadTimeout:       0, // intentionally 0\n\t\t\tWriteTimeout:      0, // intentionally 0\n\t\t\tMaxHeaderBytes:    http.DefaultMaxHeaderBytes,\n\t\t}\n\t\tif err := srv.ListenAndServe(); err != http.ErrServerClosed {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tpoker := poker.DavinciPoker{\n\t\tUsername:    envstr(\"IA_USERNAME\", \"\"),\n\t\tPassword:    envstr(\"IA_PASSWORD\", \"\"),\n\t\tBotTenantID: envstr(\"BOT_TENANT_ID\", \"\"),\n\t\tBotID:       envstr(\"BOT_ID\", \"\"),\n\t\tBotPassword: envstr(\"BOT_PASSWORD\", \"\"),\n\t}\n\tgo poker.RunLoop(30 * time.Minute)\n\n\tsigs := make(chan os.Signal, 1)\n\tsignal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\t<-sigs\n\tcancel()\n\ttime.Sleep(5 * time.Second)\n}\n","structuredPatch":[{"oldStart":70,"oldLines":7,"newStart":70,"newLines":6,"lines":["   Password string `json:\"password\" binding:\"required\"`"," }"," ","-// Types moved to azure package - using azure.AoaiResp and azure.DalleReq"," "," type ResourceConfig struct {","   URL    string `json:\"url\"`"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"654a32fe-38b1-4d28-9042-be89da9fadd6","isSidechain":false,"userType":"external","cwd":"/Users/mtk19651/project/azure-gateway","sessionId":"5ea0512a-8a4e-419a-b3c3-d8352b78fe60","version":"1.0.84","gitBranch":"main","type":"assistant","uuid":"5e77afe3-f059-4d3b-bbcc-5b218c6a02c7","timestamp":"2025-08-23T09:49:37.023Z","message":{"id":"2473d8bc-a932-4131-94a3-64104d38a4ed","model":"<synthetic>","role":"assistant","stop_reason":"stop_sequence","stop_sequence":"","type":"message","usage":{"input_tokens":0,"output_tokens":0,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"server_tool_use":{"web_search_requests":0},"service_tier":null},"content":[{"type":"text","text":"API Error: Request timed out."}]},"isApiErrorMessage":true}
